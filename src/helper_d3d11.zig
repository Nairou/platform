const std = @import("std");
const win32 = @import("helper_win32.zig");
const dxgi = @import("helper_dxgi.zig");
const IUnknown = win32.IUnknown;

const WINAPI = std.os.windows.WINAPI;
const BOOL = std.os.windows.BOOL;
const BYTE = u8;
const GUID = std.os.windows.GUID;
const HANDLE = std.os.windows.HANDLE;
const HDC = std.os.windows.HDC;
const HINSTANCE = std.os.windows.HINSTANCE;
const HMODULE = std.os.windows.HMODULE;
const HMONITOR = std.os.windows.HANDLE;
const HRESULT = std.os.windows.HRESULT;
const HWND = std.os.windows.HWND;
const INT = i32;
const LARGE_INTEGER = i64;
const LUID = win32.LUID;
const RECT = win32.RECT;
const SIZE = win32.SIZE;
const SIZE_T = usize;
const WCHAR = u16;
const WINBOOL = std.os.windows.BOOL;

// Constants
pub const D3D11_16BIT_INDEX_STRIP_CUT_VALUE = 0xffff;
pub const D3D11_1_UAV_SLOT_COUNT = 64;
pub const D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = 0x10000;
pub const D3D11_32BIT_INDEX_STRIP_CUT_VALUE = 0xffffffff;
pub const D3D11_8BIT_INDEX_STRIP_CUT_VALUE = 0xff;
pub const D3D11_ANISOTROPIC_FILTERING_BIT = 0x40;
pub const D3D11_APPEND_ALIGNED_ELEMENT = 0xffffffff;
pub const D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = 9;
pub const D3D11_ASYNC_GETDATA_FLAG = enum(u32) {
    D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1,
};
pub const D3D11_AUTHENTICATED_CHANNEL_TYPE = enum(u32) {
    D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    EncryptionGuid: GUID,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    DecoderHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    DeviceHandle: HANDLE,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    StartSequenceQuery: u32,
    StartSequenceConfigure: u32,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_INPUT = extern struct {
    omac: D3D11_OMAC,
    ConfigureType: GUID,
    hChannel: HANDLE,
    SequenceNumber: u32,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_OUTPUT = extern struct {
    omac: D3D11_OMAC,
    ConfigureType: GUID,
    hChannel: HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    Protections: D3D11_AUTHENTICATED_PROTECTION_FLAGS,
};
pub const D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    ProcessType: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE,
    ProcessHandle: HANDLE,
    AllowAccess: WINBOOL,
};
pub const D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = enum(u32) {
    D3D11_PROCESSIDTYPE_UNKNOWN = 0x0,
    D3D11_PROCESSIDTYPE_DWM = 0x1,
    D3D11_PROCESSIDTYPE_HANDLE = 0x2,
};
pub const D3D11_AUTHENTICATED_PROTECTION_FLAGS = extern union {
    Flags: packed struct(u32) {
        ProtectionEnabled: bool,
        OverlayOrFullscreenRequired: bool,
        Reserved: u30,
    },
    Value: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuidCount: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    EncryptionGuidIndex: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuidIndex: u32,
    EncryptionGuid: GUID,
};
pub const D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    BusType: D3D11_BUS_TYPE,
    AccessibleInContiguousBlocks: WINBOOL,
    AccessibleInNonContiguousBlocks: WINBOOL,
};
pub const D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE,
};
pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    DecoderHandle: HANDLE,
};
pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DecoderHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    DeviceHandle: HANDLE,
};
pub const D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuid: GUID,
};
pub const D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
};
pub const D3D11_AUTHENTICATED_QUERY_INPUT = extern struct {
    QueryType: GUID,
    hChannel: HANDLE,
    SequenceNumber: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT = extern struct {
    omac: D3D11_OMAC,
    QueryType: GUID,
    hChannel: HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
};
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    OutputIDCount: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    OutputIDIndex: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: HANDLE,
    CryptoSessionHandle: HANDLE,
    OutputIDIndex: u32,
    OutputID: u64,
};
pub const D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ProtectionFlags: D3D11_AUTHENTICATED_PROTECTION_FLAGS,
};
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    RestrictedSharedResourceProcessCount: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    ProcessIndex: u32,
};
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ProcessIndex: u32,
    ProcessIdentifier: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE,
    ProcessHandle: HANDLE,
};
pub const D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    UnrestrictedProtectedSharedResourceCount: u32,
};
pub const D3D11_BIND_FLAG = enum(u32) {
    D3D11_BIND_VERTEX_BUFFER = 0x1,
    D3D11_BIND_INDEX_BUFFER = 0x2,
    D3D11_BIND_CONSTANT_BUFFER = 0x4,
    D3D11_BIND_SHADER_RESOURCE = 0x8,
    D3D11_BIND_STREAM_OUTPUT = 0x10,
    D3D11_BIND_RENDER_TARGET = 0x20,
    D3D11_BIND_DEPTH_STENCIL = 0x40,
    D3D11_BIND_UNORDERED_ACCESS = 0x80,
    D3D11_BIND_DECODER = 0x200,
    D3D11_BIND_VIDEO_ENCODER = 0x400,
};
pub const D3D11_BLEND = enum(u32) {
    D3D11_BLEND_ZERO = 1,
    D3D11_BLEND_ONE = 2,
    D3D11_BLEND_SRC_COLOR = 3,
    D3D11_BLEND_INV_SRC_COLOR = 4,
    D3D11_BLEND_SRC_ALPHA = 5,
    D3D11_BLEND_INV_SRC_ALPHA = 6,
    D3D11_BLEND_DEST_ALPHA = 7,
    D3D11_BLEND_INV_DEST_ALPHA = 8,
    D3D11_BLEND_DEST_COLOR = 9,
    D3D11_BLEND_INV_DEST_COLOR = 10,
    D3D11_BLEND_SRC_ALPHA_SAT = 11,
    D3D11_BLEND_BLEND_FACTOR = 14,
    D3D11_BLEND_INV_BLEND_FACTOR = 15,
    D3D11_BLEND_SRC1_COLOR = 16,
    D3D11_BLEND_INV_SRC1_COLOR = 17,
    D3D11_BLEND_SRC1_ALPHA = 18,
    D3D11_BLEND_INV_SRC1_ALPHA = 19,
};
pub const D3D11_BLEND_DESC = extern struct {
    AlphaToCoverageEnable: WINBOOL,
    IndependentBlendEnable: WINBOOL,
    RenderTarget: [8]D3D11_RENDER_TARGET_BLEND_DESC,
};
pub const D3D11_BLEND_OP = enum(u32) {
    D3D11_BLEND_OP_ADD = 1,
    D3D11_BLEND_OP_SUBTRACT = 2,
    D3D11_BLEND_OP_REV_SUBTRACT = 3,
    D3D11_BLEND_OP_MIN = 4,
    D3D11_BLEND_OP_MAX = 5,
};
pub const D3D11_BOX = extern struct {
    left: u32,
    top: u32,
    front: u32,
    right: u32,
    bottom: u32,
    back: u32,
};
pub const D3D11_BUFFER_DESC = extern struct {
    ByteWidth: u32,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
    StructureByteStride: u32,
};
pub const D3D11_BUFFER_RTV = extern struct {
    unnamed1: extern union {
        FirstElement: u32,
        ElementOffset: u32,
    },
    unnamed2: extern union {
        NumElements: u32,
        ElementWidth: u32,
    },
};
pub const D3D11_BUFFER_SRV = extern struct {
    unnamed1: extern union {
        FirstElement: u32,
        ElementOffset: u32,
    },
    unnamed2: extern union {
        NumElements: u32,
        ElementWidth: u32,
    },
};
pub const D3D11_BUFFER_UAV = extern struct {
    FirstElement: u32,
    NumElements: u32,
    Flags: u32,
};
pub const D3D11_BUFFEREX_SRV = extern struct {
    FirstElement: u32,
    NumElements: u32,
    Flags: u32,
};
pub const D3D11_BUFFEREX_SRV_FLAG = enum(u32) {
    D3D11_BUFFEREX_SRV_FLAG_RAW = 0x1,
};
pub const D3D11_BUS_TYPE = enum(u32) {
    D3D11_BUS_TYPE_OTHER = 0x0,
    D3D11_BUS_TYPE_PCI = 0x1,
    D3D11_BUS_TYPE_PCIX = 0x2,
    D3D11_BUS_TYPE_PCIEXPRESS = 0x3,
    D3D11_BUS_TYPE_AGP = 0x4,
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x10000,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x20000,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x30000,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x40000,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x50000,
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = 0x80000000,
};
pub const D3D11_CLASS_INSTANCE_DESC = extern struct {
    InstanceId: u32,
    InstanceIndex: u32,
    TypeId: u32,
    ConstantBuffer: u32,
    BaseConstantBufferOffset: u32,
    BaseTexture: u32,
    BaseSampler: u32,
    Created: WINBOOL,
};
pub const D3D11_CLEAR_FLAG = enum(u32) {
    D3D11_CLEAR_DEPTH = 0x1,
    D3D11_CLEAR_STENCIL = 0x2,
};
pub const D3D11_CLIP_OR_CULL_DISTANCE_COUNT = 8;
pub const D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = 2;
pub const D3D11_COLOR_WRITE_ENABLE = enum(u32) {
    D3D11_COLOR_WRITE_ENABLE_RED = 1,
    D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D11_COLOR_WRITE_ENABLE_ALL = ((.D3D11_COLOR_WRITE_ENABLE_RED | .D3D11_COLOR_WRITE_ENABLE_GREEN) | .D3D11_COLOR_WRITE_ENABLE_BLUE) | .D3D11_COLOR_WRITE_ENABLE_ALPHA,
};
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = 14;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = 32;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = 4;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = 15;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = 16;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = 15;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
pub const D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = 64;
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = 4;
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = 1;
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = 1;
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = 1;
pub const D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = 32;
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = 1;
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = 128;
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = 1;
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = 1;
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = 128;
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = 1;
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = 16;
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = 1;
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = 1;
pub const D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = 16;
pub const D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = 32;
pub const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = 32;
pub const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = 4;
pub const D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = 4096;
pub const D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = 3;
pub const D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = 3;
pub const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = 10;
pub const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = -10;
pub const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = -8;
pub const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = 7;
pub const D3D11_COMPARISON_FILTERING_BIT = 0x80;
pub const D3D11_COMPARISON_FUNC = enum(u32) {
    D3D11_COMPARISON_NEVER = 1,
    D3D11_COMPARISON_LESS = 2,
    D3D11_COMPARISON_EQUAL = 3,
    D3D11_COMPARISON_LESS_EQUAL = 4,
    D3D11_COMPARISON_GREATER = 5,
    D3D11_COMPARISON_NOT_EQUAL = 6,
    D3D11_COMPARISON_GREATER_EQUAL = 7,
    D3D11_COMPARISON_ALWAYS = 8,
};
pub const D3D11_CONSERVATIVE_RASTERIZATION_TIER = enum(u32) {
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0x0,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 0x1,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 0x2,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 0x3,
};
pub const D3D11_CONTENT_PROTECTION_CAPS = enum(u32) {
    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 0x1,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 0x2,
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 0x4,
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 0x8,
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 0x10,
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 0x20,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 0x40,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 0x80,
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 0x100,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 0x200,
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 0x400,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 0x800,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 0x1000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 0x2000,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 0x4000,
};
pub const D3D11_COUNTER = enum(u32) {
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000,
};
pub const D3D11_COUNTER_DESC = extern struct {
    Counter: D3D11_COUNTER,
    MiscFlags: u32,
};
pub const D3D11_COUNTER_INFO = extern struct {
    LastDeviceDependentCounter: D3D11_COUNTER,
    NumSimultaneousCounters: u32,
    NumDetectableParallelUnits: u8,
};
pub const D3D11_COUNTER_TYPE = enum(u32) {
    D3D11_COUNTER_TYPE_FLOAT32 = 0,
    D3D11_COUNTER_TYPE_UINT16 = 1,
    D3D11_COUNTER_TYPE_UINT32 = 2,
    D3D11_COUNTER_TYPE_UINT64 = 3,
};
pub const D3D11_CPU_ACCESS_FLAG = enum(u32) {
    D3D11_CPU_ACCESS_WRITE = 0x10000,
    D3D11_CPU_ACCESS_READ = 0x20000,
};
pub const D3D11_CREATE_DEVICE_FLAG = packed struct(u32) {
    SINGLETHREADED: bool = false,
    DEBUG: bool = false,
    SWITCH_TO_REF: bool = false,
    PREVENT_INTERNAL_THREADING_OPTIMIZATIONS: bool = false,
    unused1: bool = false,
    BGRA_SUPPORT: bool = false,
    DEBUGGABLE: bool = false,
    PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY: bool = false,
    DISABLE_GPU_TIMEOUT: bool = false,
    unused2: bool = false,
    unused3: bool = false,
    VIDEO_SUPPORT: bool = false,
    unused4: u20 = 0,
};
pub const D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 256;
pub const D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = 64;
pub const D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 240;
pub const D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = 68;
pub const D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 224;
pub const D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = 72;
pub const D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 208;
pub const D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = 76;
pub const D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 192;
pub const D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = 84;
pub const D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 176;
pub const D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = 92;
pub const D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 160;
pub const D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = 100;
pub const D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 144;
pub const D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = 112;
pub const D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 128;
pub const D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = 128;
pub const D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 112;
pub const D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = 144;
pub const D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 96;
pub const D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = 168;
pub const D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 80;
pub const D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = 204;
pub const D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 64;
pub const D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = 256;
pub const D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 48;
pub const D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = 340;
pub const D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 32;
pub const D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = 512;
pub const D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = 16;
pub const D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = 768;
pub const D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = 1;
pub const D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = 256;
pub const D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = 768;
pub const D3D11_CS_4_X_THREAD_GROUP_MAX_X = 768;
pub const D3D11_CS_4_X_THREAD_GROUP_MAX_Y = 768;
pub const D3D11_CS_4_X_UAV_REGISTER_COUNT = 1;
pub const D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = 65535;
pub const D3D11_CS_TGSM_REGISTER_COUNT = 8192;
pub const D3D11_CS_TGSM_REGISTER_READS_PER_INST = 1;
pub const D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = 1;
pub const D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = 1;
pub const D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = 1024;
pub const D3D11_CS_THREAD_GROUP_MAX_X = 1024;
pub const D3D11_CS_THREAD_GROUP_MAX_Y = 1024;
pub const D3D11_CS_THREAD_GROUP_MAX_Z = 64;
pub const D3D11_CS_THREAD_GROUP_MIN_X = 1;
pub const D3D11_CS_THREAD_GROUP_MIN_Y = 1;
pub const D3D11_CS_THREAD_GROUP_MIN_Z = 1;
pub const D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = 16384;
pub const D3D11_CULL_MODE = enum(u32) {
    D3D11_CULL_NONE = 1,
    D3D11_CULL_FRONT = 2,
    D3D11_CULL_BACK = 3,
};
pub const D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE = 0x8;
pub const D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS = 0x40;
pub const D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION = 0x80;
pub const D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP = 0x2;
pub const D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = 0x1;
pub const D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE = 0x10;
pub const D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = 0x4;
pub const D3D11_DEFAULT_DEPTH_BIAS = 0;
pub const D3D11_DEFAULT_DEPTH_BIAS_CLAMP = 0.0;
pub const D3D11_DEFAULT_MAX_ANISOTROPY = 16;
pub const D3D11_DEFAULT_MIP_LOD_BIAS = 0.0;
pub const D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = 0;
pub const D3D11_DEFAULT_SAMPLE_MASK = 0xffffffff;
pub const D3D11_DEFAULT_SCISSOR_ENDX = 0;
pub const D3D11_DEFAULT_SCISSOR_ENDY = 0;
pub const D3D11_DEFAULT_SCISSOR_STARTX = 0;
pub const D3D11_DEFAULT_SCISSOR_STARTY = 0;
pub const D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = 0.0;
pub const D3D11_DEFAULT_STENCIL_READ_MASK = 0xff;
pub const D3D11_DEFAULT_STENCIL_REFERENCE = 0;
pub const D3D11_DEFAULT_STENCIL_WRITE_MASK = 0xff;
pub const D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = 0;
pub const D3D11_DEFAULT_VIEWPORT_HEIGHT = 0;
pub const D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = 0.0;
pub const D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = 0.0;
pub const D3D11_DEFAULT_VIEWPORT_TOPLEFTX = 0;
pub const D3D11_DEFAULT_VIEWPORT_TOPLEFTY = 0;
pub const D3D11_DEFAULT_VIEWPORT_WIDTH = 0;
pub const D3D11_DEPTH_STENCIL_DESC = extern struct {
    DepthEnable: WINBOOL,
    DepthWriteMask: D3D11_DEPTH_WRITE_MASK,
    DepthFunc: D3D11_COMPARISON_FUNC,
    StencilEnable: WINBOOL,
    StencilReadMask: u8,
    StencilWriteMask: u8,
    FrontFace: D3D11_DEPTH_STENCILOP_DESC,
    BackFace: D3D11_DEPTH_STENCILOP_DESC,
};
pub const D3D11_DEPTH_STENCIL_VIEW_DESC = extern struct {
    Format: dxgi.DXGI_FORMAT,
    ViewDimension: D3D11_DSV_DIMENSION,
    Flags: u32,
    unnamed: extern union {
        Texture1D: D3D11_TEX1D_DSV,
        Texture1DArray: D3D11_TEX1D_ARRAY_DSV,
        Texture2D: D3D11_TEX2D_DSV,
        Texture2DArray: D3D11_TEX2D_ARRAY_DSV,
        Texture2DMS: D3D11_TEX2DMS_DSV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV,
    },
};
pub const D3D11_DEPTH_STENCILOP_DESC = extern struct {
    StencilFailOp: D3D11_STENCIL_OP,
    StencilDepthFailOp: D3D11_STENCIL_OP,
    StencilPassOp: D3D11_STENCIL_OP,
    StencilFunc: D3D11_COMPARISON_FUNC,
};
pub const D3D11_DEPTH_WRITE_MASK = enum(u32) {
    D3D11_DEPTH_WRITE_MASK_ZERO = 0,
    D3D11_DEPTH_WRITE_MASK_ALL = 1,
};
pub const D3D11_DEVICE_CONTEXT_TYPE = enum(u32) {
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
    D3D11_DEVICE_CONTEXT_DEFERRED = 1,
};
pub const D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS = extern struct {
    IndexCountPerInstance: u32,
    InstanceCount: u32,
    StartIndexLocation: u32,
    BaseVertexLocation: i32,
    StartInstanceLocation: u32,
};
pub const D3D11_DRAW_INSTANCED_INDIRECT_ARGS = extern struct {
    VertexCountPerInstance: u32,
    InstanceCount: u32,
    StartVertexLocation: u32,
    StartInstanceLocation: u32,
};
pub const D3D11_DSV_DIMENSION = enum(u32) {
    D3D11_DSV_DIMENSION_UNKNOWN = 0,
    D3D11_DSV_DIMENSION_TEXTURE1D = 1,
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D11_DSV_DIMENSION_TEXTURE2D = 3,
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
};
pub const D3D11_DSV_FLAG = enum(u32) {
    D3D11_DSV_READ_ONLY_DEPTH = 0x1,
    D3D11_DSV_READ_ONLY_STENCIL = 0x2,
};
pub const D3D11_ENCRYPTED_BLOCK_INFO = extern struct {
    NumEncryptedBytesAtBeginning: u32,
    NumBytesInSkipPattern: u32,
    NumBytesInEncryptPattern: u32,
};
pub const D3D11_FEATURE = enum(u32) {
    D3D11_FEATURE_THREADING = 0,
    D3D11_FEATURE_DOUBLES = 1,
    D3D11_FEATURE_FORMAT_SUPPORT = 2,
    D3D11_FEATURE_FORMAT_SUPPORT2 = 3,
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4,
    D3D11_FEATURE_D3D11_OPTIONS = 5,
    D3D11_FEATURE_ARCHITECTURE_INFO = 6,
    D3D11_FEATURE_D3D9_OPTIONS = 7,
    D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8,
    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9,
    D3D11_FEATURE_D3D11_OPTIONS1 = 10,
    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11,
    D3D11_FEATURE_MARKER_SUPPORT = 12,
    D3D11_FEATURE_D3D9_OPTIONS1 = 13,
    D3D11_FEATURE_D3D11_OPTIONS2 = 14,
    D3D11_FEATURE_D3D11_OPTIONS3 = 15,
    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16,
    D3D11_FEATURE_D3D11_OPTIONS4 = 17,
    D3D11_FEATURE_SHADER_CACHE = 18,
    D3D11_FEATURE_D3D11_OPTIONS5 = 19,
};
pub const D3D11_FEATURE_DATA_ARCHITECTURE_INFO = extern struct {
    TileBasedDeferredRenderer: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = extern struct {
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D11_OPTIONS = extern struct {
    OutputMergerLogicOp: WINBOOL,
    UAVOnlyRenderingForcedSampleCount: WINBOOL,
    DiscardAPIsSeenByDriver: WINBOOL,
    FlagsForUpdateAndCopySeenByDriver: WINBOOL,
    ClearView: WINBOOL,
    CopyWithOverlap: WINBOOL,
    ConstantBufferPartialUpdate: WINBOOL,
    ConstantBufferOffsetting: WINBOOL,
    MapNoOverwriteOnDynamicConstantBuffer: WINBOOL,
    MapNoOverwriteOnDynamicBufferSRV: WINBOOL,
    MultisampleRTVWithForcedSampleCountOne: WINBOOL,
    SAD4ShaderInstructions: WINBOOL,
    ExtendedDoublesShaderInstructions: WINBOOL,
    ExtendedResourceSharing: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D11_OPTIONS1 = extern struct {
    TiledResourcesTier: D3D11_TILED_RESOURCES_TIER,
    MinMaxFiltering: WINBOOL,
    ClearViewAlsoSupportsDepthOnlyFormats: WINBOOL,
    MapOnDefaultBuffers: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D11_OPTIONS2 = extern struct {
    PSSpecifiedStencilRefSupported: WINBOOL,
    TypedUAVLoadAdditionalFormats: WINBOOL,
    ROVsSupported: WINBOOL,
    ConservativeRasterizationTier: D3D11_CONSERVATIVE_RASTERIZATION_TIER,
    TiledResourcesTier: D3D11_TILED_RESOURCES_TIER,
    MapOnDefaultTextures: WINBOOL,
    StandardSwizzle: WINBOOL,
    UnifiedMemoryArchitecture: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D11_OPTIONS3 = extern struct {
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizer: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D11_OPTIONS5 = extern struct {
    SharedResourceTier: D3D11_SHARED_RESOURCE_TIER,
};
pub const D3D11_FEATURE_DATA_D3D9_OPTIONS = extern struct {
    FullNonPow2TextureSupport: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D9_OPTIONS1 = extern struct {
    FullNonPow2TextureSupported: WINBOOL,
    DepthAsTextureWithLessEqualComparisonFilterSupported: WINBOOL,
    SimpleInstancingSupported: WINBOOL,
    TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT = extern struct {
    SupportsDepthAsTextureWithLessEqualComparisonFilter: WINBOOL,
};
pub const D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT = extern struct {
    SimpleInstancingSupported: WINBOOL,
};
pub const D3D11_FEATURE_DATA_DOUBLES = extern struct {
    DoublePrecisionFloatShaderOps: WINBOOL,
};
pub const D3D11_FEATURE_DATA_FORMAT_SUPPORT = extern struct {
    InFormat: dxgi.DXGI_FORMAT,
    OutFormatSupport: u32,
};
pub const D3D11_FEATURE_DATA_FORMAT_SUPPORT2 = extern struct {
    InFormat: dxgi.DXGI_FORMAT,
    OutFormatSupport2: u32,
};
pub const D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = extern struct {
    MaxGPUVirtualAddressBitsPerResource: u32,
    MaxGPUVirtualAddressBitsPerProcess: u32,
};
pub const D3D11_FEATURE_DATA_MARKER_SUPPORT = extern struct {
    Profile: WINBOOL,
};
pub const D3D11_FEATURE_DATA_SHADER_CACHE = extern struct {
    SupportFlags: u32,
};
pub const D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT = extern struct {
    PixelShaderMinPrecision: u32,
    AllOtherShaderStagesMinPrecision: u32,
};
pub const D3D11_FEATURE_DATA_THREADING = extern struct {
    DriverConcurrentCreates: WINBOOL,
    DriverCommandLists: WINBOOL,
};
pub const D3D11_FILL_MODE = enum(u32) {
    D3D11_FILL_WIREFRAME = 2,
    D3D11_FILL_SOLID = 3,
};
pub const D3D11_FILTER = enum(u32) {
    D3D11_FILTER_MIN_MAG_MIP_POINT = 0x0,
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
    D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
    D3D11_FILTER_ANISOTROPIC = 0x55,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
    D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
    D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
    D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
    D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x155,
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
    D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
    D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
    D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5,
};
pub const D3D11_FILTER_TYPE = enum(u32) {
    D3D11_FILTER_TYPE_POINT = 0,
    D3D11_FILTER_TYPE_LINEAR = 1,
};
pub const D3D11_FILTER_TYPE_MASK = 0x3;
pub const D3D11_FLOAT32_MAX = 3.402823466e+38;
pub const D3D11_FORMAT_SUPPORT = enum(u32) {
    D3D11_FORMAT_SUPPORT_BUFFER = 0x1,
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 0x2,
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 0x4,
    D3D11_FORMAT_SUPPORT_SO_BUFFER = 0x8,
    D3D11_FORMAT_SUPPORT_TEXTURE1D = 0x10,
    D3D11_FORMAT_SUPPORT_TEXTURE2D = 0x20,
    D3D11_FORMAT_SUPPORT_TEXTURE3D = 0x40,
    D3D11_FORMAT_SUPPORT_TEXTURECUBE = 0x80,
    D3D11_FORMAT_SUPPORT_SHADER_LOAD = 0x100,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 0x200,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 0x400,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 0x800,
    D3D11_FORMAT_SUPPORT_MIP = 0x1000,
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 0x2000,
    D3D11_FORMAT_SUPPORT_RENDER_TARGET = 0x4000,
    D3D11_FORMAT_SUPPORT_BLENDABLE = 0x8000,
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 0x10000,
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 0x20000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 0x40000,
    D3D11_FORMAT_SUPPORT_DISPLAY = 0x80000,
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 0x100000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 0x200000,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 0x400000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER = 0x800000,
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 0x1000000,
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 0x4000000,
    D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 0x8000000,
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 0x20000000,
    D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 0x40000000,
};
pub const D3D11_FORMAT_SUPPORT2 = enum(u32) {
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
    D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
    D3D11_FORMAT_SUPPORT2_TILED = 0x200,
    D3D11_FORMAT_SUPPORT2_SHAREABLE = 0x400,
    D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000,
};
pub const D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = 32;
pub const D3D11_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = 1024;
pub const D3D11_INFO_QUEUE_FILTER = extern struct {
    AllowList: D3D11_INFO_QUEUE_FILTER_DESC,
    DenyList: D3D11_INFO_QUEUE_FILTER_DESC,
};
pub const D3D11_INFO_QUEUE_FILTER_DESC = extern struct {
    NumCategories: u32,
    pCategoryList: *D3D11_MESSAGE_CATEGORY,
    NumSeverities: u32,
    pSeverityList: *D3D11_MESSAGE_SEVERITY,
    NumIDs: u32,
    pIDList: *D3D11_MESSAGE_ID,
};
pub const D3D11_INPUT_CLASSIFICATION = enum(u32) {
    D3D11_INPUT_PER_VERTEX_DATA = 0,
    D3D11_INPUT_PER_INSTANCE_DATA = 1,
};
pub const D3D11_INPUT_ELEMENT_DESC = extern struct {
    SemanticName: [*:0]const u8,
    SemanticIndex: u32,
    Format: dxgi.DXGI_FORMAT,
    InputSlot: u32,
    AlignedByteOffset: u32,
    InputSlotClass: D3D11_INPUT_CLASSIFICATION,
    InstanceDataStepRate: u32,
};
pub const D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = 0xffffffff;
pub const D3D11_KEEP_UNORDERED_ACCESS_VIEWS = 0xffffffff;
pub const D3D11_MAG_FILTER_SHIFT = 2;
pub const D3D11_MAP = enum(u32) {
    D3D11_MAP_READ = 1,
    D3D11_MAP_WRITE = 2,
    D3D11_MAP_READ_WRITE = 3,
    D3D11_MAP_WRITE_DISCARD = 4,
    D3D11_MAP_WRITE_NO_OVERWRITE = 5,
};
pub const D3D11_MAP_FLAG = enum(u32) {
    D3D11_MAP_FLAG_DO_NOT_WAIT = 0x100000,
};
pub const D3D11_MAPPED_SUBRESOURCE = extern struct {
    pData: ?*anyopaque,
    RowPitch: u32,
    DepthPitch: u32,
};
pub const D3D11_MAX_MAXANISOTROPY = 16;
pub const D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = 32;
pub const D3D11_MESSAGE = extern struct {
    Category: D3D11_MESSAGE_CATEGORY,
    Severity: D3D11_MESSAGE_SEVERITY,
    ID: D3D11_MESSAGE_ID,
    pDescription: [*:0]const u8,
    DescriptionByteLength: SIZE_T,
};
pub const D3D11_MESSAGE_CATEGORY = enum(u32) {
    D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
    D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = 1,
    D3D11_MESSAGE_CATEGORY_INITIALIZATION = 2,
    D3D11_MESSAGE_CATEGORY_CLEANUP = 3,
    D3D11_MESSAGE_CATEGORY_COMPILATION = 4,
    D3D11_MESSAGE_CATEGORY_STATE_CREATION = 5,
    D3D11_MESSAGE_CATEGORY_STATE_SETTING = 6,
    D3D11_MESSAGE_CATEGORY_STATE_GETTING = 7,
    D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = 8,
    D3D11_MESSAGE_CATEGORY_EXECUTION = 9,
    D3D11_MESSAGE_CATEGORY_SHADER = 10,
};
pub const D3D11_MESSAGE_ID = enum(u32) {
    D3D11_MESSAGE_ID_UNKNOWN = 0,
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = 1,
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = 2,
    D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = 3,
    D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4,
    D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = 5,
    D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6,
    D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = 7,
    D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = 9,
    D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = 10,
    D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = 11,
    D3D11_MESSAGE_ID_CORRUPTED_THIS = 12,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = 13,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = 14,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = 15,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = 16,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = 17,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = 18,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = 19,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = 20,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = 21,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = 22,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = 23,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = 24,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = 25,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = 26,
    D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = 27,
    D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = 28,
    D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 29,
    D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30,
    D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31,
    D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32,
    D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = 33,
    D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34,
    D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35,
    D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36,
    D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = 37,
    D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38,
    D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39,
    D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40,
    D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = 41,
    D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = 42,
    D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43,
    D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44,
    D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45,
    D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = 46,
    D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47,
    D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48,
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49,
    D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = 50,
    D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 51,
    D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 52,
    D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = 53,
    D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = 54,
    D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 55,
    D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 56,
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = 57,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = 58,
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = 59,
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60,
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61,
    D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = 64,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = 65,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = 66,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = 67,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = 68,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = 69,
    D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = 70,
    D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = 71,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72,
    D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = 73,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = 76,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = 82,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = 83,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = 84,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = 85,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = 86,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = 87,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = 89,
    D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = 90,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = 93,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = 99,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = 100,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = 101,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = 102,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = 103,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = 104,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = 106,
    D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = 107,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = 110,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = 116,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = 117,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = 118,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = 119,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = 120,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = 121,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = 123,
    D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = 124,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 126,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 135,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 136,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 150,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 152,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 154,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 162,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 163,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = 164,
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 165,
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166,
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 168,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190,
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 191,
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192,
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 193,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 194,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 195,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = 199,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = 211,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 212,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 213,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 214,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = 219,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = 220,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = 221,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = 222,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = 223,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = 224,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = 228,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = 229,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = 230,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = 231,
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = 232,
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233,
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234,
    D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = 235,
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236,
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237,
    D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = 238,
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239,
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240,
    D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = 241,
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242,
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243,
    D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244,
    D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245,
    D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246,
    D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247,
    D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248,
    D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249,
    D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250,
    D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251,
    D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252,
    D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = 253,
    D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254,
    D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255,
    D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256,
    D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257,
    D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258,
    D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259,
    D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260,
    D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = 261,
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262,
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 263,
    D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264,
    D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265,
    D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266,
    D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267,
    D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268,
    D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269,
    D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270,
    D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271,
    D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272,
    D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273,
    D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274,
    D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275,
    D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276,
    D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = 281,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283,
    D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = 284,
    D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = 285,
    D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = 286,
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287,
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288,
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289,
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290,
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291,
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292,
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293,
    D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294,
    D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = 295,
    D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = 296,
    D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = 297,
    D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = 298,
    D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = 299,
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = 300,
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301,
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = 302,
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = 303,
    D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304,
    D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305,
    D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = 306,
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = 307,
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308,
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = 309,
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = 310,
    D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311,
    D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312,
    D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = 313,
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = 314,
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315,
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = 316,
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = 317,
    D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318,
    D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319,
    D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = 320,
    D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321,
    D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322,
    D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323,
    D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = 324,
    D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325,
    D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326,
    D3D11_MESSAGE_ID_REF_THREADING_MODE = 327,
    D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = 328,
    D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = 329,
    D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = 330,
    D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331,
    D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = 332,
    D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = 333,
    D3D11_MESSAGE_ID_REF_INFO = 334,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335,
    D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336,
    D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337,
    D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338,
    D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339,
    D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = 345,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349,
    D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350,
    D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351,
    D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = 352,
    D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359,
    D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361,
    D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = 362,
    D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363,
    D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368,
    D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373,
    D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374,
    D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375,
    D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376,
    D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377,
    D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 378,
    D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379,
    D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380,
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381,
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382,
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383,
    D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = 384,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386,
    D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387,
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = 388,
    D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389,
    D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = 390,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 391,
    D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = 392,
    D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = 393,
    D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = 394,
    D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = 395,
    D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = 396,
    D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397,
    D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398,
    D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = 399,
    D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = 400,
    D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = 401,
    D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = 402,
    D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403,
    D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = 404,
    D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = 405,
    D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = 406,
    D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = 407,
    D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408,
    D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = 409,
    D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410,
    D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = 411,
    D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = 412,
    D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = 413,
    D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = 414,
    D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417,
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418,
    D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421,
    D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 422,
    D3D11_MESSAGE_ID_LIVE_BUFFER = 423,
    D3D11_MESSAGE_ID_LIVE_TEXTURE1D = 424,
    D3D11_MESSAGE_ID_LIVE_TEXTURE2D = 425,
    D3D11_MESSAGE_ID_LIVE_TEXTURE3D = 426,
    D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = 427,
    D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = 428,
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = 429,
    D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = 430,
    D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = 431,
    D3D11_MESSAGE_ID_LIVE_PIXELSHADER = 432,
    D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = 433,
    D3D11_MESSAGE_ID_LIVE_SAMPLER = 434,
    D3D11_MESSAGE_ID_LIVE_BLENDSTATE = 435,
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = 436,
    D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = 437,
    D3D11_MESSAGE_ID_LIVE_QUERY = 438,
    D3D11_MESSAGE_ID_LIVE_PREDICATE = 439,
    D3D11_MESSAGE_ID_LIVE_COUNTER = 440,
    D3D11_MESSAGE_ID_LIVE_DEVICE = 441,
    D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = 442,
    D3D11_MESSAGE_ID_D3D10_MESSAGES_END = 443,
    D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = 0x100000,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 0x100001,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 0x100002,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 0x100003,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 0x100004,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 0x100005,
    D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = 0x100006,
    D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100007,
    D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = 0x100008,
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = 0x100009,
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = 0x10000a,
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = 0x10000b,
    D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 0x10000c,
    D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 0x10000d,
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 0x10000e,
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 0x10000f,
    D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 0x100010,
    D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 0x100011,
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 0x100012,
    D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 0x100013,
    D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 0x100014,
    D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = 0x100015,
    D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 0x100016,
    D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 0x100017,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 0x100018,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 0x100019,
    D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 0x10001a,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 0x10001b,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 0x10001c,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 0x10001d,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 0x10001e,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 0x10001f,
    D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 0x100020,
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 0x100021,
    D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 0x100022,
    D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 0x100023,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 0x100024,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 0x100025,
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = 0x100026,
    D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 0x100027,
    D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 0x100028,
    D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 0x100029,
    D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = 0x10002a,
    D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = 0x10002b,
    D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = 0x10002c,
    D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = 0x10002d,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 0x10002e,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = 0x10002f,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 0x100030,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = 0x100031,
    D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = 0x100032,
    D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 0x100033,
    D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = 0x100034,
    D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 0x100035,
    D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 0x100036,
    D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 0x100037,
    D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 0x100038,
    D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 0x100039,
    D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = 0x10003a,
    D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 0x10003b,
    D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = 0x10003c,
    D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 0x10003d,
    D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = 0x10003e,
    D3D11_MESSAGE_ID_D3D11_MESSAGES_START = 0x200000,
    D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 0x200001,
    D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 0x200002,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 0x200003,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 0x200004,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 0x200005,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 0x200006,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 0x200007,
    D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 0x200008,
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 0x200009,
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = 0x20000a,
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 0x20000b,
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 0x20000c,
    D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 0x20000d,
    D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 0x20000e,
    D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 0x20000f,
    D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = 0x200010,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 0x200011,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 0x200012,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 0x200013,
    D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 0x200014,
    D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = 0x200015,
    D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 0x200016,
    D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200017,
    D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200018,
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = 0x200019,
    D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 0x20001a,
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 0x20001b,
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 0x20001c,
    D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 0x20001d,
    D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20001e,
    D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20001f,
    D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200020,
    D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 0x200021,
    D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200022,
    D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200023,
    D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 0x200024,
    D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = 0x200025,
    D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 0x200026,
    D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x200027,
    D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x200028,
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = 0x200029,
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 0x20002a,
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 0x20002b,
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 0x20002c,
    D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 0x20002d,
    D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 0x20002e,
    D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x20002f,
    D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200030,
    D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 0x200031,
    D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 0x200032,
    D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x200033,
    D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 0x200034,
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = 0x200035,
    D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 0x200036,
    D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 0x200037,
    D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 0x200038,
    D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 0x200039,
    D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = 0x20003a,
    D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = 0x20003b,
    D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = 0x20003c,
    D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = 0x20003d,
    D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = 0x20003e,
    D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = 0x20003f,
    D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 0x200040,
    D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = 0x200041,
    D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 0x200042,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 0x200043,
    D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 0x200044,
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 0x200045,
    D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 0x200046,
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 0x200047,
    D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 0x200048,
    D3D11_MESSAGE_ID_CREATE_CONTEXT = 0x200049,
    D3D11_MESSAGE_ID_LIVE_CONTEXT = 0x20004a,
    D3D11_MESSAGE_ID_DESTROY_CONTEXT = 0x20004b,
    D3D11_MESSAGE_ID_CREATE_BUFFER = 0x20004c,
    D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = 0x20004d,
    D3D11_MESSAGE_ID_DESTROY_BUFFER = 0x20004e,
    D3D11_MESSAGE_ID_CREATE_TEXTURE1D = 0x20004f,
    D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = 0x200050,
    D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = 0x200051,
    D3D11_MESSAGE_ID_CREATE_TEXTURE2D = 0x200052,
    D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = 0x200053,
    D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = 0x200054,
    D3D11_MESSAGE_ID_CREATE_TEXTURE3D = 0x200055,
    D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = 0x200056,
    D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = 0x200057,
    D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = 0x200058,
    D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = 0x200059,
    D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = 0x20005a,
    D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = 0x20005b,
    D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = 0x20005c,
    D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = 0x20005d,
    D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = 0x20005e,
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = 0x20005f,
    D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = 0x200060,
    D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = 0x200061,
    D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = 0x200062,
    D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = 0x200063,
    D3D11_MESSAGE_ID_CREATE_HULLSHADER = 0x200064,
    D3D11_MESSAGE_ID_LIVE_HULLSHADER = 0x200065,
    D3D11_MESSAGE_ID_DESTROY_HULLSHADER = 0x200066,
    D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = 0x200067,
    D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = 0x200068,
    D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = 0x200069,
    D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = 0x20006a,
    D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = 0x20006b,
    D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = 0x20006c,
    D3D11_MESSAGE_ID_CREATE_PIXELSHADER = 0x20006d,
    D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = 0x20006e,
    D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = 0x20006f,
    D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = 0x200070,
    D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = 0x200071,
    D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = 0x200072,
    D3D11_MESSAGE_ID_CREATE_SAMPLER = 0x200073,
    D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = 0x200074,
    D3D11_MESSAGE_ID_DESTROY_SAMPLER = 0x200075,
    D3D11_MESSAGE_ID_CREATE_BLENDSTATE = 0x200076,
    D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = 0x200077,
    D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = 0x200078,
    D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = 0x200079,
    D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = 0x20007a,
    D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = 0x20007b,
    D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = 0x20007c,
    D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = 0x20007d,
    D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = 0x20007e,
    D3D11_MESSAGE_ID_CREATE_QUERY = 0x20007f,
    D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = 0x200080,
    D3D11_MESSAGE_ID_DESTROY_QUERY = 0x200081,
    D3D11_MESSAGE_ID_CREATE_PREDICATE = 0x200082,
    D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = 0x200083,
    D3D11_MESSAGE_ID_DESTROY_PREDICATE = 0x200084,
    D3D11_MESSAGE_ID_CREATE_COUNTER = 0x200085,
    D3D11_MESSAGE_ID_DESTROY_COUNTER = 0x200086,
    D3D11_MESSAGE_ID_CREATE_COMMANDLIST = 0x200087,
    D3D11_MESSAGE_ID_LIVE_COMMANDLIST = 0x200088,
    D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = 0x200089,
    D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = 0x20008a,
    D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = 0x20008b,
    D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = 0x20008c,
    D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = 0x20008d,
    D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = 0x20008e,
    D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = 0x20008f,
    D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = 0x200090,
    D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = 0x200091,
    D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = 0x200092,
    D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = 0x200093,
    D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = 0x200094,
    D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = 0x200095,
    D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = 0x200096,
    D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = 0x200097,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 0x200098,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 0x200099,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = 0x20009a,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 0x20009b,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 0x20009c,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 0x20009d,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 0x20009e,
    D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 0x20009f,
    D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 0x2000a0,
    D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 0x2000a1,
    D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 0x2000a2,
    D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 0x2000a3,
    D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = 0x2000a4,
    D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 0x2000a5,
    D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 0x2000a6,
    D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 0x2000a7,
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = 0x2000a8,
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 0x2000a9,
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 0x2000aa,
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = 0x2000ab,
    D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 0x2000ac,
    D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 0x2000ad,
    D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = 0x2000ae,
    D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000af,
    D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 0x2000b0,
    D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 0x2000b1,
    D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 0x2000b2,
    D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 0x2000b3,
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b4,
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b5,
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b6,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b7,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b8,
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000b9,
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 0x2000ba,
    D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 0x2000bb,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 0x2000bc,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 0x2000bd,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 0x2000be,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 0x2000bf,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 0x2000c0,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 0x2000c1,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 0x2000c2,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 0x2000c3,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 0x2000c4,
    D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000c5,
    D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 0x2000c6,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 0x2000c7,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 0x2000c8,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 0x2000c9,
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 0x2000ca,
    D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 0x2000cb,
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000cc,
    D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 0x2000cd,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 0x2000ce,
    D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 0x2000cf,
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 0x2000d0,
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 0x2000d1,
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 0x2000d2,
    D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000d3,
    D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000d4,
    D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 0x2000d5,
    D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 0x2000d6,
    D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 0x2000d7,
    D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 0x2000d8,
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 0x2000d9,
    D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 0x2000da,
    D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 0x2000db,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 0x2000dc,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 0x2000dd,
    D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 0x2000de,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 0x2000df,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 0x2000e0,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 0x2000e1,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000e2,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 0x2000e3,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 0x2000e4,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 0x2000e5,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 0x2000e6,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 0x2000e7,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 0x2000e8,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 0x2000e9,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 0x2000ea,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 0x2000eb,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 0x2000ec,
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 0x2000ed,
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 0x2000ee,
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 0x2000ef,
    D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 0x2000f0,
    D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 0x2000f1,
    D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 0x2000f2,
    D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = 0x2000f3,
    D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 0x2000f4,
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = 0x2000f5,
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = 0x2000f6,
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 0x2000f7,
    D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 0x2000f8,
    D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 0x2000f9,
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 0x2000fa,
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x2000fb,
    D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x2000fc,
    D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 0x2000fd,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 0x2000fe,
    D3D11_MESSAGE_ID_REF_WARNING = 0x2000ff,
    D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 0x200100,
    D3D11_MESSAGE_ID_SHADER_ABORT = 0x200101,
    D3D11_MESSAGE_ID_SHADER_MESSAGE = 0x200102,
    D3D11_MESSAGE_ID_SHADER_ERROR = 0x200103,
    D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = 0x200104,
    D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x200105,
    D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x200106,
    D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = 0x200107,
    D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = 0x200108,
    D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = 0x200109,
    D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = 0x20010a,
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = 0x20010b,
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 0x20010c,
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = 0x20010d,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 0x20010e,
    D3D11_MESSAGE_ID_D3D11_MESSAGES_END = 0x20010f,
    D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = 0x300000,
    D3D11_MESSAGE_ID_CREATE_VIDEODECODER = 0x300001,
    D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = 0x300002,
    D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 0x300003,
    D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = 0x300004,
    D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = 0x300005,
    D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = 0x300006,
    D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = 0x300007,
    D3D11_MESSAGE_ID_LIVE_VIDEODECODER = 0x300008,
    D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = 0x300009,
    D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 0x30000a,
    D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = 0x30000b,
    D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = 0x30000c,
    D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = 0x30000d,
    D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = 0x30000e,
    D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = 0x30000f,
    D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = 0x300010,
    D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 0x300011,
    D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = 0x300012,
    D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = 0x300013,
    D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = 0x300014,
    D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = 0x300015,
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 0x300016,
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 0x300017,
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 0x300018,
    D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 0x300019,
    D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = 0x30001a,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = 0x30001b,
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = 0x30001c,
    D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 0x30001d,
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 0x30001e,
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = 0x30001f,
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = 0x300020,
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 0x300021,
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 0x300022,
    D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 0x300023,
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 0x300024,
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = 0x300025,
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = 0x300026,
    D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 0x300027,
    D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = 0x300028,
    D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 0x300029,
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 0x30002a,
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 0x30002b,
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = 0x30002c,
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = 0x30002d,
    D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 0x30002e,
    D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = 0x30002f,
    D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = 0x300030,
    D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = 0x300031,
    D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = 0x300032,
    D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = 0x300033,
    D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = 0x300034,
    D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = 0x300035,
    D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = 0x300036,
    D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = 0x300037,
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = 0x300038,
    D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = 0x300039,
    D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = 0x30003a,
    D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = 0x30003b,
    D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = 0x30003c,
    D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = 0x30003d,
    D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = 0x30003e,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 0x30003f,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 0x300040,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 0x300041,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 0x300042,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 0x300043,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 0x300044,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 0x300045,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 0x300046,
    D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 0x300047,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = 0x300048,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 0x300049,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 0x30004a,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 0x30004b,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 0x30004c,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 0x30004d,
    D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 0x30004e,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 0x30004f,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = 0x300050,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 0x300051,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 0x300052,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 0x300053,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 0x300054,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 0x300055,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 0x300056,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 0x300057,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 0x300058,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 0x300059,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 0x30005a,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 0x30005b,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 0x30005c,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 0x30005d,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 0x30005e,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 0x30005f,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 0x300060,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 0x300061,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 0x300062,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 0x300063,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 0x300064,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 0x300065,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 0x300066,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 0x300067,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 0x300068,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 0x300069,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 0x30006a,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 0x30006b,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 0x30006c,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 0x30006d,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 0x30006e,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 0x30006f,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 0x300070,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 0x300071,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 0x300072,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 0x300073,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 0x300074,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 0x300075,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 0x300076,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 0x300077,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 0x300078,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 0x300079,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 0x30007a,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 0x30007b,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 0x30007c,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 0x30007d,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 0x30007e,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 0x30007f,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 0x300080,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 0x300081,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 0x300082,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 0x300083,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 0x300084,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 0x300085,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 0x300086,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 0x300087,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 0x300088,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 0x300089,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 0x30008a,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 0x30008b,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 0x30008c,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 0x30008d,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 0x30008e,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 0x30008f,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 0x300090,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 0x300091,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 0x300092,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 0x300093,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 0x300094,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 0x300095,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 0x300096,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 0x300097,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 0x300098,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 0x300099,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 0x30009a,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 0x30009b,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 0x30009c,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 0x30009d,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 0x30009e,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 0x30009f,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 0x3000a0,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = 0x3000a1,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 0x3000a2,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = 0x3000a3,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = 0x3000a4,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 0x3000a5,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 0x3000a6,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = 0x3000a7,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = 0x3000a8,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 0x3000a9,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 0x3000aa,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = 0x3000ab,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = 0x3000ac,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 0x3000ad,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = 0x3000ae,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 0x3000af,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 0x3000b0,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = 0x3000b1,
    D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = 0x3000b2,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 0x3000b3,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 0x3000b4,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 0x3000b5,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 0x3000b6,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 0x3000b7,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 0x3000b8,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 0x3000b9,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 0x3000ba,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 0x3000bb,
    D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 0x3000bc,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 0x3000bd,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 0x3000be,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 0x3000bf,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 0x3000c0,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 0x3000c1,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 0x3000c2,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 0x3000c3,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 0x3000c4,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 0x3000c5,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 0x3000c6,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 0x3000c7,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 0x3000c8,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 0x3000c9,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 0x3000ca,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 0x3000cb,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 0x3000cc,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 0x3000cd,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 0x3000ce,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 0x3000cf,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 0x3000d0,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 0x3000d1,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 0x3000d2,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 0x3000d3,
    D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 0x3000d4,
    D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 0x3000d5,
    D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 0x3000d6,
    D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 0x3000d7,
    D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 0x3000d8,
    D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = 0x3000d9,
    D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = 0x3000da,
    D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = 0x3000db,
    D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = 0x3000dc,
    D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = 0x3000dd,
    D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = 0x3000de,
    D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = 0x3000df,
    D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 0x3000e0,
    D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = 0x3000e1,
    D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = 0x3000e2,
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 0x3000e3,
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 0x3000e4,
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 0x3000e5,
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = 0x3000e6,
    D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 0x3000e7,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = 0x3000e8,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = 0x3000e9,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = 0x3000ea,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = 0x3000eb,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = 0x3000ec,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = 0x3000ed,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = 0x3000ee,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = 0x3000ef,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = 0x3000f0,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = 0x3000f1,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = 0x3000f2,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = 0x3000f3,
    D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 0x3000f4,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = 0x3000f5,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = 0x3000f6,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = 0x3000f7,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = 0x3000f8,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = 0x3000f9,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = 0x3000fa,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = 0x3000fb,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = 0x3000fc,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 0x3000fd,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = 0x3000fe,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = 0x3000ff,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = 0x300100,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = 0x300101,
    D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = 0x300102,
    D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = 0x300103,
    D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = 0x300104,
    D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = 0x300105,
    D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = 0x300106,
    D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = 0x300107,
    D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = 0x300108,
    D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 0x300109,
    D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 0x30010a,
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 0x30010b,
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 0x30010c,
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 0x30010d,
    D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 0x30010e,
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 0x30010f,
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 0x300110,
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 0x300111,
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 0x300112,
    D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 0x300113,
    D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 0x300114,
    D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 0x300115,
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 0x300116,
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 0x300117,
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 0x300118,
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 0x300119,
    D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 0x30011a,
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 0x30011b,
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 0x30011c,
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 0x30011d,
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 0x30011e,
    D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 0x30011f,
    D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300120,
    D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300121,
    D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300122,
    D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300123,
    D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300124,
    D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 0x300125,
    D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = 0x300126,
    D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 0x300127,
    D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = 0x300128,
    D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 0x300129,
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = 0x30012a,
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 0x30012b,
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 0x30012c,
    D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 0x30012d,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 0x30012e,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 0x30012f,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = 0x300130,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 0x300131,
    D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 0x300132,
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = 0x300133,
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300134,
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300135,
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300136,
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300137,
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300138,
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300139,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x30013a,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x30013b,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 0x30013c,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 0x30013d,
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x30013e,
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x30013f,
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 0x300140,
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = 0x300141,
    D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = 0x300142,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 0x300143,
    D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 0x300144,
    D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 0x300145,
    D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 0x300146,
    D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 0x300147,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 0x300148,
    D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 0x300149,
    D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 0x30014a,
    D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 0x30014b,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 0x30014c,
    D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 0x30014d,
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = 0x30014e,
    D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 0x30014f,
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 0x300150,
    D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = 0x300151,
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = 0x300152,
    D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 0x300153,
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = 0x300154,
    D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 0x300155,
    D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = 0x300156,
    D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = 0x300157,
    D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = 0x300158,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 0x300159,
    D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 0x30015a,
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 0x30015b,
    D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 0x30015c,
    D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = 0x30015d,
    D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 0x30015e,
    D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 0x30015f,
    D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 0x300160,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 0x300161,
    D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 0x300162,
    D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 0x300163,
    D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = 0x300164,
};
pub const D3D11_MESSAGE_SEVERITY = enum(u32) {
    D3D11_MESSAGE_SEVERITY_CORRUPTION = 0,
    D3D11_MESSAGE_SEVERITY_ERROR = 1,
    D3D11_MESSAGE_SEVERITY_WARNING = 2,
    D3D11_MESSAGE_SEVERITY_INFO = 3,
    D3D11_MESSAGE_SEVERITY_MESSAGE = 4,
};
pub const D3D11_MIN_FILTER_SHIFT = 4;
pub const D3D11_MIP_FILTER_SHIFT = 0;
pub const D3D11_OMAC = extern struct {
    Omac: [16]u8,
};
pub const D3D11_OMAC_SIZE = 16;
pub const D3D11_PRIMITIVE = D3D_PRIMITIVE;
pub const D3D11_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
pub const D3D11_PS_CS_UAV_REGISTER_COMPONENTS = 1;
pub const D3D11_PS_CS_UAV_REGISTER_COUNT = 8;
pub const D3D11_PS_CS_UAV_REGISTER_READ_PORTS = 1;
pub const D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = 1;
pub const D3D11_PS_FRONTFACING_DEFAULT_VALUE = 0xffffffff;
pub const D3D11_PS_FRONTFACING_FALSE_VALUE = 0;
pub const D3D11_PS_FRONTFACING_TRUE_VALUE = 0xffffffff;
pub const D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
pub const D3D11_PS_INPUT_REGISTER_COMPONENTS = 4;
pub const D3D11_PS_INPUT_REGISTER_COUNT = 32;
pub const D3D11_PS_INPUT_REGISTER_READ_PORTS = 1;
pub const D3D11_PS_INPUT_REGISTER_READS_PER_INST = 2;
pub const D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.0;
pub const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = 32;
pub const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = 1;
pub const D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = 1;
pub const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = 32;
pub const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = 1;
pub const D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = 1;
pub const D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = 32;
pub const D3D11_PS_OUTPUT_REGISTER_COMPONENTS = 4;
pub const D3D11_PS_OUTPUT_REGISTER_COUNT = 8;
pub const D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = 0.5;
pub const D3D11_QUERY = enum(u32) {
    D3D11_QUERY_EVENT = 0,
    D3D11_QUERY_OCCLUSION = 1,
    D3D11_QUERY_TIMESTAMP = 2,
    D3D11_QUERY_TIMESTAMP_DISJOINT = 3,
    D3D11_QUERY_PIPELINE_STATISTICS = 4,
    D3D11_QUERY_OCCLUSION_PREDICATE = 5,
    D3D11_QUERY_SO_STATISTICS = 6,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7,
    D3D11_QUERY_SO_STATISTICS_STREAM0 = 8,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9,
    D3D11_QUERY_SO_STATISTICS_STREAM1 = 10,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11,
    D3D11_QUERY_SO_STATISTICS_STREAM2 = 12,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13,
    D3D11_QUERY_SO_STATISTICS_STREAM3 = 14,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15,
};
pub const D3D11_QUERY_DATA_PIPELINE_STATISTICS = extern struct {
    IAVertices: u64,
    IAPrimitives: u64,
    VSInvocations: u64,
    GSInvocations: u64,
    GSPrimitives: u64,
    CInvocations: u64,
    CPrimitives: u64,
    PSInvocations: u64,
    HSInvocations: u64,
    DSInvocations: u64,
    CSInvocations: u64,
};
pub const D3D11_QUERY_DATA_SO_STATISTICS = extern struct {
    NumPrimitivesWritten: u64,
    PrimitivesStorageNeeded: u64,
};
pub const D3D11_QUERY_DATA_TIMESTAMP_DISJOINT = extern struct {
    Frequency: u64,
    Disjoint: WINBOOL,
};
pub const D3D11_QUERY_DESC = extern struct {
    Query: D3D11_QUERY,
    MiscFlags: u32,
};
pub const D3D11_QUERY_MISC_FLAG = enum(u32) {
    D3D11_QUERY_MISC_PREDICATEHINT = 0x1,
};
pub const D3D11_RAISE_FLAG = enum(u32) {
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 0x1,
};
pub const D3D11_RASTERIZER_DESC = extern struct {
    FillMode: D3D11_FILL_MODE,
    CullMode: D3D11_CULL_MODE,
    FrontCounterClockwise: WINBOOL,
    DepthBias: i32,
    DepthBiasClamp: f32,
    SlopeScaledDepthBias: f32,
    DepthClipEnable: WINBOOL,
    ScissorEnable: WINBOOL,
    MultisampleEnable: WINBOOL,
    AntialiasedLineEnable: WINBOOL,
};
pub const D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = 16;
pub const D3D11_RECT = RECT;
pub const D3D11_RENDER_TARGET_BLEND_DESC = extern struct {
    BlendEnable: WINBOOL,
    SrcBlend: D3D11_BLEND,
    DestBlend: D3D11_BLEND,
    BlendOp: D3D11_BLEND_OP,
    SrcBlendAlpha: D3D11_BLEND,
    DestBlendAlpha: D3D11_BLEND,
    BlendOpAlpha: D3D11_BLEND_OP,
    RenderTargetWriteMask: u8,
};
pub const D3D11_RENDER_TARGET_VIEW_DESC = extern struct {
    Format: dxgi.DXGI_FORMAT,
    ViewDimension: D3D11_RTV_DIMENSION,
    unnamed: extern union {
        Buffer: D3D11_BUFFER_RTV,
        Texture1D: D3D11_TEX1D_RTV,
        Texture1DArray: D3D11_TEX1D_ARRAY_RTV,
        Texture2D: D3D11_TEX2D_RTV,
        Texture2DArray: D3D11_TEX2D_ARRAY_RTV,
        Texture2DMS: D3D11_TEX2DMS_RTV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV,
        Texture3D: D3D11_TEX3D_RTV,
    },
};
pub const D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = 4096;
pub const D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = 27;
pub const D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
pub const D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = 4096;
pub const D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = 32;
pub const D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = 32;
pub const D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = 16384;
pub const D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = 1024;
pub const D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = 4096;
pub const D3D11_REQ_MAXANISOTROPY = 16;
pub const D3D11_REQ_MIP_LEVELS = 15;
pub const D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = 2048;
pub const D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = 4096;
pub const D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = 16384;
pub const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = 128;
pub const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = 0.25;
pub const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = 2048;
pub const D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = 20;
pub const D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = 4096;
pub const D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = 2048;
pub const D3D11_REQ_TEXTURE1D_U_DIMENSION = 16384;
pub const D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = 2048;
pub const D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = 16384;
pub const D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 2048;
pub const D3D11_REQ_TEXTURECUBE_DIMENSION = 16384;
pub const D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = 0;
pub const D3D11_RESOURCE_DIMENSION = enum(u32) {
    D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D11_RESOURCE_DIMENSION_BUFFER = 1,
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4,
};
pub const D3D11_RESOURCE_MISC_FLAG = enum(u32) {
    D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
    D3D11_RESOURCE_MISC_SHARED = 0x2,
    D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200,
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800,
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000,
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000,
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000,
    D3D11_RESOURCE_MISC_GUARDED = 0x8000,
    D3D11_RESOURCE_MISC_TILE_POOL = 0x20000,
    D3D11_RESOURCE_MISC_TILED = 0x40000,
    D3D11_RESOURCE_MISC_HW_PROTECTED = 0x80000,
    D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE = 0x100000,
    D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER = 0x200000,
};
pub const D3D11_RLDO_FLAGS = enum(u32) {
    D3D11_RLDO_SUMMARY = 1,
    D3D11_RLDO_DETAIL = 2,
};
pub const D3D11_RTV_DIMENSION = enum(u32) {
    D3D11_RTV_DIMENSION_UNKNOWN = 0,
    D3D11_RTV_DIMENSION_BUFFER = 1,
    D3D11_RTV_DIMENSION_TEXTURE1D = 2,
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_RTV_DIMENSION_TEXTURE2D = 4,
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D11_RTV_DIMENSION_TEXTURE3D = 8,
};
pub const D3D11_SAMPLER_DESC = extern struct {
    Filter: D3D11_FILTER,
    AddressU: D3D11_TEXTURE_ADDRESS_MODE,
    AddressV: D3D11_TEXTURE_ADDRESS_MODE,
    AddressW: D3D11_TEXTURE_ADDRESS_MODE,
    MipLODBias: f32,
    MaxAnisotropy: u32,
    ComparisonFunc: D3D11_COMPARISON_FUNC,
    BorderColor: [4]f32,
    MinLOD: f32,
    MaxLOD: f32,
};
pub const D3D11_SDK_VERSION = 7;
pub const D3D11_SHADER_CACHE_SUPPORT_FLAGS = enum(u32) {
    D3D11_SHADER_CACHE_SUPPORT_NONE = 0x0,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 0x1,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 0x2,
};
pub const D3D11_SHADER_MAJOR_VERSION = 5;
pub const D3D11_SHADER_MAX_INSTANCES = 65535;
pub const D3D11_SHADER_MAX_INTERFACE_CALL_SITES = 4096;
pub const D3D11_SHADER_MAX_INTERFACES = 253;
pub const D3D11_SHADER_MAX_TYPES = 65535;
pub const D3D11_SHADER_MIN_PRECISION_SUPPORT = enum(u32) {
    D3D11_SHADER_MIN_PRECISION_10_BIT = 0x1,
    D3D11_SHADER_MIN_PRECISION_16_BIT = 0x2,
};
pub const D3D11_SHADER_MINOR_VERSION = 0;
pub const D3D11_SHADER_RESOURCE_VIEW_DESC = extern struct {
    Format: dxgi.DXGI_FORMAT,
    ViewDimension: D3D11_SRV_DIMENSION,
    unnamed: extern union {
        Buffer: D3D11_BUFFER_SRV,
        Texture1D: D3D11_TEX1D_SRV,
        Texture1DArray: D3D11_TEX1D_ARRAY_SRV,
        Texture2D: D3D11_TEX2D_SRV,
        Texture2DArray: D3D11_TEX2D_ARRAY_SRV,
        Texture2DMS: D3D11_TEX2DMS_SRV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV,
        Texture3D: D3D11_TEX3D_SRV,
        TextureCube: D3D11_TEXCUBE_SRV,
        TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV,
        BufferEx: D3D11_BUFFEREX_SRV,
    },
};
pub const D3D11_SHARED_RESOURCE_TIER = enum(u32) {
    D3D11_SHARED_RESOURCE_TIER_0 = 0,
    D3D11_SHARED_RESOURCE_TIER_1 = 1,
    D3D11_SHARED_RESOURCE_TIER_2 = 2,
    D3D11_SHARED_RESOURCE_TIER_3 = 3,
};
pub const D3D11_SHIFT_INSTRUCTION_PAD_VALUE = 0;
pub const D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = 5;
pub const D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = 8;
pub const D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = 2048;
pub const D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = 512;
pub const D3D11_SO_BUFFER_SLOT_COUNT = 4;
pub const D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = 0xffffffff;
pub const D3D11_SO_DECLARATION_ENTRY = extern struct {
    Stream: u32,
    SemanticName: [*:0]const u8,
    SemanticIndex: u32,
    StartComponent: u8,
    ComponentCount: u8,
    OutputSlot: u8,
};
pub const D3D11_SO_NO_RASTERIZED_STREAM = 0xffffffff;
pub const D3D11_SO_OUTPUT_COMPONENT_COUNT = 128;
pub const D3D11_SO_STREAM_COUNT = 4;
pub const D3D11_SPEC_DATE_DAY = 16;
pub const D3D11_SPEC_DATE_MONTH = 5;
pub const D3D11_SPEC_DATE_YEAR = 2011;
pub const D3D11_SPEC_VERSION = 1.07;
pub const D3D11_SRGB_GAMMA = 2.2;
pub const D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = 12.92;
pub const D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = 1.055;
pub const D3D11_SRGB_TO_FLOAT_EXPONENT = 2.4;
pub const D3D11_SRGB_TO_FLOAT_OFFSET = 0.055;
pub const D3D11_SRGB_TO_FLOAT_THRESHOLD = 0.04045;
pub const D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = 0.5;
pub const D3D11_SRV_DIMENSION = D3D_SRV_DIMENSION;
pub const D3D11_STANDARD_COMPONENT_BIT_COUNT = 32;
pub const D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = 64;
pub const D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = 4;
pub const D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS = enum(u32) {
    D3D11_STANDARD_MULTISAMPLE_PATTERN = 0xffffffff,
    D3D11_CENTER_MULTISAMPLE_PATTERN = 0xfffffffe,
};
pub const D3D11_STANDARD_PIXEL_COMPONENT_COUNT = 128;
pub const D3D11_STANDARD_PIXEL_ELEMENT_COUNT = 32;
pub const D3D11_STANDARD_VECTOR_SIZE = 4;
pub const D3D11_STANDARD_VERTEX_ELEMENT_COUNT = 32;
pub const D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = 64;
pub const D3D11_STENCIL_OP = enum(u32) {
    D3D11_STENCIL_OP_KEEP = 1,
    D3D11_STENCIL_OP_ZERO = 2,
    D3D11_STENCIL_OP_REPLACE = 3,
    D3D11_STENCIL_OP_INCR_SAT = 4,
    D3D11_STENCIL_OP_DECR_SAT = 5,
    D3D11_STENCIL_OP_INVERT = 6,
    D3D11_STENCIL_OP_INCR = 7,
    D3D11_STENCIL_OP_DECR = 8,
};
pub const D3D11_SUBRESOURCE_DATA = extern struct {
    pSysMem: ?*const anyopaque,
    SysMemPitch: u32,
    SysMemSlicePitch: u32,
};
pub const D3D11_TEX1D_ARRAY_DSV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX1D_ARRAY_RTV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX1D_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX1D_ARRAY_UAV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX1D_DSV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX1D_RTV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX1D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};
pub const D3D11_TEX1D_UAV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX2D_ARRAY_DSV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2D_ARRAY_RTV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2D_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2D_ARRAY_UAV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2D_ARRAY_VPOV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2D_DSV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX2D_RTV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX2D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};
pub const D3D11_TEX2D_UAV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX2D_VDOV = extern struct {
    ArraySlice: u32,
};
pub const D3D11_TEX2D_VPIV = extern struct {
    MipSlice: u32,
    ArraySlice: u32,
};
pub const D3D11_TEX2D_VPOV = extern struct {
    MipSlice: u32,
};
pub const D3D11_TEX2DMS_ARRAY_DSV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2DMS_ARRAY_RTV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2DMS_ARRAY_SRV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};
pub const D3D11_TEX2DMS_DSV = extern struct {
    UnusedField_NothingToDefine: u32,
};
pub const D3D11_TEX2DMS_RTV = extern struct {
    UnusedField_NothingToDefine: u32,
};
pub const D3D11_TEX2DMS_SRV = extern struct {
    UnusedField_NothingToDefine: u32,
};
pub const D3D11_TEX3D_RTV = extern struct {
    MipSlice: u32,
    FirstWSlice: u32,
    WSize: u32,
};
pub const D3D11_TEX3D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};
pub const D3D11_TEX3D_UAV = extern struct {
    MipSlice: u32,
    FirstWSlice: u32,
    WSize: u32,
};
pub const D3D11_TEXCUBE_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    First2DArrayFace: u32,
    NumCubes: u32,
};
pub const D3D11_TEXCUBE_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};
pub const D3D11_TEXTURE1D_DESC = extern struct {
    Width: u32,
    MipLevels: u32,
    ArraySize: u32,
    Format: dxgi.DXGI_FORMAT,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
};
pub const D3D11_TEXTURE2D_DESC = extern struct {
    Width: u32,
    Height: u32,
    MipLevels: u32,
    ArraySize: u32,
    Format: dxgi.DXGI_FORMAT,
    SampleDesc: dxgi.DXGI_SAMPLE_DESC,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
};
pub const D3D11_TEXTURE3D_DESC = extern struct {
    Width: u32,
    Height: u32,
    Depth: u32,
    MipLevels: u32,
    Format: dxgi.DXGI_FORMAT,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
};
pub const D3D11_TEXTURE_ADDRESS_MODE = enum(u32) {
    D3D11_TEXTURE_ADDRESS_WRAP = 1,
    D3D11_TEXTURE_ADDRESS_MIRROR = 2,
    D3D11_TEXTURE_ADDRESS_CLAMP = 3,
    D3D11_TEXTURE_ADDRESS_BORDER = 4,
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5,
};
pub const D3D11_TILED_RESOURCES_TIER = enum(u32) {
    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0x0,
    D3D11_TILED_RESOURCES_TIER_1 = 0x1,
    D3D11_TILED_RESOURCES_TIER_2 = 0x2,
    D3D11_TILED_RESOURCES_TIER_3 = 0x3,
};
pub const D3D11_UAV_DIMENSION = enum(u32) {
    D3D11_UAV_DIMENSION_UNKNOWN = 0,
    D3D11_UAV_DIMENSION_BUFFER = 1,
    D3D11_UAV_DIMENSION_TEXTURE1D = 2,
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_UAV_DIMENSION_TEXTURE2D = 4,
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_UAV_DIMENSION_TEXTURE3D = 8,
};
pub const D3D11_UAV_FLAG = enum(u32) {
    D3D11_BUFFER_UAV_FLAG_RAW = 0x1,
    D3D11_BUFFER_UAV_FLAG_APPEND = 0x2,
    D3D11_BUFFER_UAV_FLAG_COUNTER = 0x4,
};
pub const D3D11_UNORDERED_ACCESS_VIEW_DESC = extern struct {
    Format: dxgi.DXGI_FORMAT,
    ViewDimension: D3D11_UAV_DIMENSION,
    unnamed: extern union {
        Buffer: D3D11_BUFFER_UAV,
        Texture1D: D3D11_TEX1D_UAV,
        Texture1DArray: D3D11_TEX1D_ARRAY_UAV,
        Texture2D: D3D11_TEX2D_UAV,
        Texture2DArray: D3D11_TEX2D_ARRAY_UAV,
        Texture3D: D3D11_TEX3D_UAV,
    },
};
pub const D3D11_USAGE = enum(u32) {
    D3D11_USAGE_DEFAULT = 0,
    D3D11_USAGE_IMMUTABLE = 1,
    D3D11_USAGE_DYNAMIC = 2,
    D3D11_USAGE_STAGING = 3,
};
pub const D3D11_VDOV_DIMENSION = enum(u32) {
    D3D11_VDOV_DIMENSION_UNKNOWN = 0,
    D3D11_VDOV_DIMENSION_TEXTURE2D = 1,
};
pub const D3D11_VIDEO_COLOR = extern struct {
    unnamed: extern union {
        YCbCr: D3D11_VIDEO_COLOR_YCbCrA,
        RGBA: D3D11_VIDEO_COLOR_RGBA,
    },
};
pub const D3D11_VIDEO_COLOR_RGBA = extern struct {
    R: f32,
    G: f32,
    B: f32,
    A: f32,
};
pub const D3D11_VIDEO_COLOR_YCbCrA = extern struct {
    Y: f32,
    Cb: f32,
    Cr: f32,
    A: f32,
};
pub const D3D11_VIDEO_CONTENT_PROTECTION_CAPS = extern struct {
    Caps: u32,
    KeyExchangeTypeCount: u32,
    BlockAlignmentSize: u32,
    ProtectedMemorySize: u64,
};
pub const D3D11_VIDEO_DECODER_BUFFER_DESC = extern struct {
    BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE,
    BufferIndex: u32,
    DataOffset: u32,
    DataSize: u32,
    FirstMBaddress: u32,
    NumMBsInBuffer: u32,
    Width: u32,
    Height: u32,
    Stride: u32,
    ReservedBits: u32,
    pIV: ?*anyopaque,
    IVSize: u32,
    PartialEncryption: WINBOOL,
    EncryptedBlockInfo: D3D11_ENCRYPTED_BLOCK_INFO,
};
pub const D3D11_VIDEO_DECODER_BUFFER_TYPE = enum(u32) {
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0,
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1,
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2,
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3,
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4,
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5,
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6,
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7,
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8,
};
pub const D3D11_VIDEO_DECODER_CONFIG = extern struct {
    guidConfigBitstreamEncryption: GUID,
    guidConfigMBcontrolEncryption: GUID,
    guidConfigResidDiffEncryption: GUID,
    ConfigBitstreamRaw: u32,
    ConfigMBcontrolRasterOrder: u32,
    ConfigResidDiffHost: u32,
    ConfigSpatialResid8: u32,
    ConfigResid8Subtraction: u32,
    ConfigSpatialHost8or9Clipping: u32,
    ConfigSpatialResidInterleaved: u32,
    ConfigIntraResidUnsigned: u32,
    ConfigResidDiffAccelerator: u32,
    ConfigHostInverseScan: u32,
    ConfigSpecificIDCT: u32,
    Config4GroupedCoefs: u32,
    ConfigMinRenderTargetBuffCount: u16,
    ConfigDecoderSpecific: u16,
};
pub const D3D11_VIDEO_DECODER_DESC = extern struct {
    GUID: GUID,
    SampleWidth: u32,
    SampleHeight: u32,
    OutputFormat: dxgi.DXGI_FORMAT,
};
pub const D3D11_VIDEO_DECODER_EXTENSION = extern struct {
    Function: u32,
    pPrivateInputData: ?*anyopaque,
    PrivateInputDataSize: u32,
    pPrivateOutputData: ?*anyopaque,
    PrivateOutputDataSize: u32,
    ResourceCount: u32,
    ppResourceList: **ID3D11Resource,
};
pub const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = extern struct {
    DecodeProfile: GUID,
    ViewDimension: D3D11_VDOV_DIMENSION,
    unnamed: extern union {
        Texture2D: D3D11_TEX2D_VDOV,
    },
};
pub const D3D11_VIDEO_FRAME_FORMAT = enum(u32) {
    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2,
};
pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = enum(u32) {
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3,
};
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 0x1,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 0x2,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 0x4,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 0x8,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 0x10,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 0x20,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 0x40,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 0x80,
};
pub const D3D11_VIDEO_PROCESSOR_CAPS = extern struct {
    DeviceCaps: u32,
    FeatureCaps: u32,
    FilterCaps: u32,
    InputFormatCaps: u32,
    AutoStreamCaps: u32,
    StereoCaps: u32,
    RateConversionCapsCount: u32,
    MaxInputStreams: u32,
    MaxStreamStates: u32,
};
pub const D3D11_VIDEO_PROCESSOR_COLOR_SPACE = packed struct(u32) {
    Usage: bool,
    RGB_Range: bool,
    YCbCr_Matrix: bool,
    YCbCr_xvYCC: bool,
    Nominal_Range: u2,
    Reserved: u26,
};
pub const D3D11_VIDEO_PROCESSOR_CONTENT_DESC = extern struct {
    InputFrameFormat: D3D11_VIDEO_FRAME_FORMAT,
    InputFrameRate: dxgi.DXGI_RATIONAL,
    InputWidth: u32,
    InputHeight: u32,
    OutputFrameRate: dxgi.DXGI_RATIONAL,
    OutputWidth: u32,
    OutputHeight: u32,
    Usage: D3D11_VIDEO_USAGE,
};
pub const D3D11_VIDEO_PROCESSOR_CUSTOM_RATE = extern struct {
    CustomRate: dxgi.DXGI_RATIONAL,
    OutputFrames: u32,
    InputInterlaced: WINBOOL,
    InputFramesOrFields: u32,
};
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 0x1,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 0x2,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 0x4,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 0x8,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 0x10,
};
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 0x1,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 0x2,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 0x4,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 0x8,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 0x10,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 0x20,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 0x40,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 0x80,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 0x100,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 0x200,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 0x400,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 0x800,
};
pub const D3D11_VIDEO_PROCESSOR_FILTER = enum(u32) {
    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0,
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1,
    D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2,
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3,
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4,
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5,
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6,
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7,
};
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 0x1,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 0x2,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 0x4,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 0x8,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 0x10,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 0x20,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 0x40,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 0x80,
};
pub const D3D11_VIDEO_PROCESSOR_FILTER_RANGE = extern struct {
    Minimum: i32,
    Maximum: i32,
    Default: i32,
    Multiplier: f32,
};
pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 0x1,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 0x2,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 0x4,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 0x8,
};
pub const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = enum(u32) {
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 0x1,
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 0x2,
};
pub const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC = extern struct {
    FourCC: u32,
    ViewDimension: D3D11_VPIV_DIMENSION,
    unnamed: extern union {
        Texture2D: D3D11_TEX2D_VPIV,
    },
};
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 0x1,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 0x2,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 0x4,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 0x8,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 0x10,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 0x20,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 0x40,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 0x80,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 0x100,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = 0x80000000,
};
pub const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = enum(u32) {
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0x0,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 0x1,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 0x2,
};
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE = enum(u32) {
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2,
};
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = extern struct {
    ViewDimension: D3D11_VPOV_DIMENSION,
    unnamed: extern union {
        Texture2D: D3D11_TEX2D_VPOV,
        Texture2DArray: D3D11_TEX2D_ARRAY_VPOV,
    },
};
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 0x1,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 0x2,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 0x4,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 0x8,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 0x10,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 0x20,
};
pub const D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = extern struct {
    PastFrames: u32,
    FutureFrames: u32,
    ProcessorCaps: u32,
    ITelecineCaps: u32,
    CustomRateCount: u32,
};
pub const D3D11_VIDEO_PROCESSOR_ROTATION = enum(u32) {
    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0,
    D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1,
    D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2,
    D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3,
};
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS = enum(u32) {
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 0x1,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 0x2,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 0x4,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 0x8,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 0x10,
};
pub const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = enum(u32) {
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2,
};
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT = enum(u32) {
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7,
};
pub const D3D11_VIDEO_PROCESSOR_STREAM = extern struct {
    Enable: WINBOOL,
    OutputIndex: u32,
    InputFrameOrField: u32,
    PastFrames: u32,
    FutureFrames: u32,
    ppPastSurfaces: **ID3D11VideoProcessorInputView,
    pInputSurface: *ID3D11VideoProcessorInputView,
    ppFutureSurfaces: **ID3D11VideoProcessorInputView,
    ppPastSurfacesRight: **ID3D11VideoProcessorInputView,
    pInputSurfaceRight: *ID3D11VideoProcessorInputView,
    ppFutureSurfacesRight: **ID3D11VideoProcessorInputView,
};
pub const D3D11_VIDEO_USAGE = enum(u32) {
    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0,
    D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1,
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2,
};
pub const D3D11_VIEWPORT = extern struct {
    TopLeftX: f32,
    TopLeftY: f32,
    Width: f32,
    Height: f32,
    MinDepth: f32,
    MaxDepth: f32,
};
pub const D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = 15;
pub const D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = 16;
pub const D3D11_VIEWPORT_BOUNDS_MAX = 32767;
pub const D3D11_VIEWPORT_BOUNDS_MIN = -32768;
pub const D3D11_VPIV_DIMENSION = enum(u32) {
    D3D11_VPIV_DIMENSION_UNKNOWN = 0,
    D3D11_VPIV_DIMENSION_TEXTURE2D = 1,
};
pub const D3D11_VPOV_DIMENSION = enum(u32) {
    D3D11_VPOV_DIMENSION_UNKNOWN = 0,
    D3D11_VPOV_DIMENSION_TEXTURE2D = 1,
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2,
};
pub const D3D11_VS_OUTPUT_REGISTER_COUNT = 32;
pub const D3D_CBUFFER_TYPE = enum(u32) {
    D3D_CT_CBUFFER = 0,
    D3D_CT_TBUFFER = 1,
    D3D_CT_INTERFACE_POINTERS = 2,
    D3D_CT_RESOURCE_BIND_INFO = 3,
};
pub const D3D_DRIVER_TYPE = enum(u32) {
    D3D_DRIVER_TYPE_UNKNOWN = 0,
    D3D_DRIVER_TYPE_HARDWARE = 1,
    D3D_DRIVER_TYPE_REFERENCE = 2,
    D3D_DRIVER_TYPE_NULL = 3,
    D3D_DRIVER_TYPE_SOFTWARE = 4,
    D3D_DRIVER_TYPE_WARP = 5,
};
pub const D3D_FEATURE_LEVEL = enum(u32) {
    D3D_FEATURE_LEVEL_9_1 = 0x9100,
    D3D_FEATURE_LEVEL_9_2 = 0x9200,
    D3D_FEATURE_LEVEL_9_3 = 0x9300,
    D3D_FEATURE_LEVEL_10_0 = 0xa000,
    D3D_FEATURE_LEVEL_10_1 = 0xa100,
    D3D_FEATURE_LEVEL_11_0 = 0xb000,
    D3D_FEATURE_LEVEL_11_1 = 0xb100,
    D3D_FEATURE_LEVEL_12_0 = 0xc000,
    D3D_FEATURE_LEVEL_12_1 = 0xc100,
};
pub const D3D_FL9_1_DEFAULT_MAX_ANISOTROPY = 2;
pub const D3D_FL9_1_IA_PRIMITIVE_MAX_COUNT = 65535;
pub const D3D_FL9_1_MAX_TEXTURE_REPEAT = 128;
pub const D3D_FL9_1_REQ_TEXTURE1D_U_DIMENSION = 2048;
pub const D3D_FL9_1_REQ_TEXTURE2D_U_OR_V_DIMENSION = 2048;
pub const D3D_FL9_1_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = 256;
pub const D3D_FL9_1_REQ_TEXTURECUBE_DIMENSION = 512;
pub const D3D_FL9_1_SIMULTANEOUS_RENDER_TARGET_COUNT = 1;
pub const D3D_FL9_2_IA_PRIMITIVE_MAX_COUNT = 1048575;
pub const D3D_FL9_2_MAX_TEXTURE_REPEAT = 2048;
pub const D3D_FL9_3_MAX_TEXTURE_REPEAT = 8192;
pub const D3D_FL9_3_REQ_TEXTURE1D_U_DIMENSION = 4096;
pub const D3D_FL9_3_REQ_TEXTURE2D_U_OR_V_DIMENSION = 4096;
pub const D3D_FL9_3_REQ_TEXTURECUBE_DIMENSION = 4096;
pub const D3D_FL9_3_SIMULTANEOUS_RENDER_TARGET_COUNT = 4;
pub const D3D_INCLUDE_TYPE = enum(u32) {
    D3D_INCLUDE_LOCAL = 0,
    D3D_INCLUDE_SYSTEM = 1,
    D3D_INCLUDE_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_INTERPOLATION_MODE = enum(u32) {
    D3D_INTERPOLATION_UNDEFINED = 0,
    D3D_INTERPOLATION_CONSTANT = 1,
    D3D_INTERPOLATION_LINEAR = 2,
    D3D_INTERPOLATION_LINEAR_CENTROID = 3,
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE = 4,
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_CENTROID = 5,
    D3D_INTERPOLATION_LINEAR_SAMPLE = 6,
    D3D_INTERPOLATION_LINEAR_NOPERSPECTIVE_SAMPLE = 7,
};
pub const D3D_MIN_PRECISION = enum(u32) {
    D3D_MIN_PRECISION_DEFAULT = 0,
    D3D_MIN_PRECISION_FLOAT_16 = 1,
    D3D_MIN_PRECISION_FLOAT_2_8 = 2,
    D3D_MIN_PRECISION_RESERVED = 3,
    D3D_MIN_PRECISION_SINT_16 = 4,
    D3D_MIN_PRECISION_UINT_16 = 5,
    D3D_MIN_PRECISION_ANY_16 = 0xf0,
    D3D_MIN_PRECISION_ANY_10 = 0xf1,
};
pub const D3D_NAME = enum(u32) {
    D3D_NAME_UNDEFINED = 0,
    D3D_NAME_POSITION = 1,
    D3D_NAME_CLIP_DISTANCE = 2,
    D3D_NAME_CULL_DISTANCE = 3,
    D3D_NAME_RENDER_TARGET_ARRAY_INDEX = 4,
    D3D_NAME_VIEWPORT_ARRAY_INDEX = 5,
    D3D_NAME_VERTEX_ID = 6,
    D3D_NAME_PRIMITIVE_ID = 7,
    D3D_NAME_INSTANCE_ID = 8,
    D3D_NAME_IS_FRONT_FACE = 9,
    D3D_NAME_SAMPLE_INDEX = 10,
    D3D_NAME_FINAL_QUAD_EDGE_TESSFACTOR = 11,
    D3D_NAME_FINAL_QUAD_INSIDE_TESSFACTOR = 12,
    D3D_NAME_FINAL_TRI_EDGE_TESSFACTOR = 13,
    D3D_NAME_FINAL_TRI_INSIDE_TESSFACTOR = 14,
    D3D_NAME_FINAL_LINE_DETAIL_TESSFACTOR = 15,
    D3D_NAME_FINAL_LINE_DENSITY_TESSFACTOR = 16,
    D3D_NAME_BARYCENTRICS = 23,
    D3D_NAME_SHADINGRATE = 24,
    D3D_NAME_CULLPRIMITIVE = 25,
    D3D_NAME_TARGET = 64,
    D3D_NAME_DEPTH = 65,
    D3D_NAME_COVERAGE = 66,
    D3D_NAME_DEPTH_GREATER_EQUAL = 67,
    D3D_NAME_DEPTH_LESS_EQUAL = 68,
};
pub const D3D_PARAMETER_FLAGS = enum(u32) {
    D3D_PF_NONE = 0,
    D3D_PF_IN = 1,
    D3D_PF_OUT = 2,
    D3D_PF_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_PRIMITIVE = enum(u32) {
    D3D_PRIMITIVE_UNDEFINED = 0,
    D3D_PRIMITIVE_POINT = 1,
    D3D_PRIMITIVE_LINE = 2,
    D3D_PRIMITIVE_TRIANGLE = 3,
    D3D_PRIMITIVE_LINE_ADJ = 6,
    D3D_PRIMITIVE_TRIANGLE_ADJ = 7,
    D3D_PRIMITIVE_1_CONTROL_POINT_PATCH = 8,
    D3D_PRIMITIVE_2_CONTROL_POINT_PATCH = 9,
    D3D_PRIMITIVE_3_CONTROL_POINT_PATCH = 10,
    D3D_PRIMITIVE_4_CONTROL_POINT_PATCH = 11,
    D3D_PRIMITIVE_5_CONTROL_POINT_PATCH = 12,
    D3D_PRIMITIVE_6_CONTROL_POINT_PATCH = 13,
    D3D_PRIMITIVE_7_CONTROL_POINT_PATCH = 14,
    D3D_PRIMITIVE_8_CONTROL_POINT_PATCH = 15,
    D3D_PRIMITIVE_9_CONTROL_POINT_PATCH = 16,
    D3D_PRIMITIVE_10_CONTROL_POINT_PATCH = 17,
    D3D_PRIMITIVE_11_CONTROL_POINT_PATCH = 18,
    D3D_PRIMITIVE_12_CONTROL_POINT_PATCH = 19,
    D3D_PRIMITIVE_13_CONTROL_POINT_PATCH = 20,
    D3D_PRIMITIVE_14_CONTROL_POINT_PATCH = 21,
    D3D_PRIMITIVE_15_CONTROL_POINT_PATCH = 22,
    D3D_PRIMITIVE_16_CONTROL_POINT_PATCH = 23,
    D3D_PRIMITIVE_17_CONTROL_POINT_PATCH = 24,
    D3D_PRIMITIVE_18_CONTROL_POINT_PATCH = 25,
    D3D_PRIMITIVE_19_CONTROL_POINT_PATCH = 26,
    D3D_PRIMITIVE_20_CONTROL_POINT_PATCH = 27,
    D3D_PRIMITIVE_21_CONTROL_POINT_PATCH = 28,
    D3D_PRIMITIVE_22_CONTROL_POINT_PATCH = 29,
    D3D_PRIMITIVE_23_CONTROL_POINT_PATCH = 30,
    D3D_PRIMITIVE_24_CONTROL_POINT_PATCH = 31,
    D3D_PRIMITIVE_25_CONTROL_POINT_PATCH = 32,
    D3D_PRIMITIVE_26_CONTROL_POINT_PATCH = 33,
    D3D_PRIMITIVE_27_CONTROL_POINT_PATCH = 34,
    D3D_PRIMITIVE_28_CONTROL_POINT_PATCH = 35,
    D3D_PRIMITIVE_29_CONTROL_POINT_PATCH = 36,
    D3D_PRIMITIVE_30_CONTROL_POINT_PATCH = 37,
    D3D_PRIMITIVE_31_CONTROL_POINT_PATCH = 38,
    D3D_PRIMITIVE_32_CONTROL_POINT_PATCH = 39,
};
pub const D3D_PRIMITIVE_TOPOLOGY = enum(u32) {
    D3D_PRIMITIVE_TOPOLOGY_UNDEFINED = 0,
    D3D_PRIMITIVE_TOPOLOGY_POINTLIST = 1,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST = 2,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP = 3,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST = 4,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP = 5,
    D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ = 10,
    D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ = 11,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ = 12,
    D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ = 13,
    D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST = 33,
    D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST = 34,
    D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST = 35,
    D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST = 36,
    D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST = 37,
    D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST = 38,
    D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST = 39,
    D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST = 40,
    D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST = 41,
    D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST = 42,
    D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST = 43,
    D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST = 44,
    D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST = 45,
    D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST = 46,
    D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST = 47,
    D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST = 48,
    D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST = 49,
    D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST = 50,
    D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST = 51,
    D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST = 52,
    D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST = 53,
    D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST = 54,
    D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST = 55,
    D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST = 56,
    D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST = 57,
    D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST = 58,
    D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST = 59,
    D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST = 60,
    D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST = 61,
    D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST = 62,
    D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST = 63,
    D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST = 64,
};
pub const D3D_REGISTER_COMPONENT_TYPE = enum(u32) {
    D3D_REGISTER_COMPONENT_UNKNOWN = 0,
    D3D_REGISTER_COMPONENT_UINT32 = 1,
    D3D_REGISTER_COMPONENT_SINT32 = 2,
    D3D_REGISTER_COMPONENT_FLOAT32 = 3,
};
pub const D3D_RESOURCE_RETURN_TYPE = enum(u32) {
    D3D_RETURN_TYPE_UNORM = 1,
    D3D_RETURN_TYPE_SNORM = 2,
    D3D_RETURN_TYPE_SINT = 3,
    D3D_RETURN_TYPE_UINT = 4,
    D3D_RETURN_TYPE_FLOAT = 5,
    D3D_RETURN_TYPE_MIXED = 6,
    D3D_RETURN_TYPE_DOUBLE = 7,
    D3D_RETURN_TYPE_CONTINUED = 8,
};
pub const D3D_SHADER_CBUFFER_FLAGS = enum(u32) {
    D3D_CBF_USERPACKED = 0x1,
    D3D_CBF_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_SHADER_INPUT_FLAGS = enum(u32) {
    D3D_SIF_USERPACKED = 0x1,
    D3D_SIF_COMPARISON_SAMPLER = 0x2,
    D3D_SIF_TEXTURE_COMPONENT_0 = 0x4,
    D3D_SIF_TEXTURE_COMPONENT_1 = 0x8,
    D3D_SIF_TEXTURE_COMPONENTS = 0xc,
    D3D_SIF_UNUSED = 0x10,
    D3D_SIF_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_SHADER_INPUT_TYPE = enum(u32) {
    D3D_SIT_CBUFFER = 0,
    D3D_SIT_TBUFFER = 1,
    D3D_SIT_TEXTURE = 2,
    D3D_SIT_SAMPLER = 3,
    D3D_SIT_UAV_RWTYPED = 4,
    D3D_SIT_STRUCTURED = 5,
    D3D_SIT_UAV_RWSTRUCTURED = 6,
    D3D_SIT_BYTEADDRESS = 7,
    D3D_SIT_UAV_RWBYTEADDRESS = 8,
    D3D_SIT_UAV_APPEND_STRUCTURED = 9,
    D3D_SIT_UAV_CONSUME_STRUCTURED = 10,
    D3D_SIT_UAV_RWSTRUCTURED_WITH_COUNTER = 11,
    D3D_SIT_RTACCELERATIONSTRUCTURE = 12,
    D3D_SIT_UAV_FEEDBACKTEXTURE = 13,
};
pub const D3D_SHADER_MACRO = extern struct {
    Name: [*:0]const u8,
    Definition: [*:0]const u8,
};
pub const D3D_SHADER_VARIABLE_CLASS = enum(u32) {
    D3D_SVC_SCALAR = 0,
    D3D_SVC_VECTOR = 1,
    D3D_SVC_MATRIX_ROWS = 2,
    D3D_SVC_MATRIX_COLUMNS = 3,
    D3D_SVC_OBJECT = 4,
    D3D_SVC_STRUCT = 5,
    D3D_SVC_INTERFACE_CLASS = 6,
    D3D_SVC_INTERFACE_POINTER = 7,
    D3D_SVC_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_SHADER_VARIABLE_FLAGS = enum(u32) {
    D3D_SVF_USERPACKED = 0x1,
    D3D_SVF_USED = 0x2,
    D3D_SVF_INTERFACE_POINTER = 0x4,
    D3D_SVF_INTERFACE_PARAMETER = 0x8,
    D3D_SVF_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_SHADER_VARIABLE_TYPE = enum(u32) {
    D3D_SVT_VOID = 0,
    D3D_SVT_BOOL = 1,
    D3D_SVT_INT = 2,
    D3D_SVT_FLOAT = 3,
    D3D_SVT_STRING = 4,
    D3D_SVT_TEXTURE = 5,
    D3D_SVT_TEXTURE1D = 6,
    D3D_SVT_TEXTURE2D = 7,
    D3D_SVT_TEXTURE3D = 8,
    D3D_SVT_TEXTURECUBE = 9,
    D3D_SVT_SAMPLER = 10,
    D3D_SVT_SAMPLER1D = 11,
    D3D_SVT_SAMPLER2D = 12,
    D3D_SVT_SAMPLER3D = 13,
    D3D_SVT_SAMPLERCUBE = 14,
    D3D_SVT_PIXELSHADER = 15,
    D3D_SVT_VERTEXSHADER = 16,
    D3D_SVT_PIXELFRAGMENT = 17,
    D3D_SVT_VERTEXFRAGMENT = 18,
    D3D_SVT_UINT = 19,
    D3D_SVT_UINT8 = 20,
    D3D_SVT_GEOMETRYSHADER = 21,
    D3D_SVT_RASTERIZER = 22,
    D3D_SVT_DEPTHSTENCIL = 23,
    D3D_SVT_BLEND = 24,
    D3D_SVT_BUFFER = 25,
    D3D_SVT_CBUFFER = 26,
    D3D_SVT_TBUFFER = 27,
    D3D_SVT_TEXTURE1DARRAY = 28,
    D3D_SVT_TEXTURE2DARRAY = 29,
    D3D_SVT_RENDERTARGETVIEW = 30,
    D3D_SVT_DEPTHSTENCILVIEW = 31,
    D3D_SVT_TEXTURE2DMS = 32,
    D3D_SVT_TEXTURE2DMSARRAY = 33,
    D3D_SVT_TEXTURECUBEARRAY = 34,
    D3D_SVT_HULLSHADER = 35,
    D3D_SVT_DOMAINSHADER = 36,
    D3D_SVT_INTERFACE_POINTER = 37,
    D3D_SVT_COMPUTESHADER = 38,
    D3D_SVT_DOUBLE = 39,
    D3D_SVT_RWTEXTURE1D = 40,
    D3D_SVT_RWTEXTURE1DARRAY = 41,
    D3D_SVT_RWTEXTURE2D = 42,
    D3D_SVT_RWTEXTURE2DARRAY = 43,
    D3D_SVT_RWTEXTURE3D = 44,
    D3D_SVT_RWBUFFER = 45,
    D3D_SVT_BYTEADDRESS_BUFFER = 46,
    D3D_SVT_RWBYTEADDRESS_BUFFER = 47,
    D3D_SVT_STRUCTURED_BUFFER = 48,
    D3D_SVT_RWSTRUCTURED_BUFFER = 49,
    D3D_SVT_APPEND_STRUCTURED_BUFFER = 50,
    D3D_SVT_CONSUME_STRUCTURED_BUFFER = 51,
    D3D_SVT_MIN8FLOAT = 52,
    D3D_SVT_MIN10FLOAT = 53,
    D3D_SVT_MIN16FLOAT = 54,
    D3D_SVT_MIN12INT = 55,
    D3D_SVT_MIN16INT = 56,
    D3D_SVT_MIN16UINT = 57,
    D3D_SVT_FORCE_DWORD = 0x7fffffff,
};
pub const D3D_SRV_DIMENSION = enum(u32) {
    D3D_SRV_DIMENSION_UNKNOWN = 0,
    D3D_SRV_DIMENSION_BUFFER = 1,
    D3D_SRV_DIMENSION_TEXTURE1D = 2,
    D3D_SRV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D_SRV_DIMENSION_TEXTURE2D = 4,
    D3D_SRV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D_SRV_DIMENSION_TEXTURE2DMS = 6,
    D3D_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D_SRV_DIMENSION_TEXTURE3D = 8,
    D3D_SRV_DIMENSION_TEXTURECUBE = 9,
    D3D_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
    D3D_SRV_DIMENSION_BUFFEREX = 11,
};
pub const D3D_TESSELLATOR_DOMAIN = enum(u32) {
    D3D_TESSELLATOR_DOMAIN_UNDEFINED = 0,
    D3D_TESSELLATOR_DOMAIN_ISOLINE = 1,
    D3D_TESSELLATOR_DOMAIN_TRI = 2,
    D3D_TESSELLATOR_DOMAIN_QUAD = 3,
    D3D11_TESSELLATOR_DOMAIN_UNDEFINED = 0,
    D3D11_TESSELLATOR_DOMAIN_ISOLINE = 1,
    D3D11_TESSELLATOR_DOMAIN_TRI = 2,
    D3D11_TESSELLATOR_DOMAIN_QUAD = 3,
};
pub const D3D_TESSELLATOR_OUTPUT_PRIMITIVE = enum(u32) {
    D3D_TESSELLATOR_OUTPUT_UNDEFINED = 0,
    D3D_TESSELLATOR_OUTPUT_POINT = 1,
    D3D_TESSELLATOR_OUTPUT_LINE = 2,
    D3D_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
    D3D_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
    D3D11_TESSELLATOR_OUTPUT_UNDEFINED = 0,
    D3D11_TESSELLATOR_OUTPUT_POINT = 1,
    D3D11_TESSELLATOR_OUTPUT_LINE = 2,
    D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CW = 3,
    D3D11_TESSELLATOR_OUTPUT_TRIANGLE_CCW = 4,
};
pub const D3D_TESSELLATOR_PARTITIONING = enum(u32) {
    D3D_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
    D3D_TESSELLATOR_PARTITIONING_INTEGER = 1,
    D3D_TESSELLATOR_PARTITIONING_POW2 = 2,
    D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
    D3D_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
    D3D11_TESSELLATOR_PARTITIONING_UNDEFINED = 0,
    D3D11_TESSELLATOR_PARTITIONING_INTEGER = 1,
    D3D11_TESSELLATOR_PARTITIONING_POW2 = 2,
    D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_ODD = 3,
    D3D11_TESSELLATOR_PARTITIONING_FRACTIONAL_EVEN = 4,
};

// COM objects
pub const ID3D11Asynchronous = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{4b35d0cd-1e15-4258-9c98-1b1333f6dd3b}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDataSize = ID3D11Asynchronous.Methods(@This()).GetDataSize;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDataSize(self: *T) u32 {
                return @as(*const ID3D11Asynchronous.VTable, @ptrCast(self.vtable)).GetDataSize(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDataSize: *const fn (*ID3D11Asynchronous) callconv(WINAPI) u32,
    };
};
pub const ID3D11AuthenticatedChannel = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{3015a308-dcbd-47aa-a747-192486d14d4a}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetCertificateSize = ID3D11AuthenticatedChannel.Methods(@This()).GetCertificateSize;
    pub const GetCertificate = ID3D11AuthenticatedChannel.Methods(@This()).GetCertificate;
    pub const GetChannelHandle = ID3D11AuthenticatedChannel.Methods(@This()).GetChannelHandle;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetCertificateSize(self: *T, pCertificateSize: *u32) HRESULT {
                return @as(*const ID3D11AuthenticatedChannel.VTable, @ptrCast(self.vtable)).GetCertificateSize(@ptrCast(self), pCertificateSize);
            }
            pub inline fn GetCertificate(self: *T, CertificateSize: u32, pCertificate: *u8) HRESULT {
                return @as(*const ID3D11AuthenticatedChannel.VTable, @ptrCast(self.vtable)).GetCertificate(@ptrCast(self), CertificateSize, pCertificate);
            }
            pub inline fn GetChannelHandle(self: *T, pChannelHandle: *?HANDLE) void {
                return @as(*const ID3D11AuthenticatedChannel.VTable, @ptrCast(self.vtable)).GetChannelHandle(@ptrCast(self), pChannelHandle);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetCertificateSize: *const fn (*ID3D11AuthenticatedChannel, *u32) callconv(WINAPI) HRESULT,
        GetCertificate: *const fn (*ID3D11AuthenticatedChannel, u32, *BYTE) callconv(WINAPI) HRESULT,
        GetChannelHandle: *const fn (*ID3D11AuthenticatedChannel, *HANDLE) callconv(WINAPI) void,
    };
};
pub const ID3D11BlendState = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{75b68faa-347d-4159-8f45-a0640f01cd9a}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDesc = ID3D11BlendState.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: *D3D11_BLEND_DESC) void {
                return @as(*const ID3D11BlendState.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11BlendState, *D3D11_BLEND_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11Buffer = extern struct { // IUnknown : ID3D11DeviceChild : ID3D11Resource
    vtable: *VTable,
    pub const IID = GUID.parse("{48570b85-d1ee-4fcd-a250-eb350722b037}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetType = ID3D11Resource.Methods(@This()).GetType;
    pub const SetEvictionPriority = ID3D11Resource.Methods(@This()).SetEvictionPriority;
    pub const GetEvictionPriority = ID3D11Resource.Methods(@This()).GetEvictionPriority;
    pub const GetDesc = ID3D11Buffer.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: *D3D11_BUFFER_DESC) void {
                return @as(*const ID3D11Buffer.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (*ID3D11Buffer, *D3D11_BUFFER_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11ClassInstance = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{a6cd7faa-b0b7-4a2f-9436-8662a65797cb}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetClassLinkage = ID3D11ClassInstance.Methods(@This()).GetClassLinkage;
    pub const GetDesc = ID3D11ClassInstance.Methods(@This()).GetDesc;
    pub const GetInstanceName = ID3D11ClassInstance.Methods(@This()).GetInstanceName;
    pub const GetTypeName = ID3D11ClassInstance.Methods(@This()).GetTypeName;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetClassLinkage(self: *T, ppLinkage: **ID3D11ClassLinkage) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetClassLinkage(@ptrCast(self), ppLinkage);
            }
            pub inline fn GetDesc(self: *T, pDesc: *D3D11_CLASS_INSTANCE_DESC) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
            pub inline fn GetInstanceName(self: *T, pInstanceName: [*:0]u8, pBufferLength: *usize) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetInstanceName(@ptrCast(self), pInstanceName, pBufferLength);
            }
            pub inline fn GetTypeName(self: *T, pTypeName: [*:0]u8, pBufferLength: *usize) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetTypeName(@ptrCast(self), pTypeName, pBufferLength);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetClassLinkage: *const fn (*ID3D11ClassInstance, **ID3D11ClassLinkage) callconv(WINAPI) void,
        GetDesc: *const fn (*ID3D11ClassInstance, *D3D11_CLASS_INSTANCE_DESC) callconv(WINAPI) void,
        GetInstanceName: *const fn (*ID3D11ClassInstance, [*:0]u8, *SIZE_T) callconv(WINAPI) void,
        GetTypeName: *const fn (*ID3D11ClassInstance, [*:0]u8, *SIZE_T) callconv(WINAPI) void,
    };
};
pub const ID3D11ClassLinkage = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{ddf57cba-9543-46e4-a12b-f207a0fe7fed}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetClassInstance = ID3D11ClassLinkage.Methods(@This()).GetClassInstance;
    pub const CreateClassInstance = ID3D11ClassLinkage.Methods(@This()).CreateClassInstance;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetClassInstance(self: *T, pClassInstanceName: ?[*:0]const u8, InstanceIndex: u32, ppInstance: ?*?*ID3D11ClassInstance) HRESULT {
                return @as(*const ID3D11ClassLinkage.VTable, @ptrCast(self.vtable)).GetClassInstance(@ptrCast(self), pClassInstanceName, InstanceIndex, ppInstance);
            }
            pub inline fn CreateClassInstance(self: *T, pClassTypeName: ?[*:0]const u8, ConstantBufferOffset: u32, ConstantVectorOffset: u32, TextureOffset: u32, SamplerOffset: u32, ppInstance: ?*?*ID3D11ClassInstance) HRESULT {
                return @as(*const ID3D11ClassLinkage.VTable, @ptrCast(self.vtable)).CreateClassInstance(@ptrCast(self), pClassTypeName, ConstantBufferOffset, ConstantVectorOffset, TextureOffset, SamplerOffset, ppInstance);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetClassInstance: *const fn (*ID3D11ClassLinkage, [*:0]const u8, u32, **ID3D11ClassInstance) callconv(WINAPI) HRESULT,
        CreateClassInstance: *const fn (*ID3D11ClassLinkage, [*:0]const u8, u32, u32, u32, u32, **ID3D11ClassInstance) callconv(WINAPI) HRESULT,
    };
};
pub const ID3D11CommandList = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{a24bc4d1-769e-43f7-8013-98ff566c18e2}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetContextFlags = ID3D11CommandList.Methods(@This()).GetContextFlags;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetContextFlags(self: *T) u32 {
                return @as(*const ID3D11CommandList.VTable, @ptrCast(self.vtable)).GetContextFlags(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetContextFlags: *const fn (*ID3D11CommandList) callconv(WINAPI) u32,
    };
};
pub const ID3D11ComputeShader = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{4f5b196e-c2bd-495e-bd01-1fded38e4969}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11Counter = extern struct { // IUnknown : ID3D11DeviceChild : ID3D11Asynchronous
    vtable: *VTable,
    pub const IID = GUID.parse("{6e8c49fb-a371-4770-b440-29086022b741}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDataSize = ID3D11Asynchronous.Methods(@This()).GetDataSize;
    pub const GetDesc = ID3D11Counter.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_COUNTER_DESC) void {
                return @as(*const ID3D11Counter.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11Asynchronous.VTable,
        GetDesc: *const fn (*ID3D11Counter, *D3D11_COUNTER_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11CryptoSession = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{9b32f9ad-bdcc-40a6-a39d-d5c865845720}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetCryptoType = ID3D11CryptoSession.Methods(@This()).GetCryptoType;
    pub const GetDecoderProfile = ID3D11CryptoSession.Methods(@This()).GetDecoderProfile;
    pub const GetCertificateSize = ID3D11CryptoSession.Methods(@This()).GetCertificateSize;
    pub const GetCertificate = ID3D11CryptoSession.Methods(@This()).GetCertificate;
    pub const GetCryptoSessionHandle = ID3D11CryptoSession.Methods(@This()).GetCryptoSessionHandle;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetCryptoType(self: *T, pCryptoType: ?*GUID) void {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCryptoType(@ptrCast(self), pCryptoType);
            }
            pub inline fn GetDecoderProfile(self: *T, pDecoderProfile: ?*GUID) void {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetDecoderProfile(@ptrCast(self), pDecoderProfile);
            }
            pub inline fn GetCertificateSize(self: *T, pCertificateSize: ?*u32) HRESULT {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCertificateSize(@ptrCast(self), pCertificateSize);
            }
            pub inline fn GetCertificate(self: *T, CertificateSize: u32, pCertificate: ?*u8) HRESULT {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCertificate(@ptrCast(self), CertificateSize, pCertificate);
            }
            pub inline fn GetCryptoSessionHandle(self: *T, pCryptoSessionHandle: ?*?HANDLE) void {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCryptoSessionHandle(@ptrCast(self), pCryptoSessionHandle);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetCryptoType: *const fn (*ID3D11CryptoSession, *GUID) callconv(WINAPI) void,
        GetDecoderProfile: *const fn (*ID3D11CryptoSession, *GUID) callconv(WINAPI) void,
        GetCertificateSize: *const fn (*ID3D11CryptoSession, *u32) callconv(WINAPI) HRESULT,
        GetCertificate: *const fn (*ID3D11CryptoSession, u32, *BYTE) callconv(WINAPI) HRESULT,
        GetCryptoSessionHandle: *const fn (*ID3D11CryptoSession, *HANDLE) callconv(WINAPI) void,
    };
};
pub const ID3D11Debug = extern struct { // IUnknown
    vtable: *VTable,
    pub const IID = GUID.parse("{79cf2233-7536-4948-9d36-1e4692dc5760}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetFeatureMask = ID3D11Debug.Methods(@This()).SetFeatureMask;
    pub const GetFeatureMask = ID3D11Debug.Methods(@This()).GetFeatureMask;
    pub const SetPresentPerRenderOpDelay = ID3D11Debug.Methods(@This()).SetPresentPerRenderOpDelay;
    pub const GetPresentPerRenderOpDelay = ID3D11Debug.Methods(@This()).GetPresentPerRenderOpDelay;
    pub const SetSwapChain = ID3D11Debug.Methods(@This()).SetSwapChain;
    pub const GetSwapChain = ID3D11Debug.Methods(@This()).GetSwapChain;
    pub const ValidateContext = ID3D11Debug.Methods(@This()).ValidateContext;
    pub const ReportLiveDeviceObjects = ID3D11Debug.Methods(@This()).ReportLiveDeviceObjects;
    pub const ValidateContextForDispatch = ID3D11Debug.Methods(@This()).ValidateContextForDispatch;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn SetFeatureMask(self: *T, Mask: u32) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).SetFeatureMask(@ptrCast(self), Mask);
            }
            pub inline fn GetFeatureMask(self: *T) u32 {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).GetFeatureMask(@ptrCast(self));
            }
            pub inline fn SetPresentPerRenderOpDelay(self: *T, Milliseconds: u32) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).SetPresentPerRenderOpDelay(@ptrCast(self), Milliseconds);
            }
            pub inline fn GetPresentPerRenderOpDelay(self: *T) u32 {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).GetPresentPerRenderOpDelay(@ptrCast(self));
            }
            pub inline fn SetSwapChain(self: *T, pSwapChain: ?*IDXGISwapChain) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).SetSwapChain(@ptrCast(self), pSwapChain);
            }
            pub inline fn GetSwapChain(self: *T, ppSwapChain: ?*?*IDXGISwapChain) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).GetSwapChain(@ptrCast(self), ppSwapChain);
            }
            pub inline fn ValidateContext(self: *T, pContext: ?*ID3D11DeviceContext) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).ValidateContext(@ptrCast(self), pContext);
            }
            pub inline fn ReportLiveDeviceObjects(self: *T, Flags: D3D11_RLDO_FLAGS) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).ReportLiveDeviceObjects(@ptrCast(self), Flags);
            }
            pub inline fn ValidateContextForDispatch(self: *T, pContext: ?*ID3D11DeviceContext) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).ValidateContextForDispatch(@ptrCast(self), pContext);
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFeatureMask: *const fn (*ID3D11Debug, u32) callconv(WINAPI) HRESULT,
        GetFeatureMask: *const fn (*ID3D11Debug) callconv(WINAPI) u32,
        SetPresentPerRenderOpDelay: *const fn (*ID3D11Debug, u32) callconv(WINAPI) HRESULT,
        GetPresentPerRenderOpDelay: *const fn (*ID3D11Debug) callconv(WINAPI) u32,
        SetSwapChain: *const fn (*ID3D11Debug, *IDXGISwapChain) callconv(WINAPI) HRESULT,
        GetSwapChain: *const fn (*ID3D11Debug, **IDXGISwapChain) callconv(WINAPI) HRESULT,
        ValidateContext: *const fn (*ID3D11Debug, *ID3D11DeviceContext) callconv(WINAPI) HRESULT,
        ReportLiveDeviceObjects: *const fn (*ID3D11Debug, D3D11_RLDO_FLAGS) callconv(WINAPI) HRESULT,
        ValidateContextForDispatch: *const fn (*ID3D11Debug, *ID3D11DeviceContext) callconv(WINAPI) HRESULT,
    };
};
pub const ID3D11DepthStencilState = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDesc = ID3D11DepthStencilState.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_DEPTH_STENCIL_DESC) void {
                return @as(*const ID3D11DepthStencilState.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11DepthStencilState, *D3D11_DEPTH_STENCIL_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11DepthStencilView = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{9fdac92a-1876-48c3-afad-25b94f84a9b6}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;

    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const GetResource = ID3D11View.Methods(@This()).GetResource;

    pub const GetDesc = ID3D11DepthStencilView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_DEPTH_STENCIL_VIEW_DESC) void {
                return @as(*const ID3D11DepthStencilView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (self: *ID3D11DepthStencilView, pDesc: *D3D11_DEPTH_STENCIL_VIEW_DESC) callconv(WINAPI) void,
    };
};

pub const ID3D11Device = extern struct { // IUnknown
    vtable: *VTable,
    pub const IID = GUID.parse("{db6f6ddb-ac77-4e88-8253-819df9bbf140}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const CreateBuffer = ID3D11Device.Methods(@This()).CreateBuffer;
    pub const CreateTexture1D = ID3D11Device.Methods(@This()).CreateTexture1D;
    pub const CreateTexture2D = ID3D11Device.Methods(@This()).CreateTexture2D;
    pub const CreateTexture3D = ID3D11Device.Methods(@This()).CreateTexture3D;
    pub const CreateShaderResourceView = ID3D11Device.Methods(@This()).CreateShaderResourceView;
    pub const CreateUnorderedAccessView = ID3D11Device.Methods(@This()).CreateUnorderedAccessView;
    pub const CreateRenderTargetView = ID3D11Device.Methods(@This()).CreateRenderTargetView;
    pub const CreateDepthStencilView = ID3D11Device.Methods(@This()).CreateDepthStencilView;
    pub const CreateInputLayout = ID3D11Device.Methods(@This()).CreateInputLayout;
    pub const CreateVertexShader = ID3D11Device.Methods(@This()).CreateVertexShader;
    pub const CreateGeometryShader = ID3D11Device.Methods(@This()).CreateGeometryShader;
    pub const CreateGeometryShaderWithStreamOutput = ID3D11Device.Methods(@This()).CreateGeometryShaderWithStreamOutput;
    pub const CreatePixelShader = ID3D11Device.Methods(@This()).CreatePixelShader;
    pub const CreateHullShader = ID3D11Device.Methods(@This()).CreateHullShader;
    pub const CreateDomainShader = ID3D11Device.Methods(@This()).CreateDomainShader;
    pub const CreateComputeShader = ID3D11Device.Methods(@This()).CreateComputeShader;
    pub const CreateClassLinkage = ID3D11Device.Methods(@This()).CreateClassLinkage;
    pub const CreateBlendState = ID3D11Device.Methods(@This()).CreateBlendState;
    pub const CreateDepthStencilState = ID3D11Device.Methods(@This()).CreateDepthStencilState;
    pub const CreateRasterizerState = ID3D11Device.Methods(@This()).CreateRasterizerState;
    pub const CreateSamplerState = ID3D11Device.Methods(@This()).CreateSamplerState;
    pub const CreateQuery = ID3D11Device.Methods(@This()).CreateQuery;
    pub const CreatePredicate = ID3D11Device.Methods(@This()).CreatePredicate;
    pub const CreateCounter = ID3D11Device.Methods(@This()).CreateCounter;
    pub const CreateDeferredContext = ID3D11Device.Methods(@This()).CreateDeferredContext;
    pub const OpenSharedResource = ID3D11Device.Methods(@This()).OpenSharedResource;
    pub const CheckFormatSupport = ID3D11Device.Methods(@This()).CheckFormatSupport;
    pub const CheckMultisampleQualityLevels = ID3D11Device.Methods(@This()).CheckMultisampleQualityLevels;
    pub const CheckCounterInfo = ID3D11Device.Methods(@This()).CheckCounterInfo;
    pub const CheckCounter = ID3D11Device.Methods(@This()).CheckCounter;
    pub const CheckFeatureSupport = ID3D11Device.Methods(@This()).CheckFeatureSupport;
    pub const GetPrivateData = ID3D11Device.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11Device.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11Device.Methods(@This()).SetPrivateDataInterface;
    pub const GetFeatureLevel = ID3D11Device.Methods(@This()).GetFeatureLevel;
    pub const GetCreationFlags = ID3D11Device.Methods(@This()).GetCreationFlags;
    pub const GetDeviceRemovedReason = ID3D11Device.Methods(@This()).GetDeviceRemovedReason;
    pub const GetImmediateContext = ID3D11Device.Methods(@This()).GetImmediateContext;
    pub const SetExceptionMode = ID3D11Device.Methods(@This()).SetExceptionMode;
    pub const GetExceptionMode = ID3D11Device.Methods(@This()).GetExceptionMode;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn CreateBuffer(self: *T, pDesc: *const D3D11_BUFFER_DESC, pInitialData: ?*const D3D11_SUBRESOURCE_DATA, ppBuffer: ?*?*ID3D11Buffer) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateBuffer(@ptrCast(self), pDesc, pInitialData, ppBuffer);
            }
            pub inline fn CreateTexture1D(self: *T, pDesc: *const D3D11_TEXTURE1D_DESC, pInitialData: ?*const D3D11_SUBRESOURCE_DATA, ppTexture1D: ?*?*ID3D11Texture1D) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateTexture1D(@ptrCast(self), pDesc, pInitialData, ppTexture1D);
            }
            pub inline fn CreateTexture2D(self: *T, pDesc: *const D3D11_TEXTURE2D_DESC, pInitialData: ?*const D3D11_SUBRESOURCE_DATA, ppTexture2D: ?*?*ID3D11Texture2D) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateTexture2D(@ptrCast(self), pDesc, pInitialData, ppTexture2D);
            }
            pub inline fn CreateTexture3D(self: *T, pDesc: *const D3D11_TEXTURE3D_DESC, pInitialData: ?*const D3D11_SUBRESOURCE_DATA, ppTexture3D: ?*?*ID3D11Texture3D) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateTexture3D(@ptrCast(self), pDesc, pInitialData, ppTexture3D);
            }
            pub inline fn CreateShaderResourceView(self: *T, pResource: ?*ID3D11Resource, pDesc: *const D3D11_SHADER_RESOURCE_VIEW_DESC, ppSRView: ?*?*ID3D11ShaderResourceView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateShaderResourceView(@ptrCast(self), pResource, pDesc, ppSRView);
            }
            pub inline fn CreateUnorderedAccessView(self: *T, pResource: ?*ID3D11Resource, pDesc: *const D3D11_UNORDERED_ACCESS_VIEW_DESC, ppUAView: ?*?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateUnorderedAccessView(@ptrCast(self), pResource, pDesc, ppUAView);
            }
            pub inline fn CreateRenderTargetView(self: *T, pResource: *ID3D11Resource, pDesc: ?*const D3D11_RENDER_TARGET_VIEW_DESC, ppRTView: **ID3D11RenderTargetView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateRenderTargetView(@ptrCast(self), pResource, pDesc, ppRTView);
            }
            pub inline fn CreateDepthStencilView(self: *T, pResource: ?*ID3D11Resource, pDesc: *const D3D11_DEPTH_STENCIL_VIEW_DESC, ppDepthStencilView: ?*?*ID3D11DepthStencilView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDepthStencilView(@ptrCast(self), pResource, pDesc, ppDepthStencilView);
            }
            pub inline fn CreateInputLayout(self: *T, pInputElementDescs: [*]const D3D11_INPUT_ELEMENT_DESC, NumElements: u32, pShaderBytecodeWithInputSignature: [*]const u8, BytecodeLength: usize, ppInputLayout: ?*?*ID3D11InputLayout) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateInputLayout(@ptrCast(self), pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ppInputLayout);
            }
            pub inline fn CreateVertexShader(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pClassLinkage: ?*ID3D11ClassLinkage, ppVertexShader: ?*?*ID3D11VertexShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateVertexShader(@ptrCast(self), pShaderBytecode, BytecodeLength, pClassLinkage, ppVertexShader);
            }
            pub inline fn CreateGeometryShader(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pClassLinkage: ?*ID3D11ClassLinkage, ppGeometryShader: ?*?*ID3D11GeometryShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateGeometryShader(@ptrCast(self), pShaderBytecode, BytecodeLength, pClassLinkage, ppGeometryShader);
            }
            pub inline fn CreateGeometryShaderWithStreamOutput(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pSODeclaration: ?[*]const D3D11_SO_DECLARATION_ENTRY, NumEntries: u32, pBufferStrides: ?[*]const u32, NumStrides: u32, RasterizedStream: u32, pClassLinkage: ?*ID3D11ClassLinkage, ppGeometryShader: ?*?*ID3D11GeometryShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateGeometryShaderWithStreamOutput(@ptrCast(self), pShaderBytecode, BytecodeLength, pSODeclaration, NumEntries, pBufferStrides, NumStrides, RasterizedStream, pClassLinkage, ppGeometryShader);
            }
            pub inline fn CreatePixelShader(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pClassLinkage: ?*ID3D11ClassLinkage, ppPixelShader: ?*?*ID3D11PixelShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreatePixelShader(@ptrCast(self), pShaderBytecode, BytecodeLength, pClassLinkage, ppPixelShader);
            }
            pub inline fn CreateHullShader(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pClassLinkage: ?*ID3D11ClassLinkage, ppHullShader: ?*?*ID3D11HullShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateHullShader(@ptrCast(self), pShaderBytecode, BytecodeLength, pClassLinkage, ppHullShader);
            }
            pub inline fn CreateDomainShader(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pClassLinkage: ?*ID3D11ClassLinkage, ppDomainShader: ?*?*ID3D11DomainShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDomainShader(@ptrCast(self), pShaderBytecode, BytecodeLength, pClassLinkage, ppDomainShader);
            }
            pub inline fn CreateComputeShader(self: *T, pShaderBytecode: [*]const u8, BytecodeLength: usize, pClassLinkage: ?*ID3D11ClassLinkage, ppComputeShader: ?*?*ID3D11ComputeShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateComputeShader(@ptrCast(self), pShaderBytecode, BytecodeLength, pClassLinkage, ppComputeShader);
            }
            pub inline fn CreateClassLinkage(self: *T, ppLinkage: ?*?*ID3D11ClassLinkage) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateClassLinkage(@ptrCast(self), ppLinkage);
            }
            pub inline fn CreateBlendState(self: *T, pBlendStateDesc: *const D3D11_BLEND_DESC, ppBlendState: ?*?*ID3D11BlendState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateBlendState(@ptrCast(self), pBlendStateDesc, ppBlendState);
            }
            pub inline fn CreateDepthStencilState(self: *T, pDepthStencilDesc: *const D3D11_DEPTH_STENCIL_DESC, ppDepthStencilState: ?*?*ID3D11DepthStencilState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDepthStencilState(@ptrCast(self), pDepthStencilDesc, ppDepthStencilState);
            }
            pub inline fn CreateRasterizerState(self: *T, pRasterizerDesc: *const D3D11_RASTERIZER_DESC, ppRasterizerState: ?*?*ID3D11RasterizerState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateRasterizerState(@ptrCast(self), pRasterizerDesc, ppRasterizerState);
            }
            pub inline fn CreateSamplerState(self: *T, pSamplerDesc: *const D3D11_SAMPLER_DESC, ppSamplerState: ?*?*ID3D11SamplerState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateSamplerState(@ptrCast(self), pSamplerDesc, ppSamplerState);
            }
            pub inline fn CreateQuery(self: *T, pQueryDesc: *const D3D11_QUERY_DESC, ppQuery: ?*?*ID3D11Query) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateQuery(@ptrCast(self), pQueryDesc, ppQuery);
            }
            pub inline fn CreatePredicate(self: *T, pPredicateDesc: *const D3D11_QUERY_DESC, ppPredicate: ?*?*ID3D11Predicate) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreatePredicate(@ptrCast(self), pPredicateDesc, ppPredicate);
            }
            pub inline fn CreateCounter(self: *T, pCounterDesc: *const D3D11_COUNTER_DESC, ppCounter: ?*?*ID3D11Counter) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateCounter(@ptrCast(self), pCounterDesc, ppCounter);
            }
            pub inline fn CreateDeferredContext(self: *T, ContextFlags: u32, ppDeferredContext: ?*?*ID3D11DeviceContext) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDeferredContext(@ptrCast(self), ContextFlags, ppDeferredContext);
            }
            pub inline fn OpenSharedResource(self: *T, hResource: ?HANDLE, ReturnedInterface: *const GUID, ppResource: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).OpenSharedResource(@ptrCast(self), hResource, ReturnedInterface, ppResource);
            }
            pub inline fn CheckFormatSupport(self: *T, Format: dxgi.DXGI_FORMAT, pFormatSupport: ?*u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckFormatSupport(@ptrCast(self), Format, pFormatSupport);
            }
            pub inline fn CheckMultisampleQualityLevels(self: *T, Format: dxgi.DXGI_FORMAT, SampleCount: u32, pNumQualityLevels: ?*u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckMultisampleQualityLevels(@ptrCast(self), Format, SampleCount, pNumQualityLevels);
            }
            pub inline fn CheckCounterInfo(self: *T, pCounterInfo: ?*D3D11_COUNTER_INFO) void {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckCounterInfo(@ptrCast(self), pCounterInfo);
            }
            pub inline fn CheckCounter(self: *T, pDesc: *const D3D11_COUNTER_DESC, pType: ?*D3D11_COUNTER_TYPE, pActiveCounters: ?*u32, szName: ?[*:0]u8, pNameLength: ?*u32, szUnits: ?[*:0]u8, pUnitsLength: ?*u32, szDescription: ?[*:0]u8, pDescriptionLength: ?*u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckCounter(@ptrCast(self), pDesc, pType, pActiveCounters, szName, pNameLength, szUnits, pUnitsLength, szDescription, pDescriptionLength);
            }
            pub inline fn CheckFeatureSupport(self: *T, Feature: D3D11_FEATURE, pFeatureSupportData: ?*anyopaque, FeatureSupportDataSize: u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckFeatureSupport(@ptrCast(self), Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
            pub inline fn GetPrivateData(self: *T, guid: *const GUID, pDataSize: ?*u32, pData: ?*anyopaque) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetPrivateData(@ptrCast(self), guid, pDataSize, pData);
            }
            pub inline fn SetPrivateData(self: *T, guid: *const GUID, DataSize: u32, pData: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).SetPrivateData(@ptrCast(self), guid, DataSize, pData);
            }
            pub inline fn SetPrivateDataInterface(self: *T, guid: *const GUID, pData: ?*IUnknown) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@ptrCast(self), guid, pData);
            }
            pub inline fn GetFeatureLevel(self: *T) D3D_FEATURE_LEVEL {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetFeatureLevel(@ptrCast(self));
            }
            pub inline fn GetCreationFlags(self: *T) u32 {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetCreationFlags(@ptrCast(self));
            }
            pub inline fn GetDeviceRemovedReason(self: *T) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetDeviceRemovedReason(@ptrCast(self));
            }
            pub inline fn GetImmediateContext(self: *T, ppImmediateContext: ?*?*ID3D11DeviceContext) void {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetImmediateContext(@ptrCast(self), ppImmediateContext);
            }
            pub inline fn SetExceptionMode(self: *T, RaiseFlags: u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).SetExceptionMode(@ptrCast(self), RaiseFlags);
            }
            pub inline fn GetExceptionMode(self: *T) u32 {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetExceptionMode(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateBuffer: *const fn (*ID3D11Device, *const D3D11_BUFFER_DESC, *const D3D11_SUBRESOURCE_DATA, **ID3D11Buffer) callconv(WINAPI) HRESULT,
        CreateTexture1D: *const fn (*ID3D11Device, *const D3D11_TEXTURE1D_DESC, *const D3D11_SUBRESOURCE_DATA, **ID3D11Texture1D) callconv(WINAPI) HRESULT,
        CreateTexture2D: *const fn (*ID3D11Device, *const D3D11_TEXTURE2D_DESC, *const D3D11_SUBRESOURCE_DATA, **ID3D11Texture2D) callconv(WINAPI) HRESULT,
        CreateTexture3D: *const fn (*ID3D11Device, *const D3D11_TEXTURE3D_DESC, *const D3D11_SUBRESOURCE_DATA, **ID3D11Texture3D) callconv(WINAPI) HRESULT,
        CreateShaderResourceView: *const fn (*ID3D11Device, *ID3D11Resource, *const D3D11_SHADER_RESOURCE_VIEW_DESC, **ID3D11ShaderResourceView) callconv(WINAPI) HRESULT,
        CreateUnorderedAccessView: *const fn (*ID3D11Device, *ID3D11Resource, *const D3D11_UNORDERED_ACCESS_VIEW_DESC, **ID3D11UnorderedAccessView) callconv(WINAPI) HRESULT,
        CreateRenderTargetView: *const fn (*ID3D11Device, *ID3D11Resource, ?*const D3D11_RENDER_TARGET_VIEW_DESC, **ID3D11RenderTargetView) callconv(WINAPI) HRESULT,
        CreateDepthStencilView: *const fn (*ID3D11Device, *ID3D11Resource, *const D3D11_DEPTH_STENCIL_VIEW_DESC, **ID3D11DepthStencilView) callconv(WINAPI) HRESULT,
        CreateInputLayout: *const fn (*ID3D11Device, *const D3D11_INPUT_ELEMENT_DESC, u32, ?*const anyopaque, SIZE_T, **ID3D11InputLayout) callconv(WINAPI) HRESULT,
        CreateVertexShader: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *ID3D11ClassLinkage, **ID3D11VertexShader) callconv(WINAPI) HRESULT,
        CreateGeometryShader: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *ID3D11ClassLinkage, **ID3D11GeometryShader) callconv(WINAPI) HRESULT,
        CreateGeometryShaderWithStreamOutput: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *const D3D11_SO_DECLARATION_ENTRY, u32, *const u32, u32, u32, *ID3D11ClassLinkage, **ID3D11GeometryShader) callconv(WINAPI) HRESULT,
        CreatePixelShader: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *ID3D11ClassLinkage, **ID3D11PixelShader) callconv(WINAPI) HRESULT,
        CreateHullShader: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *ID3D11ClassLinkage, **ID3D11HullShader) callconv(WINAPI) HRESULT,
        CreateDomainShader: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *ID3D11ClassLinkage, **ID3D11DomainShader) callconv(WINAPI) HRESULT,
        CreateComputeShader: *const fn (*ID3D11Device, ?*const anyopaque, SIZE_T, *ID3D11ClassLinkage, **ID3D11ComputeShader) callconv(WINAPI) HRESULT,
        CreateClassLinkage: *const fn (*ID3D11Device, **ID3D11ClassLinkage) callconv(WINAPI) HRESULT,
        CreateBlendState: *const fn (*ID3D11Device, *const D3D11_BLEND_DESC, **ID3D11BlendState) callconv(WINAPI) HRESULT,
        CreateDepthStencilState: *const fn (*ID3D11Device, *const D3D11_DEPTH_STENCIL_DESC, **ID3D11DepthStencilState) callconv(WINAPI) HRESULT,
        CreateRasterizerState: *const fn (*ID3D11Device, *const D3D11_RASTERIZER_DESC, **ID3D11RasterizerState) callconv(WINAPI) HRESULT,
        CreateSamplerState: *const fn (*ID3D11Device, *const D3D11_SAMPLER_DESC, **ID3D11SamplerState) callconv(WINAPI) HRESULT,
        CreateQuery: *const fn (*ID3D11Device, *const D3D11_QUERY_DESC, **ID3D11Query) callconv(WINAPI) HRESULT,
        CreatePredicate: *const fn (*ID3D11Device, *const D3D11_QUERY_DESC, **ID3D11Predicate) callconv(WINAPI) HRESULT,
        CreateCounter: *const fn (*ID3D11Device, *const D3D11_COUNTER_DESC, **ID3D11Counter) callconv(WINAPI) HRESULT,
        CreateDeferredContext: *const fn (*ID3D11Device, u32, **ID3D11DeviceContext) callconv(WINAPI) HRESULT,
        OpenSharedResource: *const fn (*ID3D11Device, HANDLE, *const GUID, *?*anyopaque) callconv(WINAPI) HRESULT,
        CheckFormatSupport: *const fn (*ID3D11Device, dxgi.DXGI_FORMAT, *u32) callconv(WINAPI) HRESULT,
        CheckMultisampleQualityLevels: *const fn (*ID3D11Device, dxgi.DXGI_FORMAT, u32, *u32) callconv(WINAPI) HRESULT,
        CheckCounterInfo: *const fn (*ID3D11Device, *D3D11_COUNTER_INFO) callconv(WINAPI) void,
        CheckCounter: *const fn (*ID3D11Device, *const D3D11_COUNTER_DESC, *D3D11_COUNTER_TYPE, *u32, [*:0]u8, *u32, [*:0]u8, *u32, [*:0]u8, *u32) callconv(WINAPI) HRESULT,
        CheckFeatureSupport: *const fn (*ID3D11Device, D3D11_FEATURE, ?*anyopaque, u32) callconv(WINAPI) HRESULT,
        GetPrivateData: *const fn (*ID3D11Device, *const GUID, *u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        SetPrivateData: *const fn (*ID3D11Device, *const GUID, u32, ?*const anyopaque) callconv(WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (*ID3D11Device, *const GUID, *const IUnknown) callconv(WINAPI) HRESULT,
        GetFeatureLevel: *const fn (*ID3D11Device) callconv(WINAPI) D3D_FEATURE_LEVEL,
        GetCreationFlags: *const fn (*ID3D11Device) callconv(WINAPI) u32,
        GetDeviceRemovedReason: *const fn (*ID3D11Device) callconv(WINAPI) HRESULT,
        GetImmediateContext: *const fn (*ID3D11Device, **ID3D11DeviceContext) callconv(WINAPI) void,
        SetExceptionMode: *const fn (*ID3D11Device, u32) callconv(WINAPI) HRESULT,
        GetExceptionMode: *const fn (*ID3D11Device) callconv(WINAPI) u32,
    };
};

pub const ID3D11DeviceChild = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{1841e5c8-16b0-489b-bcc8-44cfb0d5deae}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;

    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDevice(self: *T, ppDevice: ?*?*ID3D11Device) void {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).GetDevice(@ptrCast(self), ppDevice);
            }
            pub inline fn GetPrivateData(self: *T, guid: *const GUID, pDataSize: ?*u32, pData: ?*anyopaque) HRESULT {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).GetPrivateData(@ptrCast(self), guid, pDataSize, pData);
            }
            pub inline fn SetPrivateData(self: *T, guid: *const GUID, DataSize: u32, pData: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).SetPrivateData(@ptrCast(self), guid, DataSize, pData);
            }
            pub inline fn SetPrivateDataInterface(self: *T, guid: *const GUID, pData: ?*IUnknown) HRESULT {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@ptrCast(self), guid, pData);
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: *const fn (self: *ID3D11DeviceChild, ppDevice: **ID3D11Device) callconv(WINAPI) void,
        GetPrivateData: *const fn (self: *ID3D11DeviceChild, guid: *const GUID, pDataSize: *u32, pData: ?*anyopaque) callconv(WINAPI) HRESULT,
        SetPrivateData: *const fn (self: *ID3D11DeviceChild, guid: *const GUID, DataSize: u32, pData: *const anyopaque) callconv(WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (self: *ID3D11DeviceChild, guid: *const GUID, pData: *const IUnknown) callconv(WINAPI) HRESULT,
    };
};

pub const ID3D11DeviceContext = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{c0bfa96c-e089-44fb-8eaf-26f8796190da}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const VSSetConstantBuffers = ID3D11DeviceContext.Methods(@This()).VSSetConstantBuffers;
    pub const PSSetShaderResources = ID3D11DeviceContext.Methods(@This()).PSSetShaderResources;
    pub const PSSetShader = ID3D11DeviceContext.Methods(@This()).PSSetShader;
    pub const PSSetSamplers = ID3D11DeviceContext.Methods(@This()).PSSetSamplers;
    pub const VSSetShader = ID3D11DeviceContext.Methods(@This()).VSSetShader;
    pub const DrawIndexed = ID3D11DeviceContext.Methods(@This()).DrawIndexed;
    pub const Draw = ID3D11DeviceContext.Methods(@This()).Draw;
    pub const Map = ID3D11DeviceContext.Methods(@This()).Map;
    pub const Unmap = ID3D11DeviceContext.Methods(@This()).Unmap;
    pub const PSSetConstantBuffers = ID3D11DeviceContext.Methods(@This()).PSSetConstantBuffers;
    pub const IASetInputLayout = ID3D11DeviceContext.Methods(@This()).IASetInputLayout;
    pub const IASetVertexBuffers = ID3D11DeviceContext.Methods(@This()).IASetVertexBuffers;
    pub const IASetIndexBuffer = ID3D11DeviceContext.Methods(@This()).IASetIndexBuffer;
    pub const DrawIndexedInstanced = ID3D11DeviceContext.Methods(@This()).DrawIndexedInstanced;
    pub const DrawInstanced = ID3D11DeviceContext.Methods(@This()).DrawInstanced;
    pub const GSSetConstantBuffers = ID3D11DeviceContext.Methods(@This()).GSSetConstantBuffers;
    pub const GSSetShader = ID3D11DeviceContext.Methods(@This()).GSSetShader;
    pub const IASetPrimitiveTopology = ID3D11DeviceContext.Methods(@This()).IASetPrimitiveTopology;
    pub const VSSetShaderResources = ID3D11DeviceContext.Methods(@This()).VSSetShaderResources;
    pub const VSSetSamplers = ID3D11DeviceContext.Methods(@This()).VSSetSamplers;
    pub const Begin = ID3D11DeviceContext.Methods(@This()).Begin;
    pub const End = ID3D11DeviceContext.Methods(@This()).End;
    pub const GetData = ID3D11DeviceContext.Methods(@This()).GetData;
    pub const SetPredication = ID3D11DeviceContext.Methods(@This()).SetPredication;
    pub const GSSetShaderResources = ID3D11DeviceContext.Methods(@This()).GSSetShaderResources;
    pub const GSSetSamplers = ID3D11DeviceContext.Methods(@This()).GSSetSamplers;
    pub const OMSetRenderTargets = ID3D11DeviceContext.Methods(@This()).OMSetRenderTargets;
    pub const OMSetRenderTargetsAndUnorderedAccessViews = ID3D11DeviceContext.Methods(@This()).OMSetRenderTargetsAndUnorderedAccessViews;
    pub const OMSetBlendState = ID3D11DeviceContext.Methods(@This()).OMSetBlendState;
    pub const OMSetDepthStencilState = ID3D11DeviceContext.Methods(@This()).OMSetDepthStencilState;
    pub const SOSetTargets = ID3D11DeviceContext.Methods(@This()).SOSetTargets;
    pub const DrawAuto = ID3D11DeviceContext.Methods(@This()).DrawAuto;
    pub const DrawIndexedInstancedIndirect = ID3D11DeviceContext.Methods(@This()).DrawIndexedInstancedIndirect;
    pub const DrawInstancedIndirect = ID3D11DeviceContext.Methods(@This()).DrawInstancedIndirect;
    pub const Dispatch = ID3D11DeviceContext.Methods(@This()).Dispatch;
    pub const DispatchIndirect = ID3D11DeviceContext.Methods(@This()).DispatchIndirect;
    pub const RSSetState = ID3D11DeviceContext.Methods(@This()).RSSetState;
    pub const RSSetViewports = ID3D11DeviceContext.Methods(@This()).RSSetViewports;
    pub const RSSetScissorRects = ID3D11DeviceContext.Methods(@This()).RSSetScissorRects;
    pub const CopySubresourceRegion = ID3D11DeviceContext.Methods(@This()).CopySubresourceRegion;
    pub const CopyResource = ID3D11DeviceContext.Methods(@This()).CopyResource;
    pub const UpdateSubresource = ID3D11DeviceContext.Methods(@This()).UpdateSubresource;
    pub const CopyStructureCount = ID3D11DeviceContext.Methods(@This()).CopyStructureCount;
    pub const ClearRenderTargetView = ID3D11DeviceContext.Methods(@This()).ClearRenderTargetView;
    pub const ClearUnorderedAccessViewUint = ID3D11DeviceContext.Methods(@This()).ClearUnorderedAccessViewUint;
    pub const ClearUnorderedAccessViewFloat = ID3D11DeviceContext.Methods(@This()).ClearUnorderedAccessViewFloat;
    pub const ClearDepthStencilView = ID3D11DeviceContext.Methods(@This()).ClearDepthStencilView;
    pub const GenerateMips = ID3D11DeviceContext.Methods(@This()).GenerateMips;
    pub const SetResourceMinLOD = ID3D11DeviceContext.Methods(@This()).SetResourceMinLOD;
    pub const GetResourceMinLOD = ID3D11DeviceContext.Methods(@This()).GetResourceMinLOD;
    pub const ResolveSubresource = ID3D11DeviceContext.Methods(@This()).ResolveSubresource;
    pub const ExecuteCommandList = ID3D11DeviceContext.Methods(@This()).ExecuteCommandList;
    pub const HSSetShaderResources = ID3D11DeviceContext.Methods(@This()).HSSetShaderResources;
    pub const HSSetShader = ID3D11DeviceContext.Methods(@This()).HSSetShader;
    pub const HSSetSamplers = ID3D11DeviceContext.Methods(@This()).HSSetSamplers;
    pub const HSSetConstantBuffers = ID3D11DeviceContext.Methods(@This()).HSSetConstantBuffers;
    pub const DSSetShaderResources = ID3D11DeviceContext.Methods(@This()).DSSetShaderResources;
    pub const DSSetShader = ID3D11DeviceContext.Methods(@This()).DSSetShader;
    pub const DSSetSamplers = ID3D11DeviceContext.Methods(@This()).DSSetSamplers;
    pub const DSSetConstantBuffers = ID3D11DeviceContext.Methods(@This()).DSSetConstantBuffers;
    pub const CSSetShaderResources = ID3D11DeviceContext.Methods(@This()).CSSetShaderResources;
    pub const CSSetUnorderedAccessViews = ID3D11DeviceContext.Methods(@This()).CSSetUnorderedAccessViews;
    pub const CSSetShader = ID3D11DeviceContext.Methods(@This()).CSSetShader;
    pub const CSSetSamplers = ID3D11DeviceContext.Methods(@This()).CSSetSamplers;
    pub const CSSetConstantBuffers = ID3D11DeviceContext.Methods(@This()).CSSetConstantBuffers;
    pub const VSGetConstantBuffers = ID3D11DeviceContext.Methods(@This()).VSGetConstantBuffers;
    pub const PSGetShaderResources = ID3D11DeviceContext.Methods(@This()).PSGetShaderResources;
    pub const PSGetShader = ID3D11DeviceContext.Methods(@This()).PSGetShader;
    pub const PSGetSamplers = ID3D11DeviceContext.Methods(@This()).PSGetSamplers;
    pub const VSGetShader = ID3D11DeviceContext.Methods(@This()).VSGetShader;
    pub const PSGetConstantBuffers = ID3D11DeviceContext.Methods(@This()).PSGetConstantBuffers;
    pub const IAGetInputLayout = ID3D11DeviceContext.Methods(@This()).IAGetInputLayout;
    pub const IAGetVertexBuffers = ID3D11DeviceContext.Methods(@This()).IAGetVertexBuffers;
    pub const IAGetIndexBuffer = ID3D11DeviceContext.Methods(@This()).IAGetIndexBuffer;
    pub const GSGetConstantBuffers = ID3D11DeviceContext.Methods(@This()).GSGetConstantBuffers;
    pub const GSGetShader = ID3D11DeviceContext.Methods(@This()).GSGetShader;
    pub const IAGetPrimitiveTopology = ID3D11DeviceContext.Methods(@This()).IAGetPrimitiveTopology;
    pub const VSGetShaderResources = ID3D11DeviceContext.Methods(@This()).VSGetShaderResources;
    pub const VSGetSamplers = ID3D11DeviceContext.Methods(@This()).VSGetSamplers;
    pub const GetPredication = ID3D11DeviceContext.Methods(@This()).GetPredication;
    pub const GSGetShaderResources = ID3D11DeviceContext.Methods(@This()).GSGetShaderResources;
    pub const GSGetSamplers = ID3D11DeviceContext.Methods(@This()).GSGetSamplers;
    pub const OMGetRenderTargets = ID3D11DeviceContext.Methods(@This()).OMGetRenderTargets;
    pub const OMGetRenderTargetsAndUnorderedAccessViews = ID3D11DeviceContext.Methods(@This()).OMGetRenderTargetsAndUnorderedAccessViews;
    pub const OMGetBlendState = ID3D11DeviceContext.Methods(@This()).OMGetBlendState;
    pub const OMGetDepthStencilState = ID3D11DeviceContext.Methods(@This()).OMGetDepthStencilState;
    pub const SOGetTargets = ID3D11DeviceContext.Methods(@This()).SOGetTargets;
    pub const RSGetState = ID3D11DeviceContext.Methods(@This()).RSGetState;
    pub const RSGetViewports = ID3D11DeviceContext.Methods(@This()).RSGetViewports;
    pub const RSGetScissorRects = ID3D11DeviceContext.Methods(@This()).RSGetScissorRects;
    pub const HSGetShaderResources = ID3D11DeviceContext.Methods(@This()).HSGetShaderResources;
    pub const HSGetShader = ID3D11DeviceContext.Methods(@This()).HSGetShader;
    pub const HSGetSamplers = ID3D11DeviceContext.Methods(@This()).HSGetSamplers;
    pub const HSGetConstantBuffers = ID3D11DeviceContext.Methods(@This()).HSGetConstantBuffers;
    pub const DSGetShaderResources = ID3D11DeviceContext.Methods(@This()).DSGetShaderResources;
    pub const DSGetShader = ID3D11DeviceContext.Methods(@This()).DSGetShader;
    pub const DSGetSamplers = ID3D11DeviceContext.Methods(@This()).DSGetSamplers;
    pub const DSGetConstantBuffers = ID3D11DeviceContext.Methods(@This()).DSGetConstantBuffers;
    pub const CSGetShaderResources = ID3D11DeviceContext.Methods(@This()).CSGetShaderResources;
    pub const CSGetUnorderedAccessViews = ID3D11DeviceContext.Methods(@This()).CSGetUnorderedAccessViews;
    pub const CSGetShader = ID3D11DeviceContext.Methods(@This()).CSGetShader;
    pub const CSGetSamplers = ID3D11DeviceContext.Methods(@This()).CSGetSamplers;
    pub const CSGetConstantBuffers = ID3D11DeviceContext.Methods(@This()).CSGetConstantBuffers;
    pub const ClearState = ID3D11DeviceContext.Methods(@This()).ClearState;
    pub const Flush = ID3D11DeviceContext.Methods(@This()).Flush;
    pub const GetType = ID3D11DeviceContext.Methods(@This()).GetType;
    pub const GetContextFlags = ID3D11DeviceContext.Methods(@This()).GetContextFlags;
    pub const FinishCommandList = ID3D11DeviceContext.Methods(@This()).FinishCommandList;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn VSSetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn PSSetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn PSSetShader(self: *T, pPixelShader: ?*ID3D11PixelShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, NumClassInstances: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetShader(@ptrCast(self), pPixelShader, ppClassInstances, NumClassInstances);
            }
            pub inline fn PSSetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn VSSetShader(self: *T, pVertexShader: ?*ID3D11VertexShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, NumClassInstances: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetShader(@ptrCast(self), pVertexShader, ppClassInstances, NumClassInstances);
            }
            pub inline fn DrawIndexed(self: *T, IndexCount: u32, StartIndexLocation: u32, BaseVertexLocation: i32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawIndexed(@ptrCast(self), IndexCount, StartIndexLocation, BaseVertexLocation);
            }
            pub inline fn Draw(self: *T, VertexCount: u32, StartVertexLocation: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Draw(@ptrCast(self), VertexCount, StartVertexLocation);
            }
            pub inline fn Map(self: *T, pResource: ?*ID3D11Resource, Subresource: u32, MapType: D3D11_MAP, MapFlags: u32, pMappedResource: ?*D3D11_MAPPED_SUBRESOURCE) HRESULT {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Map(@ptrCast(self), pResource, Subresource, MapType, MapFlags, pMappedResource);
            }
            pub inline fn Unmap(self: *T, pResource: ?*ID3D11Resource, Subresource: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Unmap(@ptrCast(self), pResource, Subresource);
            }
            pub inline fn PSSetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn IASetInputLayout(self: *T, pInputLayout: ?*ID3D11InputLayout) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetInputLayout(@ptrCast(self), pInputLayout);
            }
            pub inline fn IASetVertexBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppVertexBuffers: ?[*]?*ID3D11Buffer, pStrides: ?[*]const u32, pOffsets: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetVertexBuffers(@ptrCast(self), StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }
            pub inline fn IASetIndexBuffer(self: *T, pIndexBuffer: ?*ID3D11Buffer, Format: dxgi.DXGI_FORMAT, Offset: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetIndexBuffer(@ptrCast(self), pIndexBuffer, Format, Offset);
            }
            pub inline fn DrawIndexedInstanced(self: *T, IndexCountPerInstance: u32, InstanceCount: u32, StartIndexLocation: u32, BaseVertexLocation: i32, StartInstanceLocation: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawIndexedInstanced(@ptrCast(self), IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
            pub inline fn DrawInstanced(self: *T, VertexCountPerInstance: u32, InstanceCount: u32, StartVertexLocation: u32, StartInstanceLocation: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawInstanced(@ptrCast(self), VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
            pub inline fn GSSetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn GSSetShader(self: *T, pShader: ?*ID3D11GeometryShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, NumClassInstances: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetShader(@ptrCast(self), pShader, ppClassInstances, NumClassInstances);
            }
            pub inline fn IASetPrimitiveTopology(self: *T, Topology: D3D_PRIMITIVE_TOPOLOGY) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetPrimitiveTopology(@ptrCast(self), Topology);
            }
            pub inline fn VSSetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn VSSetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn Begin(self: *T, pAsync: ?*ID3D11Asynchronous) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Begin(@ptrCast(self), pAsync);
            }
            pub inline fn End(self: *T, pAsync: ?*ID3D11Asynchronous) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).End(@ptrCast(self), pAsync);
            }
            pub inline fn GetData(self: *T, pAsync: ?*ID3D11Asynchronous, pData: ?*anyopaque, DataSize: u32, GetDataFlags: u32) HRESULT {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetData(@ptrCast(self), pAsync, pData, DataSize, GetDataFlags);
            }
            pub inline fn SetPredication(self: *T, pPredicate: ?*ID3D11Predicate, PredicateValue: BOOL) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SetPredication(@ptrCast(self), pPredicate, PredicateValue);
            }
            pub inline fn GSSetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn GSSetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn OMSetRenderTargets(self: *T, NumViews: u32, ppRenderTargetViews: ?*const *ID3D11RenderTargetView, pDepthStencilView: ?*ID3D11DepthStencilView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetRenderTargets(@ptrCast(self), NumViews, ppRenderTargetViews, pDepthStencilView);
            }
            pub inline fn OMSetRenderTargetsAndUnorderedAccessViews(self: *T, NumRTVs: u32, ppRenderTargetViews: ?[*]?*ID3D11RenderTargetView, pDepthStencilView: ?*ID3D11DepthStencilView, UAVStartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: ?[*]?*ID3D11UnorderedAccessView, pUAVInitialCounts: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetRenderTargetsAndUnorderedAccessViews(@ptrCast(self), NumRTVs, ppRenderTargetViews, pDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
            }
            pub inline fn OMSetBlendState(self: *T, pBlendState: ?*ID3D11BlendState, BlendFactor: *const f32, SampleMask: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetBlendState(@ptrCast(self), pBlendState, BlendFactor, SampleMask);
            }
            pub inline fn OMSetDepthStencilState(self: *T, pDepthStencilState: ?*ID3D11DepthStencilState, StencilRef: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetDepthStencilState(@ptrCast(self), pDepthStencilState, StencilRef);
            }
            pub inline fn SOSetTargets(self: *T, NumBuffers: u32, ppSOTargets: ?[*]?*ID3D11Buffer, pOffsets: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SOSetTargets(@ptrCast(self), NumBuffers, ppSOTargets, pOffsets);
            }
            pub inline fn DrawAuto(self: *T) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawAuto(@ptrCast(self));
            }
            pub inline fn DrawIndexedInstancedIndirect(self: *T, pBufferForArgs: ?*ID3D11Buffer, AlignedByteOffsetForArgs: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawIndexedInstancedIndirect(@ptrCast(self), pBufferForArgs, AlignedByteOffsetForArgs);
            }
            pub inline fn DrawInstancedIndirect(self: *T, pBufferForArgs: ?*ID3D11Buffer, AlignedByteOffsetForArgs: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawInstancedIndirect(@ptrCast(self), pBufferForArgs, AlignedByteOffsetForArgs);
            }
            pub inline fn Dispatch(self: *T, ThreadGroupCountX: u32, ThreadGroupCountY: u32, ThreadGroupCountZ: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Dispatch(@ptrCast(self), ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
            pub inline fn DispatchIndirect(self: *T, pBufferForArgs: ?*ID3D11Buffer, AlignedByteOffsetForArgs: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DispatchIndirect(@ptrCast(self), pBufferForArgs, AlignedByteOffsetForArgs);
            }
            pub inline fn RSSetState(self: *T, pRasterizerState: ?*ID3D11RasterizerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSSetState(@ptrCast(self), pRasterizerState);
            }
            pub inline fn RSSetViewports(self: *T, NumViewports: u32, pViewports: ?[*]const D3D11_VIEWPORT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSSetViewports(@ptrCast(self), NumViewports, pViewports);
            }
            pub inline fn RSSetScissorRects(self: *T, NumRects: u32, pRects: ?[*]const RECT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSSetScissorRects(@ptrCast(self), NumRects, pRects);
            }
            pub inline fn CopySubresourceRegion(self: *T, pDstResource: ?*ID3D11Resource, DstSubresource: u32, DstX: u32, DstY: u32, DstZ: u32, pSrcResource: ?*ID3D11Resource, SrcSubresource: u32, pSrcBox: *const D3D11_BOX) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CopySubresourceRegion(@ptrCast(self), pDstResource, DstSubresource, DstX, DstY, DstZ, pSrcResource, SrcSubresource, pSrcBox);
            }
            pub inline fn CopyResource(self: *T, pDstResource: ?*ID3D11Resource, pSrcResource: ?*ID3D11Resource) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CopyResource(@ptrCast(self), pDstResource, pSrcResource);
            }
            pub inline fn UpdateSubresource(self: *T, pDstResource: ?*ID3D11Resource, DstSubresource: u32, pDstBox: *const D3D11_BOX, pSrcData: ?*const anyopaque, SrcRowPitch: u32, SrcDepthPitch: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).UpdateSubresource(@ptrCast(self), pDstResource, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }
            pub inline fn CopyStructureCount(self: *T, pDstBuffer: ?*ID3D11Buffer, DstAlignedByteOffset: u32, pSrcView: ?*ID3D11UnorderedAccessView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CopyStructureCount(@ptrCast(self), pDstBuffer, DstAlignedByteOffset, pSrcView);
            }
            pub inline fn ClearRenderTargetView(self: *T, pRenderTargetView: *ID3D11RenderTargetView, ColorRGBA: [*]const f32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearRenderTargetView(@ptrCast(self), pRenderTargetView, ColorRGBA);
            }
            pub inline fn ClearUnorderedAccessViewUint(self: *T, pUnorderedAccessView: ?*ID3D11UnorderedAccessView, Values: *const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearUnorderedAccessViewUint(@ptrCast(self), pUnorderedAccessView, Values);
            }
            pub inline fn ClearUnorderedAccessViewFloat(self: *T, pUnorderedAccessView: ?*ID3D11UnorderedAccessView, Values: *const f32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearUnorderedAccessViewFloat(@ptrCast(self), pUnorderedAccessView, Values);
            }
            pub inline fn ClearDepthStencilView(self: *T, pDepthStencilView: ?*ID3D11DepthStencilView, ClearFlags: u32, Depth: f32, Stencil: u8) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearDepthStencilView(@ptrCast(self), pDepthStencilView, ClearFlags, Depth, Stencil);
            }
            pub inline fn GenerateMips(self: *T, pShaderResourceView: ?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GenerateMips(@ptrCast(self), pShaderResourceView);
            }
            pub inline fn SetResourceMinLOD(self: *T, pResource: ?*ID3D11Resource, MinLOD: f32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SetResourceMinLOD(@ptrCast(self), pResource, MinLOD);
            }
            pub inline fn GetResourceMinLOD(self: *T, pResource: ?*ID3D11Resource) f32 {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetResourceMinLOD(@ptrCast(self), pResource);
            }
            pub inline fn ResolveSubresource(self: *T, pDstResource: ?*ID3D11Resource, DstSubresource: u32, pSrcResource: ?*ID3D11Resource, SrcSubresource: u32, Format: dxgi.DXGI_FORMAT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ResolveSubresource(@ptrCast(self), pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
            pub inline fn ExecuteCommandList(self: *T, pCommandList: ?*ID3D11CommandList, RestoreContextState: BOOL) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ExecuteCommandList(@ptrCast(self), pCommandList, RestoreContextState);
            }
            pub inline fn HSSetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn HSSetShader(self: *T, pHullShader: ?*ID3D11HullShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, NumClassInstances: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetShader(@ptrCast(self), pHullShader, ppClassInstances, NumClassInstances);
            }
            pub inline fn HSSetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn HSSetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn DSSetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn DSSetShader(self: *T, pDomainShader: ?*ID3D11DomainShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, NumClassInstances: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetShader(@ptrCast(self), pDomainShader, ppClassInstances, NumClassInstances);
            }
            pub inline fn DSSetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn DSSetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn CSSetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn CSSetUnorderedAccessViews(self: *T, StartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: ?[*]?*ID3D11UnorderedAccessView, pUAVInitialCounts: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetUnorderedAccessViews(@ptrCast(self), StartSlot, NumUAVs, ppUnorderedAccessViews, pUAVInitialCounts);
            }
            pub inline fn CSSetShader(self: *T, pComputeShader: ?*ID3D11ComputeShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, NumClassInstances: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetShader(@ptrCast(self), pComputeShader, ppClassInstances, NumClassInstances);
            }
            pub inline fn CSSetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn CSSetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn VSGetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn PSGetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn PSGetShader(self: *T, ppPixelShader: ?*?*ID3D11PixelShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, pNumClassInstances: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetShader(@ptrCast(self), ppPixelShader, ppClassInstances, pNumClassInstances);
            }
            pub inline fn PSGetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn VSGetShader(self: *T, ppVertexShader: ?*?*ID3D11VertexShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, pNumClassInstances: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetShader(@ptrCast(self), ppVertexShader, ppClassInstances, pNumClassInstances);
            }
            pub inline fn PSGetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn IAGetInputLayout(self: *T, ppInputLayout: ?*?*ID3D11InputLayout) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetInputLayout(@ptrCast(self), ppInputLayout);
            }
            pub inline fn IAGetVertexBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppVertexBuffers: ?[*]?*ID3D11Buffer, pStrides: ?[*]u32, pOffsets: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetVertexBuffers(@ptrCast(self), StartSlot, NumBuffers, ppVertexBuffers, pStrides, pOffsets);
            }
            pub inline fn IAGetIndexBuffer(self: *T, pIndexBuffer: ?*?*ID3D11Buffer, Format: ?*dxgi.DXGI_FORMAT, Offset: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetIndexBuffer(@ptrCast(self), pIndexBuffer, Format, Offset);
            }
            pub inline fn GSGetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn GSGetShader(self: *T, ppGeometryShader: ?*?*ID3D11GeometryShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, pNumClassInstances: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetShader(@ptrCast(self), ppGeometryShader, ppClassInstances, pNumClassInstances);
            }
            pub inline fn IAGetPrimitiveTopology(self: *T, pTopology: ?*D3D_PRIMITIVE_TOPOLOGY) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetPrimitiveTopology(@ptrCast(self), pTopology);
            }
            pub inline fn VSGetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn VSGetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn GetPredication(self: *T, ppPredicate: ?*?*ID3D11Predicate, pPredicateValue: ?*BOOL) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetPredication(@ptrCast(self), ppPredicate, pPredicateValue);
            }
            pub inline fn GSGetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn GSGetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn OMGetRenderTargets(self: *T, NumViews: u32, ppRenderTargetViews: ?[*]?*ID3D11RenderTargetView, ppDepthStencilView: ?*?*ID3D11DepthStencilView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetRenderTargets(@ptrCast(self), NumViews, ppRenderTargetViews, ppDepthStencilView);
            }
            pub inline fn OMGetRenderTargetsAndUnorderedAccessViews(self: *T, NumRTVs: u32, ppRenderTargetViews: ?[*]?*ID3D11RenderTargetView, ppDepthStencilView: ?*?*ID3D11DepthStencilView, UAVStartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: ?[*]?*ID3D11UnorderedAccessView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetRenderTargetsAndUnorderedAccessViews(@ptrCast(self), NumRTVs, ppRenderTargetViews, ppDepthStencilView, UAVStartSlot, NumUAVs, ppUnorderedAccessViews);
            }
            pub inline fn OMGetBlendState(self: *T, ppBlendState: ?*?*ID3D11BlendState, BlendFactor: ?*f32, pSampleMask: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetBlendState(@ptrCast(self), ppBlendState, BlendFactor, pSampleMask);
            }
            pub inline fn OMGetDepthStencilState(self: *T, ppDepthStencilState: ?*?*ID3D11DepthStencilState, pStencilRef: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetDepthStencilState(@ptrCast(self), ppDepthStencilState, pStencilRef);
            }
            pub inline fn SOGetTargets(self: *T, NumBuffers: u32, ppSOTargets: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SOGetTargets(@ptrCast(self), NumBuffers, ppSOTargets);
            }
            pub inline fn RSGetState(self: *T, ppRasterizerState: ?*?*ID3D11RasterizerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSGetState(@ptrCast(self), ppRasterizerState);
            }
            pub inline fn RSGetViewports(self: *T, pNumViewports: ?*u32, pViewports: ?[*]D3D11_VIEWPORT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSGetViewports(@ptrCast(self), pNumViewports, pViewports);
            }
            pub inline fn RSGetScissorRects(self: *T, pNumRects: ?*u32, pRects: ?[*]RECT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSGetScissorRects(@ptrCast(self), pNumRects, pRects);
            }
            pub inline fn HSGetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn HSGetShader(self: *T, ppHullShader: ?*?*ID3D11HullShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, pNumClassInstances: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetShader(@ptrCast(self), ppHullShader, ppClassInstances, pNumClassInstances);
            }
            pub inline fn HSGetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn HSGetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn DSGetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn DSGetShader(self: *T, ppDomainShader: ?*?*ID3D11DomainShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, pNumClassInstances: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetShader(@ptrCast(self), ppDomainShader, ppClassInstances, pNumClassInstances);
            }
            pub inline fn DSGetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn DSGetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn CSGetShaderResources(self: *T, StartSlot: u32, NumViews: u32, ppShaderResourceViews: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetShaderResources(@ptrCast(self), StartSlot, NumViews, ppShaderResourceViews);
            }
            pub inline fn CSGetUnorderedAccessViews(self: *T, StartSlot: u32, NumUAVs: u32, ppUnorderedAccessViews: ?[*]?*ID3D11UnorderedAccessView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetUnorderedAccessViews(@ptrCast(self), StartSlot, NumUAVs, ppUnorderedAccessViews);
            }
            pub inline fn CSGetShader(self: *T, ppComputeShader: ?*?*ID3D11ComputeShader, ppClassInstances: ?[*]?*ID3D11ClassInstance, pNumClassInstances: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetShader(@ptrCast(self), ppComputeShader, ppClassInstances, pNumClassInstances);
            }
            pub inline fn CSGetSamplers(self: *T, StartSlot: u32, NumSamplers: u32, ppSamplers: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetSamplers(@ptrCast(self), StartSlot, NumSamplers, ppSamplers);
            }
            pub inline fn CSGetConstantBuffers(self: *T, StartSlot: u32, NumBuffers: u32, ppConstantBuffers: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetConstantBuffers(@ptrCast(self), StartSlot, NumBuffers, ppConstantBuffers);
            }
            pub inline fn ClearState(self: *T) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearState(@ptrCast(self));
            }
            pub inline fn Flush(self: *T) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Flush(@ptrCast(self));
            }
            pub inline fn GetType(self: *T) D3D11_DEVICE_CONTEXT_TYPE {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetType(@ptrCast(self));
            }
            pub inline fn GetContextFlags(self: *T) u32 {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetContextFlags(@ptrCast(self));
            }
            pub inline fn FinishCommandList(self: *T, RestoreDeferredContextState: BOOL, ppCommandList: ?*?*ID3D11CommandList) HRESULT {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).FinishCommandList(@ptrCast(self), RestoreDeferredContextState, ppCommandList);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        VSSetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer) callconv(WINAPI) void,
        PSSetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11ShaderResourceView) callconv(WINAPI) void,
        PSSetShader: *const fn (*ID3D11DeviceContext, *ID3D11PixelShader, *const *ID3D11ClassInstance, u32) callconv(WINAPI) void,
        PSSetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11SamplerState) callconv(WINAPI) void,
        VSSetShader: *const fn (*ID3D11DeviceContext, *ID3D11VertexShader, *const *ID3D11ClassInstance, u32) callconv(WINAPI) void,
        DrawIndexed: *const fn (*ID3D11DeviceContext, u32, u32, INT) callconv(WINAPI) void,
        Draw: *const fn (*ID3D11DeviceContext, u32, u32) callconv(WINAPI) void,
        Map: *const fn (*ID3D11DeviceContext, *ID3D11Resource, u32, D3D11_MAP, u32, *D3D11_MAPPED_SUBRESOURCE) callconv(WINAPI) HRESULT,
        Unmap: *const fn (*ID3D11DeviceContext, *ID3D11Resource, u32) callconv(WINAPI) void,
        PSSetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer) callconv(WINAPI) void,
        IASetInputLayout: *const fn (*ID3D11DeviceContext, *ID3D11InputLayout) callconv(WINAPI) void,
        IASetVertexBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer, *const u32, *const u32) callconv(WINAPI) void,
        IASetIndexBuffer: *const fn (*ID3D11DeviceContext, *ID3D11Buffer, dxgi.DXGI_FORMAT, u32) callconv(WINAPI) void,
        DrawIndexedInstanced: *const fn (*ID3D11DeviceContext, u32, u32, u32, INT, u32) callconv(WINAPI) void,
        DrawInstanced: *const fn (*ID3D11DeviceContext, u32, u32, u32, u32) callconv(WINAPI) void,
        GSSetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer) callconv(WINAPI) void,
        GSSetShader: *const fn (*ID3D11DeviceContext, *ID3D11GeometryShader, *const *ID3D11ClassInstance, u32) callconv(WINAPI) void,
        IASetPrimitiveTopology: *const fn (*ID3D11DeviceContext, D3D11_PRIMITIVE_TOPOLOGY) callconv(WINAPI) void,
        VSSetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11ShaderResourceView) callconv(WINAPI) void,
        VSSetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11SamplerState) callconv(WINAPI) void,
        Begin: *const fn (*ID3D11DeviceContext, *ID3D11Asynchronous) callconv(WINAPI) void,
        End: *const fn (*ID3D11DeviceContext, *ID3D11Asynchronous) callconv(WINAPI) void,
        GetData: *const fn (*ID3D11DeviceContext, *ID3D11Asynchronous, ?*anyopaque, u32, u32) callconv(WINAPI) HRESULT,
        SetPredication: *const fn (*ID3D11DeviceContext, *ID3D11Predicate, WINBOOL) callconv(WINAPI) void,
        GSSetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11ShaderResourceView) callconv(WINAPI) void,
        GSSetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11SamplerState) callconv(WINAPI) void,
        OMSetRenderTargets: *const fn (*ID3D11DeviceContext, u32, ?*const *ID3D11RenderTargetView, ?*ID3D11DepthStencilView) callconv(WINAPI) void,
        OMSetRenderTargetsAndUnorderedAccessViews: *const fn (*ID3D11DeviceContext, u32, *const *ID3D11RenderTargetView, *ID3D11DepthStencilView, u32, u32, *const *ID3D11UnorderedAccessView, *const u32) callconv(WINAPI) void,
        OMSetBlendState: *const fn (*ID3D11DeviceContext, *ID3D11BlendState, *const f32, u32) callconv(WINAPI) void,
        OMSetDepthStencilState: *const fn (*ID3D11DeviceContext, *ID3D11DepthStencilState, u32) callconv(WINAPI) void,
        SOSetTargets: *const fn (*ID3D11DeviceContext, u32, *const *ID3D11Buffer, *const u32) callconv(WINAPI) void,
        DrawAuto: *const fn (*ID3D11DeviceContext) callconv(WINAPI) void,
        DrawIndexedInstancedIndirect: *const fn (*ID3D11DeviceContext, *ID3D11Buffer, u32) callconv(WINAPI) void,
        DrawInstancedIndirect: *const fn (*ID3D11DeviceContext, *ID3D11Buffer, u32) callconv(WINAPI) void,
        Dispatch: *const fn (*ID3D11DeviceContext, u32, u32, u32) callconv(WINAPI) void,
        DispatchIndirect: *const fn (*ID3D11DeviceContext, *ID3D11Buffer, u32) callconv(WINAPI) void,
        RSSetState: *const fn (*ID3D11DeviceContext, *ID3D11RasterizerState) callconv(WINAPI) void,
        RSSetViewports: *const fn (*ID3D11DeviceContext, u32, ?[*]const D3D11_VIEWPORT) callconv(WINAPI) void,
        RSSetScissorRects: *const fn (*ID3D11DeviceContext, u32, *const D3D11_RECT) callconv(WINAPI) void,
        CopySubresourceRegion: *const fn (*ID3D11DeviceContext, *ID3D11Resource, u32, u32, u32, u32, *ID3D11Resource, u32, *const D3D11_BOX) callconv(WINAPI) void,
        CopyResource: *const fn (*ID3D11DeviceContext, *ID3D11Resource, *ID3D11Resource) callconv(WINAPI) void,
        UpdateSubresource: *const fn (*ID3D11DeviceContext, *ID3D11Resource, u32, *const D3D11_BOX, ?*const anyopaque, u32, u32) callconv(WINAPI) void,
        CopyStructureCount: *const fn (*ID3D11DeviceContext, *ID3D11Buffer, u32, *ID3D11UnorderedAccessView) callconv(WINAPI) void,
        ClearRenderTargetView: *const fn (*ID3D11DeviceContext, *ID3D11RenderTargetView, [*]const f32) callconv(WINAPI) void,
        ClearUnorderedAccessViewUint: *const fn (*ID3D11DeviceContext, *ID3D11UnorderedAccessView, *const u32) callconv(WINAPI) void,
        ClearUnorderedAccessViewFloat: *const fn (*ID3D11DeviceContext, *ID3D11UnorderedAccessView, *const f32) callconv(WINAPI) void,
        ClearDepthStencilView: *const fn (*ID3D11DeviceContext, *ID3D11DepthStencilView, u32, f32, u8) callconv(WINAPI) void,
        GenerateMips: *const fn (*ID3D11DeviceContext, *ID3D11ShaderResourceView) callconv(WINAPI) void,
        SetResourceMinLOD: *const fn (*ID3D11DeviceContext, *ID3D11Resource, f32) callconv(WINAPI) void,
        GetResourceMinLOD: *const fn (*ID3D11DeviceContext, *ID3D11Resource) callconv(WINAPI) f32,
        ResolveSubresource: *const fn (*ID3D11DeviceContext, *ID3D11Resource, u32, *ID3D11Resource, u32, dxgi.DXGI_FORMAT) callconv(WINAPI) void,
        ExecuteCommandList: *const fn (*ID3D11DeviceContext, *ID3D11CommandList, WINBOOL) callconv(WINAPI) void,
        HSSetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11ShaderResourceView) callconv(WINAPI) void,
        HSSetShader: *const fn (*ID3D11DeviceContext, *ID3D11HullShader, *const *ID3D11ClassInstance, u32) callconv(WINAPI) void,
        HSSetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11SamplerState) callconv(WINAPI) void,
        HSSetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer) callconv(WINAPI) void,
        DSSetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11ShaderResourceView) callconv(WINAPI) void,
        DSSetShader: *const fn (*ID3D11DeviceContext, *ID3D11DomainShader, *const *ID3D11ClassInstance, u32) callconv(WINAPI) void,
        DSSetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11SamplerState) callconv(WINAPI) void,
        DSSetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer) callconv(WINAPI) void,
        CSSetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11ShaderResourceView) callconv(WINAPI) void,
        CSSetUnorderedAccessViews: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11UnorderedAccessView, *const u32) callconv(WINAPI) void,
        CSSetShader: *const fn (*ID3D11DeviceContext, *ID3D11ComputeShader, *const *ID3D11ClassInstance, u32) callconv(WINAPI) void,
        CSSetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11SamplerState) callconv(WINAPI) void,
        CSSetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, *const *ID3D11Buffer) callconv(WINAPI) void,
        VSGetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer) callconv(WINAPI) void,
        PSGetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11ShaderResourceView) callconv(WINAPI) void,
        PSGetShader: *const fn (*ID3D11DeviceContext, **ID3D11PixelShader, **ID3D11ClassInstance, *u32) callconv(WINAPI) void,
        PSGetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11SamplerState) callconv(WINAPI) void,
        VSGetShader: *const fn (*ID3D11DeviceContext, **ID3D11VertexShader, **ID3D11ClassInstance, *u32) callconv(WINAPI) void,
        PSGetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer) callconv(WINAPI) void,
        IAGetInputLayout: *const fn (*ID3D11DeviceContext, **ID3D11InputLayout) callconv(WINAPI) void,
        IAGetVertexBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer, *u32, *u32) callconv(WINAPI) void,
        IAGetIndexBuffer: *const fn (*ID3D11DeviceContext, **ID3D11Buffer, *dxgi.DXGI_FORMAT, *u32) callconv(WINAPI) void,
        GSGetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer) callconv(WINAPI) void,
        GSGetShader: *const fn (*ID3D11DeviceContext, **ID3D11GeometryShader, **ID3D11ClassInstance, *u32) callconv(WINAPI) void,
        IAGetPrimitiveTopology: *const fn (*ID3D11DeviceContext, *D3D11_PRIMITIVE_TOPOLOGY) callconv(WINAPI) void,
        VSGetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11ShaderResourceView) callconv(WINAPI) void,
        VSGetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11SamplerState) callconv(WINAPI) void,
        GetPredication: *const fn (*ID3D11DeviceContext, **ID3D11Predicate, *WINBOOL) callconv(WINAPI) void,
        GSGetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11ShaderResourceView) callconv(WINAPI) void,
        GSGetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11SamplerState) callconv(WINAPI) void,
        OMGetRenderTargets: *const fn (*ID3D11DeviceContext, u32, **ID3D11RenderTargetView, **ID3D11DepthStencilView) callconv(WINAPI) void,
        OMGetRenderTargetsAndUnorderedAccessViews: *const fn (*ID3D11DeviceContext, u32, **ID3D11RenderTargetView, **ID3D11DepthStencilView, u32, u32, **ID3D11UnorderedAccessView) callconv(WINAPI) void,
        OMGetBlendState: *const fn (*ID3D11DeviceContext, **ID3D11BlendState, *f32, *u32) callconv(WINAPI) void,
        OMGetDepthStencilState: *const fn (*ID3D11DeviceContext, **ID3D11DepthStencilState, *u32) callconv(WINAPI) void,
        SOGetTargets: *const fn (*ID3D11DeviceContext, u32, **ID3D11Buffer) callconv(WINAPI) void,
        RSGetState: *const fn (*ID3D11DeviceContext, **ID3D11RasterizerState) callconv(WINAPI) void,
        RSGetViewports: *const fn (*ID3D11DeviceContext, *u32, *D3D11_VIEWPORT) callconv(WINAPI) void,
        RSGetScissorRects: *const fn (*ID3D11DeviceContext, *u32, *D3D11_RECT) callconv(WINAPI) void,
        HSGetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11ShaderResourceView) callconv(WINAPI) void,
        HSGetShader: *const fn (*ID3D11DeviceContext, **ID3D11HullShader, **ID3D11ClassInstance, *u32) callconv(WINAPI) void,
        HSGetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11SamplerState) callconv(WINAPI) void,
        HSGetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer) callconv(WINAPI) void,
        DSGetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11ShaderResourceView) callconv(WINAPI) void,
        DSGetShader: *const fn (*ID3D11DeviceContext, **ID3D11DomainShader, **ID3D11ClassInstance, *u32) callconv(WINAPI) void,
        DSGetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11SamplerState) callconv(WINAPI) void,
        DSGetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer) callconv(WINAPI) void,
        CSGetShaderResources: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11ShaderResourceView) callconv(WINAPI) void,
        CSGetUnorderedAccessViews: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11UnorderedAccessView) callconv(WINAPI) void,
        CSGetShader: *const fn (*ID3D11DeviceContext, **ID3D11ComputeShader, **ID3D11ClassInstance, *u32) callconv(WINAPI) void,
        CSGetSamplers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11SamplerState) callconv(WINAPI) void,
        CSGetConstantBuffers: *const fn (*ID3D11DeviceContext, u32, u32, **ID3D11Buffer) callconv(WINAPI) void,
        ClearState: *const fn (*ID3D11DeviceContext) callconv(WINAPI) void,
        Flush: *const fn (*ID3D11DeviceContext) callconv(WINAPI) void,
        GetType: *const fn (*ID3D11DeviceContext) callconv(WINAPI) D3D11_DEVICE_CONTEXT_TYPE,
        GetContextFlags: *const fn (*ID3D11DeviceContext) callconv(WINAPI) u32,
        FinishCommandList: *const fn (*ID3D11DeviceContext, WINBOOL, **ID3D11CommandList) callconv(WINAPI) HRESULT,
    };
};
pub const ID3D11DomainShader = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{f582c508-0f36-490c-9977-31eece268cfa}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11GeometryShader = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{38325b96-effb-4022-ba02-2e795b70275c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11HullShader = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{8e5c6061-628a-4c8e-8264-bbe45cb3d5dd}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11InfoQueue = extern struct { // IUnknown
    vtable: *VTable,
    pub const IID = GUID.parse("{6543dbb6-1b48-42f5-ab82-e97ec74326f6}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetMessageCountLimit = ID3D11InfoQueue.Methods(@This()).SetMessageCountLimit;
    pub const ClearStoredMessages = ID3D11InfoQueue.Methods(@This()).ClearStoredMessages;
    pub const GetMessageA = ID3D11InfoQueue.Methods(@This()).GetMessageA;
    pub const GetNumMessagesAllowedByStorageFilter = ID3D11InfoQueue.Methods(@This()).GetNumMessagesAllowedByStorageFilter;
    pub const GetNumMessagesDeniedByStorageFilter = ID3D11InfoQueue.Methods(@This()).GetNumMessagesDeniedByStorageFilter;
    pub const GetNumStoredMessages = ID3D11InfoQueue.Methods(@This()).GetNumStoredMessages;
    pub const GetNumStoredMessagesAllowedByRetrievalFilter = ID3D11InfoQueue.Methods(@This()).GetNumStoredMessagesAllowedByRetrievalFilter;
    pub const GetNumMessagesDiscardedByMessageCountLimit = ID3D11InfoQueue.Methods(@This()).GetNumMessagesDiscardedByMessageCountLimit;
    pub const GetMessageCountLimit = ID3D11InfoQueue.Methods(@This()).GetMessageCountLimit;
    pub const AddStorageFilterEntries = ID3D11InfoQueue.Methods(@This()).AddStorageFilterEntries;
    pub const GetStorageFilter = ID3D11InfoQueue.Methods(@This()).GetStorageFilter;
    pub const ClearStorageFilter = ID3D11InfoQueue.Methods(@This()).ClearStorageFilter;
    pub const PushEmptyStorageFilter = ID3D11InfoQueue.Methods(@This()).PushEmptyStorageFilter;
    pub const PushCopyOfStorageFilter = ID3D11InfoQueue.Methods(@This()).PushCopyOfStorageFilter;
    pub const PushStorageFilter = ID3D11InfoQueue.Methods(@This()).PushStorageFilter;
    pub const PopStorageFilter = ID3D11InfoQueue.Methods(@This()).PopStorageFilter;
    pub const GetStorageFilterStackSize = ID3D11InfoQueue.Methods(@This()).GetStorageFilterStackSize;
    pub const AddRetrievalFilterEntries = ID3D11InfoQueue.Methods(@This()).AddRetrievalFilterEntries;
    pub const GetRetrievalFilter = ID3D11InfoQueue.Methods(@This()).GetRetrievalFilter;
    pub const ClearRetrievalFilter = ID3D11InfoQueue.Methods(@This()).ClearRetrievalFilter;
    pub const PushEmptyRetrievalFilter = ID3D11InfoQueue.Methods(@This()).PushEmptyRetrievalFilter;
    pub const PushCopyOfRetrievalFilter = ID3D11InfoQueue.Methods(@This()).PushCopyOfRetrievalFilter;
    pub const PushRetrievalFilter = ID3D11InfoQueue.Methods(@This()).PushRetrievalFilter;
    pub const PopRetrievalFilter = ID3D11InfoQueue.Methods(@This()).PopRetrievalFilter;
    pub const GetRetrievalFilterStackSize = ID3D11InfoQueue.Methods(@This()).GetRetrievalFilterStackSize;
    pub const AddMessage = ID3D11InfoQueue.Methods(@This()).AddMessage;
    pub const AddApplicationMessage = ID3D11InfoQueue.Methods(@This()).AddApplicationMessage;
    pub const SetBreakOnCategory = ID3D11InfoQueue.Methods(@This()).SetBreakOnCategory;
    pub const SetBreakOnSeverity = ID3D11InfoQueue.Methods(@This()).SetBreakOnSeverity;
    pub const SetBreakOnID = ID3D11InfoQueue.Methods(@This()).SetBreakOnID;
    pub const GetBreakOnCategory = ID3D11InfoQueue.Methods(@This()).GetBreakOnCategory;
    pub const GetBreakOnSeverity = ID3D11InfoQueue.Methods(@This()).GetBreakOnSeverity;
    pub const GetBreakOnID = ID3D11InfoQueue.Methods(@This()).GetBreakOnID;
    pub const SetMuteDebugOutput = ID3D11InfoQueue.Methods(@This()).SetMuteDebugOutput;
    pub const GetMuteDebugOutput = ID3D11InfoQueue.Methods(@This()).GetMuteDebugOutput;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn SetMessageCountLimit(self: *T, MessageCountLimit: u64) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetMessageCountLimit(@ptrCast(self), MessageCountLimit);
            }
            pub inline fn ClearStoredMessages(self: *T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).ClearStoredMessages(@ptrCast(self));
            }
            pub inline fn GetMessage(self: *T, MessageIndex: u64, pMessage: ?*D3D11_MESSAGE, pMessageByteLength: ?*usize) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetMessage(@ptrCast(self), MessageIndex, pMessage, pMessageByteLength);
            }
            pub inline fn GetNumMessagesAllowedByStorageFilter(self: *T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumMessagesAllowedByStorageFilter(@ptrCast(self));
            }
            pub inline fn GetNumMessagesDeniedByStorageFilter(self: *T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumMessagesDeniedByStorageFilter(@ptrCast(self));
            }
            pub inline fn GetNumStoredMessages(self: *T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumStoredMessages(@ptrCast(self));
            }
            pub inline fn GetNumStoredMessagesAllowedByRetrievalFilter(self: *T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumStoredMessagesAllowedByRetrievalFilter(@ptrCast(self));
            }
            pub inline fn GetNumMessagesDiscardedByMessageCountLimit(self: *T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumMessagesDiscardedByMessageCountLimit(@ptrCast(self));
            }
            pub inline fn GetMessageCountLimit(self: *T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetMessageCountLimit(@ptrCast(self));
            }
            pub inline fn AddStorageFilterEntries(self: *T, pFilter: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddStorageFilterEntries(@ptrCast(self), pFilter);
            }
            pub inline fn GetStorageFilter(self: *T, pFilter: ?*D3D11_INFO_QUEUE_FILTER, pFilterByteLength: ?*usize) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetStorageFilter(@ptrCast(self), pFilter, pFilterByteLength);
            }
            pub inline fn ClearStorageFilter(self: *T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).ClearStorageFilter(@ptrCast(self));
            }
            pub inline fn PushEmptyStorageFilter(self: *T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushEmptyStorageFilter(@ptrCast(self));
            }
            pub inline fn PushCopyOfStorageFilter(self: *T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushCopyOfStorageFilter(@ptrCast(self));
            }
            pub inline fn PushStorageFilter(self: *T, pFilter: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushStorageFilter(@ptrCast(self), pFilter);
            }
            pub inline fn PopStorageFilter(self: *T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PopStorageFilter(@ptrCast(self));
            }
            pub inline fn GetStorageFilterStackSize(self: *T) u32 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetStorageFilterStackSize(@ptrCast(self));
            }
            pub inline fn AddRetrievalFilterEntries(self: *T, pFilter: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddRetrievalFilterEntries(@ptrCast(self), pFilter);
            }
            pub inline fn GetRetrievalFilter(self: *T, pFilter: ?*D3D11_INFO_QUEUE_FILTER, pFilterByteLength: ?*usize) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetRetrievalFilter(@ptrCast(self), pFilter, pFilterByteLength);
            }
            pub inline fn ClearRetrievalFilter(self: *T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).ClearRetrievalFilter(@ptrCast(self));
            }
            pub inline fn PushEmptyRetrievalFilter(self: *T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushEmptyRetrievalFilter(@ptrCast(self));
            }
            pub inline fn PushCopyOfRetrievalFilter(self: *T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushCopyOfRetrievalFilter(@ptrCast(self));
            }
            pub inline fn PushRetrievalFilter(self: *T, pFilter: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushRetrievalFilter(@ptrCast(self), pFilter);
            }
            pub inline fn PopRetrievalFilter(self: *T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PopRetrievalFilter(@ptrCast(self));
            }
            pub inline fn GetRetrievalFilterStackSize(self: *T) u32 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetRetrievalFilterStackSize(@ptrCast(self));
            }
            pub inline fn AddMessage(self: *T, Category: D3D11_MESSAGE_CATEGORY, Severity: D3D11_MESSAGE_SEVERITY, ID: D3D11_MESSAGE_ID, pDescription: ?[*:0]const u8) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddMessage(@ptrCast(self), Category, Severity, ID, pDescription);
            }
            pub inline fn AddApplicationMessage(self: *T, Severity: D3D11_MESSAGE_SEVERITY, pDescription: ?[*:0]const u8) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddApplicationMessage(@ptrCast(self), Severity, pDescription);
            }
            pub inline fn SetBreakOnCategory(self: *T, Category: D3D11_MESSAGE_CATEGORY, bEnable: BOOL) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetBreakOnCategory(@ptrCast(self), Category, bEnable);
            }
            pub inline fn SetBreakOnSeverity(self: *T, Severity: D3D11_MESSAGE_SEVERITY, bEnable: BOOL) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetBreakOnSeverity(@ptrCast(self), Severity, bEnable);
            }
            pub inline fn SetBreakOnID(self: *T, ID: D3D11_MESSAGE_ID, bEnable: BOOL) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetBreakOnID(@ptrCast(self), ID, bEnable);
            }
            pub inline fn GetBreakOnCategory(self: *T, Category: D3D11_MESSAGE_CATEGORY) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetBreakOnCategory(@ptrCast(self), Category);
            }
            pub inline fn GetBreakOnSeverity(self: *T, Severity: D3D11_MESSAGE_SEVERITY) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetBreakOnSeverity(@ptrCast(self), Severity);
            }
            pub inline fn GetBreakOnID(self: *T, ID: D3D11_MESSAGE_ID) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetBreakOnID(@ptrCast(self), ID);
            }
            pub inline fn SetMuteDebugOutput(self: *T, bMute: BOOL) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetMuteDebugOutput(@ptrCast(self), bMute);
            }
            pub inline fn GetMuteDebugOutput(self: *T) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetMuteDebugOutput(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMessageCountLimit: *const fn (*ID3D11InfoQueue, u64) callconv(WINAPI) HRESULT,
        ClearStoredMessages: *const fn (*ID3D11InfoQueue) callconv(WINAPI) void,
        GetMessageA: *const fn (*ID3D11InfoQueue, u64, *D3D11_MESSAGE, *SIZE_T) callconv(WINAPI) HRESULT,
        GetNumMessagesAllowedByStorageFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u64,
        GetNumMessagesDeniedByStorageFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u64,
        GetNumStoredMessages: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u64,
        GetNumStoredMessagesAllowedByRetrievalFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u64,
        GetNumMessagesDiscardedByMessageCountLimit: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u64,
        GetMessageCountLimit: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u64,
        AddStorageFilterEntries: *const fn (*ID3D11InfoQueue, *D3D11_INFO_QUEUE_FILTER) callconv(WINAPI) HRESULT,
        GetStorageFilter: *const fn (*ID3D11InfoQueue, *D3D11_INFO_QUEUE_FILTER, *SIZE_T) callconv(WINAPI) HRESULT,
        ClearStorageFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) void,
        PushEmptyStorageFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) HRESULT,
        PushCopyOfStorageFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) HRESULT,
        PushStorageFilter: *const fn (*ID3D11InfoQueue, *D3D11_INFO_QUEUE_FILTER) callconv(WINAPI) HRESULT,
        PopStorageFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) void,
        GetStorageFilterStackSize: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u32,
        AddRetrievalFilterEntries: *const fn (*ID3D11InfoQueue, *D3D11_INFO_QUEUE_FILTER) callconv(WINAPI) HRESULT,
        GetRetrievalFilter: *const fn (*ID3D11InfoQueue, *D3D11_INFO_QUEUE_FILTER, *SIZE_T) callconv(WINAPI) HRESULT,
        ClearRetrievalFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) void,
        PushEmptyRetrievalFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) HRESULT,
        PushCopyOfRetrievalFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) HRESULT,
        PushRetrievalFilter: *const fn (*ID3D11InfoQueue, *D3D11_INFO_QUEUE_FILTER) callconv(WINAPI) HRESULT,
        PopRetrievalFilter: *const fn (*ID3D11InfoQueue) callconv(WINAPI) void,
        GetRetrievalFilterStackSize: *const fn (*ID3D11InfoQueue) callconv(WINAPI) u32,
        AddMessage: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_CATEGORY, D3D11_MESSAGE_SEVERITY, D3D11_MESSAGE_ID, [*:0]const u8) callconv(WINAPI) HRESULT,
        AddApplicationMessage: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_SEVERITY, [*:0]const u8) callconv(WINAPI) HRESULT,
        SetBreakOnCategory: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_CATEGORY, WINBOOL) callconv(WINAPI) HRESULT,
        SetBreakOnSeverity: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_SEVERITY, WINBOOL) callconv(WINAPI) HRESULT,
        SetBreakOnID: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_ID, WINBOOL) callconv(WINAPI) HRESULT,
        GetBreakOnCategory: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_CATEGORY) callconv(WINAPI) WINBOOL,
        GetBreakOnSeverity: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_SEVERITY) callconv(WINAPI) WINBOOL,
        GetBreakOnID: *const fn (*ID3D11InfoQueue, D3D11_MESSAGE_ID) callconv(WINAPI) WINBOOL,
        SetMuteDebugOutput: *const fn (*ID3D11InfoQueue, WINBOOL) callconv(WINAPI) void,
        GetMuteDebugOutput: *const fn (*ID3D11InfoQueue) callconv(WINAPI) WINBOOL,
    };
};
pub const ID3D11InputLayout = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{e4819ddc-4cf0-4025-bd26-5de82a3e07b7}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11PixelShader = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{ea82e40d-51dc-4f33-93d4-db7c9125ae8c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11Predicate = extern struct { // IUnknown : ID3D11DeviceChild : ID3D11Asynchronous : ID3D11Query
    vtable: *VTable,
    pub const IID = GUID.parse("{9eb576dd-9f77-4d86-81aa-8bab5fe490e2}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDataSize = ID3D11Asynchronous.Methods(@This()).GetDataSize;
    pub const GetDesc = ID3D11Predicate.Methods(@This()).GetDesc;

    pub const VTable = extern struct {
        base: ID3D11Query.VTable,
    };
};
pub const ID3D11Query = extern struct { // IUnknown : ID3D11DeviceChild : ID3D11Asynchronous
    vtable: *VTable,
    pub const IID = GUID.parse("{d6c00747-87b7-425e-b84d-44d108560afd}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDataSize = ID3D11Asynchronous.Methods(@This()).GetDataSize;
    pub const GetDesc = ID3D11Query.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_QUERY_DESC) void {
                return @as(*const ID3D11Query.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11Asynchronous.VTable,
        GetDesc: *const fn (*ID3D11Query, *D3D11_QUERY_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11RasterizerState = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDesc = ID3D11RasterizerState.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_RASTERIZER_DESC) void {
                return @as(*const ID3D11RasterizerState.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11RasterizerState, *D3D11_RASTERIZER_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11RenderTargetView = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{dfdba067-0b8d-4865-875b-d7b4516cc164}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;
    pub const GetDesc = ID3D11RenderTargetView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_RENDER_TARGET_VIEW_DESC) void {
                return @as(*const ID3D11RenderTargetView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (self: *ID3D11RenderTargetView, pDesc: *D3D11_RENDER_TARGET_VIEW_DESC) callconv(WINAPI) void,
    };
};

pub const ID3D11Resource = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{dc8e63f3-d12b-4952-b47b-5e45026a862d}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetType = ID3D11Resource.Methods(@This()).GetType;
    pub const SetEvictionPriority = ID3D11Resource.Methods(@This()).SetEvictionPriority;
    pub const GetEvictionPriority = ID3D11Resource.Methods(@This()).GetEvictionPriority;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetType(self: *T, pResourceDimension: ?*D3D11_RESOURCE_DIMENSION) void {
                return @as(*const ID3D11Resource.VTable, @ptrCast(self.vtable)).GetType(@ptrCast(self), pResourceDimension);
            }
            pub inline fn SetEvictionPriority(self: *T, EvictionPriority: u32) void {
                return @as(*const ID3D11Resource.VTable, @ptrCast(self.vtable)).SetEvictionPriority(@ptrCast(self), EvictionPriority);
            }
            pub inline fn GetEvictionPriority(self: *T) u32 {
                return @as(*const ID3D11Resource.VTable, @ptrCast(self.vtable)).GetEvictionPriority(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetType: *const fn (self: *ID3D11Resource, pResourceDimension: *D3D11_RESOURCE_DIMENSION) callconv(WINAPI) void,
        SetEvictionPriority: *const fn (self: *ID3D11Resource, EvictionPriority: u32) callconv(WINAPI) void,
        GetEvictionPriority: *const fn (self: *ID3D11Resource) callconv(WINAPI) u32,
    };
};
pub const ID3D11SamplerState = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{da6fea51-564c-4487-9810-f0d0f9b4e3a5}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDesc = ID3D11SamplerState.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_SAMPLER_DESC) void {
                return @as(*const ID3D11SamplerState.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11SamplerState, *D3D11_SAMPLER_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11ShaderResourceView = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{b0e06fe0-8192-4e1a-b1ca-36d7414710b2}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;
    pub const GetDesc = ID3D11ShaderResourceView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_SHADER_RESOURCE_VIEW_DESC) void {
                return @as(*const ID3D11ShaderResourceView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11ShaderResourceView, *D3D11_SHADER_RESOURCE_VIEW_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11SwitchToRef = extern struct { // IUnknown
    vtable: *VTable,
    pub const IID = GUID.parse("{1ef337e3-58e7-4f83-a692-db221f5ed47e}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetUseRef = ID3D11SwitchToRef.Methods(@This()).SetUseRef;
    pub const GetUseRef = ID3D11SwitchToRef.Methods(@This()).GetUseRef;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn SetUseRef(self: *T, UseRef: BOOL) BOOL {
                return @as(*const ID3D11SwitchToRef.VTable, @ptrCast(self.vtable)).SetUseRef(@ptrCast(self), UseRef);
            }
            pub inline fn GetUseRef(self: *T) BOOL {
                return @as(*const ID3D11SwitchToRef.VTable, @ptrCast(self.vtable)).GetUseRef(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUseRef: *const fn (*ID3D11SwitchToRef, WINBOOL) callconv(WINAPI) WINBOOL,
        GetUseRef: *const fn (*ID3D11SwitchToRef) callconv(WINAPI) WINBOOL,
    };
};

pub const ID3D11Texture1D = extern struct { // IUnknown : ID3D11DeviceChild : ID3D11Resource
    vtable: *VTable,
    pub const IID = GUID.parse("{f8fb5c27-c6b3-4f75-a4c8-439af2ef564c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetType = ID3D11Resource.Methods(@This()).GetType;
    pub const SetEvictionPriority = ID3D11Resource.Methods(@This()).SetEvictionPriority;
    pub const GetEvictionPriority = ID3D11Resource.Methods(@This()).GetEvictionPriority;
    pub const GetDesc = ID3D11Texture1D.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_TEXTURE1D_DESC) void {
                return @as(*const ID3D11Texture1D.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (*ID3D11Texture1D, *D3D11_TEXTURE1D_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11Texture2D = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{6f15aaf2-d208-4e89-9ab4-489535d34f9c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;

    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const GetType = ID3D11Resource.Methods(@This()).GetType;
    pub const SetEvictionPriority = ID3D11Resource.Methods(@This()).SetEvictionPriority;
    pub const GetEvictionPriority = ID3D11Resource.Methods(@This()).GetEvictionPriority;

    pub const GetDesc = ID3D11Texture2D.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_TEXTURE2D_DESC) void {
                return @as(*const ID3D11Texture2D.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (self: *ID3D11Texture2D, pDesc: *D3D11_TEXTURE2D_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11Texture3D = extern struct { // IUnknown : ID3D11DeviceChild : ID3D11Resource
    vtable: *VTable,
    pub const IID = GUID.parse("{037e866e-f56d-4357-a8af-9dabbe6e250e}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetType = ID3D11Resource.Methods(@This()).GetType;
    pub const SetEvictionPriority = ID3D11Resource.Methods(@This()).SetEvictionPriority;
    pub const GetEvictionPriority = ID3D11Resource.Methods(@This()).GetEvictionPriority;
    pub const GetDesc = ID3D11Texture3D.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_TEXTURE3D_DESC) void {
                return @as(*const ID3D11Texture3D.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (*ID3D11Texture3D, *D3D11_TEXTURE3D_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11UnorderedAccessView = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{28acf509-7f5c-48f6-8611-f316010a6380}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;
    pub const GetDesc = ID3D11UnorderedAccessView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_UNORDERED_ACCESS_VIEW_DESC) void {
                return @as(*const ID3D11UnorderedAccessView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11UnorderedAccessView, *D3D11_UNORDERED_ACCESS_VIEW_DESC) callconv(WINAPI) void,
    };
};

pub const ID3D11VertexShader = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{3b301d64-d678-4289-8897-22f8928b72f3}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
};
pub const ID3D11VideoContext = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{61f21c45-3c0e-4a74-9cea-67100d9ad5e4}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetDecoderBuffer = ID3D11VideoContext.Methods(@This()).GetDecoderBuffer;
    pub const ReleaseDecoderBuffer = ID3D11VideoContext.Methods(@This()).ReleaseDecoderBuffer;
    pub const DecoderBeginFrame = ID3D11VideoContext.Methods(@This()).DecoderBeginFrame;
    pub const DecoderEndFrame = ID3D11VideoContext.Methods(@This()).DecoderEndFrame;
    pub const SubmitDecoderBuffers = ID3D11VideoContext.Methods(@This()).SubmitDecoderBuffers;
    pub const DecoderExtension = ID3D11VideoContext.Methods(@This()).DecoderExtension;
    pub const VideoProcessorSetOutputTargetRect = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputTargetRect;
    pub const VideoProcessorSetOutputBackgroundColor = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputBackgroundColor;
    pub const VideoProcessorSetOutputColorSpace = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputColorSpace;
    pub const VideoProcessorSetOutputAlphaFillMode = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputAlphaFillMode;
    pub const VideoProcessorSetOutputConstriction = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputConstriction;
    pub const VideoProcessorSetOutputStereoMode = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputStereoMode;
    pub const VideoProcessorSetOutputExtension = ID3D11VideoContext.Methods(@This()).VideoProcessorSetOutputExtension;
    pub const VideoProcessorGetOutputTargetRect = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputTargetRect;
    pub const VideoProcessorGetOutputBackgroundColor = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputBackgroundColor;
    pub const VideoProcessorGetOutputColorSpace = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputColorSpace;
    pub const VideoProcessorGetOutputAlphaFillMode = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputAlphaFillMode;
    pub const VideoProcessorGetOutputConstriction = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputConstriction;
    pub const VideoProcessorGetOutputStereoMode = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputStereoMode;
    pub const VideoProcessorGetOutputExtension = ID3D11VideoContext.Methods(@This()).VideoProcessorGetOutputExtension;
    pub const VideoProcessorSetStreamFrameFormat = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamFrameFormat;
    pub const VideoProcessorSetStreamColorSpace = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamColorSpace;
    pub const VideoProcessorSetStreamOutputRate = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamOutputRate;
    pub const VideoProcessorSetStreamSourceRect = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamSourceRect;
    pub const VideoProcessorSetStreamDestRect = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamDestRect;
    pub const VideoProcessorSetStreamAlpha = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamAlpha;
    pub const VideoProcessorSetStreamPalette = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamPalette;
    pub const VideoProcessorSetStreamPixelAspectRatio = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamPixelAspectRatio;
    pub const VideoProcessorSetStreamLumaKey = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamLumaKey;
    pub const VideoProcessorSetStreamStereoFormat = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamStereoFormat;
    pub const VideoProcessorSetStreamAutoProcessingMode = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamAutoProcessingMode;
    pub const VideoProcessorSetStreamFilter = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamFilter;
    pub const VideoProcessorSetStreamExtension = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamExtension;
    pub const VideoProcessorGetStreamFrameFormat = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamFrameFormat;
    pub const VideoProcessorGetStreamColorSpace = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamColorSpace;
    pub const VideoProcessorGetStreamOutputRate = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamOutputRate;
    pub const VideoProcessorGetStreamSourceRect = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamSourceRect;
    pub const VideoProcessorGetStreamDestRect = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamDestRect;
    pub const VideoProcessorGetStreamAlpha = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamAlpha;
    pub const VideoProcessorGetStreamPalette = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamPalette;
    pub const VideoProcessorGetStreamPixelAspectRatio = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamPixelAspectRatio;
    pub const VideoProcessorGetStreamLumaKey = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamLumaKey;
    pub const VideoProcessorGetStreamStereoFormat = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamStereoFormat;
    pub const VideoProcessorGetStreamAutoProcessingMode = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamAutoProcessingMode;
    pub const VideoProcessorGetStreamFilter = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamFilter;
    pub const VideoProcessorGetStreamExtension = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamExtension;
    pub const VideoProcessorBlt = ID3D11VideoContext.Methods(@This()).VideoProcessorBlt;
    pub const NegotiateCryptoSessionKeyExchange = ID3D11VideoContext.Methods(@This()).NegotiateCryptoSessionKeyExchange;
    pub const EncryptionBlt = ID3D11VideoContext.Methods(@This()).EncryptionBlt;
    pub const DecryptionBlt = ID3D11VideoContext.Methods(@This()).DecryptionBlt;
    pub const StartSessionKeyRefresh = ID3D11VideoContext.Methods(@This()).StartSessionKeyRefresh;
    pub const FinishSessionKeyRefresh = ID3D11VideoContext.Methods(@This()).FinishSessionKeyRefresh;
    pub const GetEncryptionBltKey = ID3D11VideoContext.Methods(@This()).GetEncryptionBltKey;
    pub const NegotiateAuthenticatedChannelKeyExchange = ID3D11VideoContext.Methods(@This()).NegotiateAuthenticatedChannelKeyExchange;
    pub const QueryAuthenticatedChannel = ID3D11VideoContext.Methods(@This()).QueryAuthenticatedChannel;
    pub const ConfigureAuthenticatedChannel = ID3D11VideoContext.Methods(@This()).ConfigureAuthenticatedChannel;
    pub const VideoProcessorSetStreamRotation = ID3D11VideoContext.Methods(@This()).VideoProcessorSetStreamRotation;
    pub const VideoProcessorGetStreamRotation = ID3D11VideoContext.Methods(@This()).VideoProcessorGetStreamRotation;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDecoderBuffer(self: *T, pDecoder: ?*ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE, pBufferSize: ?*u32, ppBuffer: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).GetDecoderBuffer(@ptrCast(self), pDecoder, Type, pBufferSize, ppBuffer);
            }
            pub inline fn ReleaseDecoderBuffer(self: *T, pDecoder: ?*ID3D11VideoDecoder, Type: D3D11_VIDEO_DECODER_BUFFER_TYPE) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).ReleaseDecoderBuffer(@ptrCast(self), pDecoder, Type);
            }
            pub inline fn DecoderBeginFrame(self: *T, pDecoder: ?*ID3D11VideoDecoder, pView: ?*ID3D11VideoDecoderOutputView, ContentKeySize: u32, pContentKey: *const anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecoderBeginFrame(@ptrCast(self), pDecoder, pView, ContentKeySize, pContentKey);
            }
            pub inline fn DecoderEndFrame(self: *T, pDecoder: ?*ID3D11VideoDecoder) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecoderEndFrame(@ptrCast(self), pDecoder);
            }
            pub inline fn SubmitDecoderBuffers(self: *T, pDecoder: ?*ID3D11VideoDecoder, NumBuffers: u32, pBufferDesc: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).SubmitDecoderBuffers(@ptrCast(self), pDecoder, NumBuffers, pBufferDesc);
            }
            pub inline fn DecoderExtension(self: *T, pDecoder: ?*ID3D11VideoDecoder, pExtensionData: *const D3D11_VIDEO_DECODER_EXTENSION) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecoderExtension(@ptrCast(self), pDecoder, pExtensionData);
            }
            pub inline fn VideoProcessorSetOutputTargetRect(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, Enable: BOOL, pRect: *const RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputTargetRect(@ptrCast(self), pVideoProcessor, Enable, pRect);
            }
            pub inline fn VideoProcessorSetOutputBackgroundColor(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, YCbCr: BOOL, pColor: *const D3D11_VIDEO_COLOR) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputBackgroundColor(@ptrCast(self), pVideoProcessor, YCbCr, pColor);
            }
            pub inline fn VideoProcessorSetOutputColorSpace(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pColorSpace: *const D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputColorSpace(@ptrCast(self), pVideoProcessor, pColorSpace);
            }
            pub inline fn VideoProcessorSetOutputAlphaFillMode(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, AlphaFillMode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, StreamIndex: u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputAlphaFillMode(@ptrCast(self), pVideoProcessor, AlphaFillMode, StreamIndex);
            }
            pub inline fn VideoProcessorSetOutputConstriction(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, Enable: BOOL, Size: SIZE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputConstriction(@ptrCast(self), pVideoProcessor, Enable, Size);
            }
            pub inline fn VideoProcessorSetOutputStereoMode(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, Enable: BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputStereoMode(@ptrCast(self), pVideoProcessor, Enable);
            }
            pub inline fn VideoProcessorSetOutputExtension(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pExtensionGuid: *const GUID, DataSize: u32, pData: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputExtension(@ptrCast(self), pVideoProcessor, pExtensionGuid, DataSize, pData);
            }
            pub inline fn VideoProcessorGetOutputTargetRect(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, Enabled: ?*BOOL, pRect: ?*RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputTargetRect(@ptrCast(self), pVideoProcessor, Enabled, pRect);
            }
            pub inline fn VideoProcessorGetOutputBackgroundColor(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pYCbCr: ?*BOOL, pColor: ?*D3D11_VIDEO_COLOR) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputBackgroundColor(@ptrCast(self), pVideoProcessor, pYCbCr, pColor);
            }
            pub inline fn VideoProcessorGetOutputColorSpace(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pColorSpace: ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputColorSpace(@ptrCast(self), pVideoProcessor, pColorSpace);
            }
            pub inline fn VideoProcessorGetOutputAlphaFillMode(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pAlphaFillMode: ?*D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, pStreamIndex: ?*u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputAlphaFillMode(@ptrCast(self), pVideoProcessor, pAlphaFillMode, pStreamIndex);
            }
            pub inline fn VideoProcessorGetOutputConstriction(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pEnabled: ?*BOOL, pSize: ?*SIZE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputConstriction(@ptrCast(self), pVideoProcessor, pEnabled, pSize);
            }
            pub inline fn VideoProcessorGetOutputStereoMode(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pEnabled: ?*BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputStereoMode(@ptrCast(self), pVideoProcessor, pEnabled);
            }
            pub inline fn VideoProcessorGetOutputExtension(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pExtensionGuid: *const GUID, DataSize: u32, pData: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputExtension(@ptrCast(self), pVideoProcessor, pExtensionGuid, DataSize, pData);
            }
            pub inline fn VideoProcessorSetStreamFrameFormat(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, FrameFormat: D3D11_VIDEO_FRAME_FORMAT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamFrameFormat(@ptrCast(self), pVideoProcessor, StreamIndex, FrameFormat);
            }
            pub inline fn VideoProcessorSetStreamColorSpace(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: *const D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamColorSpace(@ptrCast(self), pVideoProcessor, StreamIndex, pColorSpace);
            }
            pub inline fn VideoProcessorSetStreamOutputRate(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, OutputRate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, RepeatFrame: BOOL, pCustomRate: *const dxgi.DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamOutputRate(@ptrCast(self), pVideoProcessor, StreamIndex, OutputRate, RepeatFrame, pCustomRate);
            }
            pub inline fn VideoProcessorSetStreamSourceRect(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pRect: *const RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamSourceRect(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, pRect);
            }
            pub inline fn VideoProcessorSetStreamDestRect(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pRect: *const RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamDestRect(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, pRect);
            }
            pub inline fn VideoProcessorSetStreamAlpha(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Alpha: f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamAlpha(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, Alpha);
            }
            pub inline fn VideoProcessorSetStreamPalette(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Count: u32, pEntries: ?[*]const u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamPalette(@ptrCast(self), pVideoProcessor, StreamIndex, Count, pEntries);
            }
            pub inline fn VideoProcessorSetStreamPixelAspectRatio(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, pSourceAspectRatio: *const dxgi.DXGI_RATIONAL, pDestinationAspectRatio: ?*const dxgi.DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamPixelAspectRatio(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, pSourceAspectRatio, pDestinationAspectRatio);
            }
            pub inline fn VideoProcessorSetStreamLumaKey(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Lower: f32, Upper: f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamLumaKey(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, Lower, Upper);
            }
            pub inline fn VideoProcessorSetStreamStereoFormat(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, LeftViewFrame0: BOOL, BaseViewFrame0: BOOL, FlipMode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamStereoFormat(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, Format, LeftViewFrame0, BaseViewFrame0, FlipMode, MonoOffset);
            }
            pub inline fn VideoProcessorSetStreamAutoProcessingMode(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamAutoProcessingMode(@ptrCast(self), pVideoProcessor, StreamIndex, Enable);
            }
            pub inline fn VideoProcessorSetStreamFilter(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Filter: D3D11_VIDEO_PROCESSOR_FILTER, Enable: BOOL, Level: i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamFilter(@ptrCast(self), pVideoProcessor, StreamIndex, Filter, Enable, Level);
            }
            pub inline fn VideoProcessorSetStreamExtension(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pExtensionGuid: *const GUID, DataSize: u32, pData: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamExtension(@ptrCast(self), pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData);
            }
            pub inline fn VideoProcessorGetStreamFrameFormat(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pFrameFormat: ?*D3D11_VIDEO_FRAME_FORMAT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamFrameFormat(@ptrCast(self), pVideoProcessor, StreamIndex, pFrameFormat);
            }
            pub inline fn VideoProcessorGetStreamColorSpace(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pColorSpace: ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamColorSpace(@ptrCast(self), pVideoProcessor, StreamIndex, pColorSpace);
            }
            pub inline fn VideoProcessorGetStreamOutputRate(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pOutputRate: ?*D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, pRepeatFrame: ?*BOOL, pCustomRate: ?*dxgi.DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamOutputRate(@ptrCast(self), pVideoProcessor, StreamIndex, pOutputRate, pRepeatFrame, pCustomRate);
            }
            pub inline fn VideoProcessorGetStreamSourceRect(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnabled: ?*BOOL, pRect: ?*RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamSourceRect(@ptrCast(self), pVideoProcessor, StreamIndex, pEnabled, pRect);
            }
            pub inline fn VideoProcessorGetStreamDestRect(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnabled: ?*BOOL, pRect: ?*RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamDestRect(@ptrCast(self), pVideoProcessor, StreamIndex, pEnabled, pRect);
            }
            pub inline fn VideoProcessorGetStreamAlpha(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnabled: ?*BOOL, pAlpha: ?*f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamAlpha(@ptrCast(self), pVideoProcessor, StreamIndex, pEnabled, pAlpha);
            }
            pub inline fn VideoProcessorGetStreamPalette(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Count: u32, pEntries: [*]u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamPalette(@ptrCast(self), pVideoProcessor, StreamIndex, Count, pEntries);
            }
            pub inline fn VideoProcessorGetStreamPixelAspectRatio(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnabled: ?*BOOL, pSourceAspectRatio: ?*dxgi.DXGI_RATIONAL, pDestinationAspectRatio: ?*dxgi.DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamPixelAspectRatio(@ptrCast(self), pVideoProcessor, StreamIndex, pEnabled, pSourceAspectRatio, pDestinationAspectRatio);
            }
            pub inline fn VideoProcessorGetStreamLumaKey(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnabled: ?*BOOL, pLower: ?*f32, pUpper: ?*f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamLumaKey(@ptrCast(self), pVideoProcessor, StreamIndex, pEnabled, pLower, pUpper);
            }
            pub inline fn VideoProcessorGetStreamStereoFormat(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnable: ?*BOOL, pFormat: ?*D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, pLeftViewFrame0: ?*BOOL, pBaseViewFrame0: ?*BOOL, pFlipMode: ?*D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, MonoOffset: ?*i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamStereoFormat(@ptrCast(self), pVideoProcessor, StreamIndex, pEnable, pFormat, pLeftViewFrame0, pBaseViewFrame0, pFlipMode, MonoOffset);
            }
            pub inline fn VideoProcessorGetStreamAutoProcessingMode(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnabled: ?*BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamAutoProcessingMode(@ptrCast(self), pVideoProcessor, StreamIndex, pEnabled);
            }
            pub inline fn VideoProcessorGetStreamFilter(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pEnabled: ?*BOOL, pLevel: ?*i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamFilter(@ptrCast(self), pVideoProcessor, StreamIndex, Filter, pEnabled, pLevel);
            }
            pub inline fn VideoProcessorGetStreamExtension(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pExtensionGuid: *const GUID, DataSize: u32, pData: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamExtension(@ptrCast(self), pVideoProcessor, StreamIndex, pExtensionGuid, DataSize, pData);
            }
            pub inline fn VideoProcessorBlt(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, pView: ?*ID3D11VideoProcessorOutputView, OutputFrame: u32, StreamCount: u32, pStreams: [*]const D3D11_VIDEO_PROCESSOR_STREAM) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorBlt(@ptrCast(self), pVideoProcessor, pView, OutputFrame, StreamCount, pStreams);
            }
            pub inline fn NegotiateCryptoSessionKeyExchange(self: *T, pCryptoSession: ?*ID3D11CryptoSession, DataSize: u32, pData: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).NegotiateCryptoSessionKeyExchange(@ptrCast(self), pCryptoSession, DataSize, pData);
            }
            pub inline fn EncryptionBlt(self: *T, pCryptoSession: ?*ID3D11CryptoSession, pSrcSurface: ?*ID3D11Texture2D, pDstSurface: ?*ID3D11Texture2D, IVSize: u32, pIV: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).EncryptionBlt(@ptrCast(self), pCryptoSession, pSrcSurface, pDstSurface, IVSize, pIV);
            }
            pub inline fn DecryptionBlt(self: *T, pCryptoSession: ?*ID3D11CryptoSession, pSrcSurface: ?*ID3D11Texture2D, pDstSurface: ?*ID3D11Texture2D, pEncryptedBlockInfo: ?*D3D11_ENCRYPTED_BLOCK_INFO, ContentKeySize: u32, pContentKey: *const anyopaque, IVSize: u32, pIV: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecryptionBlt(@ptrCast(self), pCryptoSession, pSrcSurface, pDstSurface, pEncryptedBlockInfo, ContentKeySize, pContentKey, IVSize, pIV);
            }
            pub inline fn StartSessionKeyRefresh(self: *T, pCryptoSession: ?*ID3D11CryptoSession, RandomNumberSize: u32, pRandomNumber: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).StartSessionKeyRefresh(@ptrCast(self), pCryptoSession, RandomNumberSize, pRandomNumber);
            }
            pub inline fn FinishSessionKeyRefresh(self: *T, pCryptoSession: ?*ID3D11CryptoSession) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).FinishSessionKeyRefresh(@ptrCast(self), pCryptoSession);
            }
            pub inline fn GetEncryptionBltKey(self: *T, pCryptoSession: ?*ID3D11CryptoSession, KeySize: u32, pReadbackKey: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).GetEncryptionBltKey(@ptrCast(self), pCryptoSession, KeySize, pReadbackKey);
            }
            pub inline fn NegotiateAuthenticatedChannelKeyExchange(self: *T, pChannel: ?*ID3D11AuthenticatedChannel, DataSize: u32, pData: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).NegotiateAuthenticatedChannelKeyExchange(@ptrCast(self), pChannel, DataSize, pData);
            }
            pub inline fn QueryAuthenticatedChannel(self: *T, pChannel: ?*ID3D11AuthenticatedChannel, InputSize: u32, pInput: *const anyopaque, OutputSize: u32, pOutput: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).QueryAuthenticatedChannel(@ptrCast(self), pChannel, InputSize, pInput, OutputSize, pOutput);
            }
            pub inline fn ConfigureAuthenticatedChannel(self: *T, pChannel: ?*ID3D11AuthenticatedChannel, InputSize: u32, pInput: *const anyopaque, pOutput: ?*D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).ConfigureAuthenticatedChannel(@ptrCast(self), pChannel, InputSize, pInput, pOutput);
            }
            pub inline fn VideoProcessorSetStreamRotation(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, Enable: BOOL, Rotation: D3D11_VIDEO_PROCESSOR_ROTATION) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamRotation(@ptrCast(self), pVideoProcessor, StreamIndex, Enable, Rotation);
            }
            pub inline fn VideoProcessorGetStreamRotation(self: *T, pVideoProcessor: ?*ID3D11VideoProcessor, StreamIndex: u32, pEnable: ?*BOOL, pRotation: ?*D3D11_VIDEO_PROCESSOR_ROTATION) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamRotation(@ptrCast(self), pVideoProcessor, StreamIndex, pEnable, pRotation);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDecoderBuffer: *const fn (*ID3D11VideoContext, *ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE, *u32, *?*anyopaque) callconv(WINAPI) HRESULT,
        ReleaseDecoderBuffer: *const fn (*ID3D11VideoContext, *ID3D11VideoDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE) callconv(WINAPI) HRESULT,
        DecoderBeginFrame: *const fn (*ID3D11VideoContext, *ID3D11VideoDecoder, *ID3D11VideoDecoderOutputView, u32, ?*const anyopaque) callconv(WINAPI) HRESULT,
        DecoderEndFrame: *const fn (*ID3D11VideoContext, *ID3D11VideoDecoder) callconv(WINAPI) HRESULT,
        SubmitDecoderBuffers: *const fn (*ID3D11VideoContext, *ID3D11VideoDecoder, u32, *const D3D11_VIDEO_DECODER_BUFFER_DESC) callconv(WINAPI) HRESULT,
        DecoderExtension: *const fn (*ID3D11VideoContext, *ID3D11VideoDecoder, *const D3D11_VIDEO_DECODER_EXTENSION) callconv(WINAPI) HRESULT,
        VideoProcessorSetOutputTargetRect: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, WINBOOL, *const RECT) callconv(WINAPI) void,
        VideoProcessorSetOutputBackgroundColor: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, WINBOOL, *const D3D11_VIDEO_COLOR) callconv(WINAPI) void,
        VideoProcessorSetOutputColorSpace: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, ?*const D3D11_VIDEO_PROCESSOR_COLOR_SPACE) callconv(WINAPI) void,
        VideoProcessorSetOutputAlphaFillMode: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, u32) callconv(WINAPI) void,
        VideoProcessorSetOutputConstriction: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, WINBOOL, SIZE) callconv(WINAPI) void,
        VideoProcessorSetOutputStereoMode: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, WINBOOL) callconv(WINAPI) void,
        VideoProcessorSetOutputExtension: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *const GUID, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        VideoProcessorGetOutputTargetRect: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *WINBOOL, *RECT) callconv(WINAPI) void,
        VideoProcessorGetOutputBackgroundColor: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *WINBOOL, *D3D11_VIDEO_COLOR) callconv(WINAPI) void,
        VideoProcessorGetOutputColorSpace: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE) callconv(WINAPI) void,
        VideoProcessorGetOutputAlphaFillMode: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, *u32) callconv(WINAPI) void,
        VideoProcessorGetOutputConstriction: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *WINBOOL, *SIZE) callconv(WINAPI) void,
        VideoProcessorGetOutputStereoMode: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *WINBOOL) callconv(WINAPI) void,
        VideoProcessorGetOutputExtension: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *const GUID, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        VideoProcessorSetStreamFrameFormat: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, D3D11_VIDEO_FRAME_FORMAT) callconv(WINAPI) void,
        VideoProcessorSetStreamColorSpace: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, ?*const D3D11_VIDEO_PROCESSOR_COLOR_SPACE) callconv(WINAPI) void,
        VideoProcessorSetStreamOutputRate: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, WINBOOL, *const dxgi.DXGI_RATIONAL) callconv(WINAPI) void,
        VideoProcessorSetStreamSourceRect: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, *const RECT) callconv(WINAPI) void,
        VideoProcessorSetStreamDestRect: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, *const RECT) callconv(WINAPI) void,
        VideoProcessorSetStreamAlpha: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, f32) callconv(WINAPI) void,
        VideoProcessorSetStreamPalette: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, u32, *const u32) callconv(WINAPI) void,
        VideoProcessorSetStreamPixelAspectRatio: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, *const dxgi.DXGI_RATIONAL, *const dxgi.DXGI_RATIONAL) callconv(WINAPI) void,
        VideoProcessorSetStreamLumaKey: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, f32, f32) callconv(WINAPI) void,
        VideoProcessorSetStreamStereoFormat: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, WINBOOL, WINBOOL, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, c_int) callconv(WINAPI) void,
        VideoProcessorSetStreamAutoProcessingMode: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL) callconv(WINAPI) void,
        VideoProcessorSetStreamFilter: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, D3D11_VIDEO_PROCESSOR_FILTER, WINBOOL, c_int) callconv(WINAPI) void,
        VideoProcessorSetStreamExtension: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *const GUID, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        VideoProcessorGetStreamFrameFormat: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *D3D11_VIDEO_FRAME_FORMAT) callconv(WINAPI) void,
        VideoProcessorGetStreamColorSpace: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE) callconv(WINAPI) void,
        VideoProcessorGetStreamOutputRate: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, *WINBOOL, *dxgi.DXGI_RATIONAL) callconv(WINAPI) void,
        VideoProcessorGetStreamSourceRect: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *RECT) callconv(WINAPI) void,
        VideoProcessorGetStreamDestRect: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *RECT) callconv(WINAPI) void,
        VideoProcessorGetStreamAlpha: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *f32) callconv(WINAPI) void,
        VideoProcessorGetStreamPalette: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, u32, *u32) callconv(WINAPI) void,
        VideoProcessorGetStreamPixelAspectRatio: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *dxgi.DXGI_RATIONAL, *dxgi.DXGI_RATIONAL) callconv(WINAPI) void,
        VideoProcessorGetStreamLumaKey: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *f32, *f32) callconv(WINAPI) void,
        VideoProcessorGetStreamStereoFormat: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, *WINBOOL, *WINBOOL, *D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, *c_int) callconv(WINAPI) void,
        VideoProcessorGetStreamAutoProcessingMode: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL) callconv(WINAPI) void,
        VideoProcessorGetStreamFilter: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, D3D11_VIDEO_PROCESSOR_FILTER, *WINBOOL, *c_int) callconv(WINAPI) void,
        VideoProcessorGetStreamExtension: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *const GUID, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        VideoProcessorBlt: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, *ID3D11VideoProcessorOutputView, u32, u32, *const D3D11_VIDEO_PROCESSOR_STREAM) callconv(WINAPI) HRESULT,
        NegotiateCryptoSessionKeyExchange: *const fn (*ID3D11VideoContext, *ID3D11CryptoSession, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        EncryptionBlt: *const fn (*ID3D11VideoContext, *ID3D11CryptoSession, *ID3D11Texture2D, *ID3D11Texture2D, u32, ?*anyopaque) callconv(WINAPI) void,
        DecryptionBlt: *const fn (*ID3D11VideoContext, *ID3D11CryptoSession, *ID3D11Texture2D, *ID3D11Texture2D, *D3D11_ENCRYPTED_BLOCK_INFO, u32, ?*const anyopaque, u32, ?*anyopaque) callconv(WINAPI) void,
        StartSessionKeyRefresh: *const fn (*ID3D11VideoContext, *ID3D11CryptoSession, u32, ?*anyopaque) callconv(WINAPI) void,
        FinishSessionKeyRefresh: *const fn (*ID3D11VideoContext, *ID3D11CryptoSession) callconv(WINAPI) void,
        GetEncryptionBltKey: *const fn (*ID3D11VideoContext, *ID3D11CryptoSession, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        NegotiateAuthenticatedChannelKeyExchange: *const fn (*ID3D11VideoContext, *ID3D11AuthenticatedChannel, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        QueryAuthenticatedChannel: *const fn (*ID3D11VideoContext, *ID3D11AuthenticatedChannel, u32, ?*const anyopaque, u32, ?*anyopaque) callconv(WINAPI) HRESULT,
        ConfigureAuthenticatedChannel: *const fn (*ID3D11VideoContext, *ID3D11AuthenticatedChannel, u32, ?*const anyopaque, *D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) callconv(WINAPI) HRESULT,
        VideoProcessorSetStreamRotation: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, WINBOOL, D3D11_VIDEO_PROCESSOR_ROTATION) callconv(WINAPI) void,
        VideoProcessorGetStreamRotation: *const fn (*ID3D11VideoContext, *ID3D11VideoProcessor, u32, *WINBOOL, *D3D11_VIDEO_PROCESSOR_ROTATION) callconv(WINAPI) void,
    };
};
pub const ID3D11VideoDecoder = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{3c9c5b51-995d-48d1-9b8d-fa5caeded65c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetCreationParameters = ID3D11VideoDecoder.Methods(@This()).GetCreationParameters;
    pub const GetDriverHandle = ID3D11VideoDecoder.Methods(@This()).GetDriverHandle;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetCreationParameters(self: *T, pVideoDesc: ?*D3D11_VIDEO_DECODER_DESC, pConfig: ?*D3D11_VIDEO_DECODER_CONFIG) HRESULT {
                return @as(*const ID3D11VideoDecoder.VTable, @ptrCast(self.vtable)).GetCreationParameters(@ptrCast(self), pVideoDesc, pConfig);
            }
            pub inline fn GetDriverHandle(self: *T, pDriverHandle: ?*?HANDLE) HRESULT {
                return @as(*const ID3D11VideoDecoder.VTable, @ptrCast(self.vtable)).GetDriverHandle(@ptrCast(self), pDriverHandle);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetCreationParameters: *const fn (*ID3D11VideoDecoder, *D3D11_VIDEO_DECODER_DESC, *D3D11_VIDEO_DECODER_CONFIG) callconv(WINAPI) HRESULT,
        GetDriverHandle: *const fn (*ID3D11VideoDecoder, *HANDLE) callconv(WINAPI) HRESULT,
    };
};
pub const ID3D11VideoDecoderOutputView = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{c2931aea-2a85-4f20-860f-fba1fd256e18}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;
    pub const GetDesc = ID3D11VideoDecoderOutputView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) void {
                return @as(*const ID3D11VideoDecoderOutputView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11VideoDecoderOutputView, *D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11VideoDevice = extern struct { // IUnknown
    vtable: *VTable,
    pub const IID = GUID.parse("{10ec4d5b-975a-4689-b9e4-d0aac30fe333}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const CreateVideoDecoder = ID3D11VideoDevice.Methods(@This()).CreateVideoDecoder;
    pub const CreateVideoProcessor = ID3D11VideoDevice.Methods(@This()).CreateVideoProcessor;
    pub const CreateAuthenticatedChannel = ID3D11VideoDevice.Methods(@This()).CreateAuthenticatedChannel;
    pub const CreateCryptoSession = ID3D11VideoDevice.Methods(@This()).CreateCryptoSession;
    pub const CreateVideoDecoderOutputView = ID3D11VideoDevice.Methods(@This()).CreateVideoDecoderOutputView;
    pub const CreateVideoProcessorInputView = ID3D11VideoDevice.Methods(@This()).CreateVideoProcessorInputView;
    pub const CreateVideoProcessorOutputView = ID3D11VideoDevice.Methods(@This()).CreateVideoProcessorOutputView;
    pub const CreateVideoProcessorEnumerator = ID3D11VideoDevice.Methods(@This()).CreateVideoProcessorEnumerator;
    pub const GetVideoDecoderProfileCount = ID3D11VideoDevice.Methods(@This()).GetVideoDecoderProfileCount;
    pub const GetVideoDecoderProfile = ID3D11VideoDevice.Methods(@This()).GetVideoDecoderProfile;
    pub const CheckVideoDecoderFormat = ID3D11VideoDevice.Methods(@This()).CheckVideoDecoderFormat;
    pub const GetVideoDecoderConfigCount = ID3D11VideoDevice.Methods(@This()).GetVideoDecoderConfigCount;
    pub const GetVideoDecoderConfig = ID3D11VideoDevice.Methods(@This()).GetVideoDecoderConfig;
    pub const GetContentProtectionCaps = ID3D11VideoDevice.Methods(@This()).GetContentProtectionCaps;
    pub const CheckCryptoKeyExchange = ID3D11VideoDevice.Methods(@This()).CheckCryptoKeyExchange;
    pub const SetPrivateData = ID3D11VideoDevice.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11VideoDevice.Methods(@This()).SetPrivateDataInterface;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn CreateVideoDecoder(self: *T, pVideoDesc: *const D3D11_VIDEO_DECODER_DESC, pConfig: ?*const D3D11_VIDEO_DECODER_CONFIG, ppDecoder: ?*?*ID3D11VideoDecoder) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoDecoder(@ptrCast(self), pVideoDesc, pConfig, ppDecoder);
            }
            pub inline fn CreateVideoProcessor(self: *T, pEnum: ?*ID3D11VideoProcessorEnumerator, RateConversionIndex: u32, ppVideoProcessor: ?*?*ID3D11VideoProcessor) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessor(@ptrCast(self), pEnum, RateConversionIndex, ppVideoProcessor);
            }
            pub inline fn CreateAuthenticatedChannel(self: *T, ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE, ppAuthenticatedChannel: ?*?*ID3D11AuthenticatedChannel) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateAuthenticatedChannel(@ptrCast(self), ChannelType, ppAuthenticatedChannel);
            }
            pub inline fn CreateCryptoSession(self: *T, pCryptoType: *const GUID, pDecoderProfile: ?*const GUID, pKeyExchangeType: ?*const GUID, ppCryptoSession: ?*?*ID3D11CryptoSession) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateCryptoSession(@ptrCast(self), pCryptoType, pDecoderProfile, pKeyExchangeType, ppCryptoSession);
            }
            pub inline fn CreateVideoDecoderOutputView(self: *T, pResource: ?*ID3D11Resource, pDesc: *const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, ppVDOVView: ?*?*ID3D11VideoDecoderOutputView) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoDecoderOutputView(@ptrCast(self), pResource, pDesc, ppVDOVView);
            }
            pub inline fn CreateVideoProcessorInputView(self: *T, pResource: ?*ID3D11Resource, pEnum: ?*ID3D11VideoProcessorEnumerator, pDesc: *const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, ppVPIView: ?*?*ID3D11VideoProcessorInputView) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessorInputView(@ptrCast(self), pResource, pEnum, pDesc, ppVPIView);
            }
            pub inline fn CreateVideoProcessorOutputView(self: *T, pResource: ?*ID3D11Resource, pEnum: ?*ID3D11VideoProcessorEnumerator, pDesc: *const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, ppVPOView: ?*?*ID3D11VideoProcessorOutputView) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessorOutputView(@ptrCast(self), pResource, pEnum, pDesc, ppVPOView);
            }
            pub inline fn CreateVideoProcessorEnumerator(self: *T, pDesc: *const D3D11_VIDEO_PROCESSOR_CONTENT_DESC, ppEnum: ?*?*ID3D11VideoProcessorEnumerator) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessorEnumerator(@ptrCast(self), pDesc, ppEnum);
            }
            pub inline fn GetVideoDecoderProfileCount(self: *T) u32 {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderProfileCount(@ptrCast(self));
            }
            pub inline fn GetVideoDecoderProfile(self: *T, Index: u32, pDecoderProfile: ?*GUID) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderProfile(@ptrCast(self), Index, pDecoderProfile);
            }
            pub inline fn CheckVideoDecoderFormat(self: *T, pDecoderProfile: *const GUID, Format: dxgi.DXGI_FORMAT, pSupported: ?*BOOL) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CheckVideoDecoderFormat(@ptrCast(self), pDecoderProfile, Format, pSupported);
            }
            pub inline fn GetVideoDecoderConfigCount(self: *T, pDesc: *const D3D11_VIDEO_DECODER_DESC, pCount: ?*u32) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderConfigCount(@ptrCast(self), pDesc, pCount);
            }
            pub inline fn GetVideoDecoderConfig(self: *T, pDesc: *const D3D11_VIDEO_DECODER_DESC, Index: u32, pConfig: ?*D3D11_VIDEO_DECODER_CONFIG) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderConfig(@ptrCast(self), pDesc, Index, pConfig);
            }
            pub inline fn GetContentProtectionCaps(self: *T, pCryptoType: *const GUID, pDecoderProfile: ?*const GUID, pCaps: ?*D3D11_VIDEO_CONTENT_PROTECTION_CAPS) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetContentProtectionCaps(@ptrCast(self), pCryptoType, pDecoderProfile, pCaps);
            }
            pub inline fn CheckCryptoKeyExchange(self: *T, pCryptoType: *const GUID, pDecoderProfile: ?*const GUID, Index: u32, pKeyExchangeType: ?*GUID) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CheckCryptoKeyExchange(@ptrCast(self), pCryptoType, pDecoderProfile, Index, pKeyExchangeType);
            }
            pub inline fn SetPrivateData(self: *T, guid: *const GUID, DataSize: u32, pData: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).SetPrivateData(@ptrCast(self), guid, DataSize, pData);
            }
            pub inline fn SetPrivateDataInterface(self: *T, guid: *const GUID, pData: ?*IUnknown) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@ptrCast(self), guid, pData);
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateVideoDecoder: *const fn (*ID3D11VideoDevice, *const D3D11_VIDEO_DECODER_DESC, *const D3D11_VIDEO_DECODER_CONFIG, **ID3D11VideoDecoder) callconv(WINAPI) HRESULT,
        CreateVideoProcessor: *const fn (*ID3D11VideoDevice, *ID3D11VideoProcessorEnumerator, u32, **ID3D11VideoProcessor) callconv(WINAPI) HRESULT,
        CreateAuthenticatedChannel: *const fn (*ID3D11VideoDevice, D3D11_AUTHENTICATED_CHANNEL_TYPE, **ID3D11AuthenticatedChannel) callconv(WINAPI) HRESULT,
        CreateCryptoSession: *const fn (*ID3D11VideoDevice, *const GUID, *const GUID, *const GUID, **ID3D11CryptoSession) callconv(WINAPI) HRESULT,
        CreateVideoDecoderOutputView: *const fn (*ID3D11VideoDevice, *ID3D11Resource, *const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, **ID3D11VideoDecoderOutputView) callconv(WINAPI) HRESULT,
        CreateVideoProcessorInputView: *const fn (*ID3D11VideoDevice, *ID3D11Resource, *ID3D11VideoProcessorEnumerator, *const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, **ID3D11VideoProcessorInputView) callconv(WINAPI) HRESULT,
        CreateVideoProcessorOutputView: *const fn (*ID3D11VideoDevice, *ID3D11Resource, *ID3D11VideoProcessorEnumerator, *const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, **ID3D11VideoProcessorOutputView) callconv(WINAPI) HRESULT,
        CreateVideoProcessorEnumerator: *const fn (*ID3D11VideoDevice, *const D3D11_VIDEO_PROCESSOR_CONTENT_DESC, **ID3D11VideoProcessorEnumerator) callconv(WINAPI) HRESULT,
        GetVideoDecoderProfileCount: *const fn (*ID3D11VideoDevice) callconv(WINAPI) u32,
        GetVideoDecoderProfile: *const fn (*ID3D11VideoDevice, u32, *GUID) callconv(WINAPI) HRESULT,
        CheckVideoDecoderFormat: *const fn (*ID3D11VideoDevice, *const GUID, dxgi.DXGI_FORMAT, *WINBOOL) callconv(WINAPI) HRESULT,
        GetVideoDecoderConfigCount: *const fn (*ID3D11VideoDevice, *const D3D11_VIDEO_DECODER_DESC, *u32) callconv(WINAPI) HRESULT,
        GetVideoDecoderConfig: *const fn (*ID3D11VideoDevice, *const D3D11_VIDEO_DECODER_DESC, u32, *D3D11_VIDEO_DECODER_CONFIG) callconv(WINAPI) HRESULT,
        GetContentProtectionCaps: *const fn (*ID3D11VideoDevice, *const GUID, *const GUID, *D3D11_VIDEO_CONTENT_PROTECTION_CAPS) callconv(WINAPI) HRESULT,
        CheckCryptoKeyExchange: *const fn (*ID3D11VideoDevice, *const GUID, *const GUID, u32, *GUID) callconv(WINAPI) HRESULT,
        SetPrivateData: *const fn (*ID3D11VideoDevice, *const GUID, u32, ?*const anyopaque) callconv(WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (*ID3D11VideoDevice, *const GUID, *const IUnknown) callconv(WINAPI) HRESULT,
    };
};
pub const ID3D11VideoProcessor = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{1d7b0652-185f-41c6-85ce-0c5be3d4ae6c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetContentDesc = ID3D11VideoProcessor.Methods(@This()).GetContentDesc;
    pub const GetRateConversionCaps = ID3D11VideoProcessor.Methods(@This()).GetRateConversionCaps;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetContentDesc(self: *T, pDesc: ?*D3D11_VIDEO_PROCESSOR_CONTENT_DESC) void {
                return @as(*const ID3D11VideoProcessor.VTable, @ptrCast(self.vtable)).GetContentDesc(@ptrCast(self), pDesc);
            }
            pub inline fn GetRateConversionCaps(self: *T, pCaps: ?*D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) void {
                return @as(*const ID3D11VideoProcessor.VTable, @ptrCast(self.vtable)).GetRateConversionCaps(@ptrCast(self), pCaps);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetContentDesc: *const fn (*ID3D11VideoProcessor, *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) callconv(WINAPI) void,
        GetRateConversionCaps: *const fn (*ID3D11VideoProcessor, *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) callconv(WINAPI) void,
    };
};
pub const ID3D11VideoProcessorEnumerator = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{31627037-53ab-4200-9061-05faa9ab45f9}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetVideoProcessorContentDesc = ID3D11VideoProcessorEnumerator.Methods(@This()).GetVideoProcessorContentDesc;
    pub const CheckVideoProcessorFormat = ID3D11VideoProcessorEnumerator.Methods(@This()).CheckVideoProcessorFormat;
    pub const GetVideoProcessorCaps = ID3D11VideoProcessorEnumerator.Methods(@This()).GetVideoProcessorCaps;
    pub const GetVideoProcessorRateConversionCaps = ID3D11VideoProcessorEnumerator.Methods(@This()).GetVideoProcessorRateConversionCaps;
    pub const GetVideoProcessorCustomRate = ID3D11VideoProcessorEnumerator.Methods(@This()).GetVideoProcessorCustomRate;
    pub const GetVideoProcessorFilterRange = ID3D11VideoProcessorEnumerator.Methods(@This()).GetVideoProcessorFilterRange;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetVideoProcessorContentDesc(self: *T, pContentDesc: ?*D3D11_VIDEO_PROCESSOR_CONTENT_DESC) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorContentDesc(@ptrCast(self), pContentDesc);
            }
            pub inline fn CheckVideoProcessorFormat(self: *T, Format: dxgi.DXGI_FORMAT, pFlags: ?*u32) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).CheckVideoProcessorFormat(@ptrCast(self), Format, pFlags);
            }
            pub inline fn GetVideoProcessorCaps(self: *T, pCaps: ?*D3D11_VIDEO_PROCESSOR_CAPS) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorCaps(@ptrCast(self), pCaps);
            }
            pub inline fn GetVideoProcessorRateConversionCaps(self: *T, TypeIndex: u32, pCaps: ?*D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorRateConversionCaps(@ptrCast(self), TypeIndex, pCaps);
            }
            pub inline fn GetVideoProcessorCustomRate(self: *T, TypeIndex: u32, CustomRateIndex: u32, pRate: ?*D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorCustomRate(@ptrCast(self), TypeIndex, CustomRateIndex, pRate);
            }
            pub inline fn GetVideoProcessorFilterRange(self: *T, Filter: D3D11_VIDEO_PROCESSOR_FILTER, pRange: ?*D3D11_VIDEO_PROCESSOR_FILTER_RANGE) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorFilterRange(@ptrCast(self), Filter, pRange);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetVideoProcessorContentDesc: *const fn (*ID3D11VideoProcessorEnumerator, *D3D11_VIDEO_PROCESSOR_CONTENT_DESC) callconv(WINAPI) HRESULT,
        CheckVideoProcessorFormat: *const fn (*ID3D11VideoProcessorEnumerator, dxgi.DXGI_FORMAT, *u32) callconv(WINAPI) HRESULT,
        GetVideoProcessorCaps: *const fn (*ID3D11VideoProcessorEnumerator, *D3D11_VIDEO_PROCESSOR_CAPS) callconv(WINAPI) HRESULT,
        GetVideoProcessorRateConversionCaps: *const fn (*ID3D11VideoProcessorEnumerator, u32, *D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) callconv(WINAPI) HRESULT,
        GetVideoProcessorCustomRate: *const fn (*ID3D11VideoProcessorEnumerator, u32, u32, *D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) callconv(WINAPI) HRESULT,
        GetVideoProcessorFilterRange: *const fn (*ID3D11VideoProcessorEnumerator, D3D11_VIDEO_PROCESSOR_FILTER, *D3D11_VIDEO_PROCESSOR_FILTER_RANGE) callconv(WINAPI) HRESULT,
    };
};
pub const ID3D11VideoProcessorInputView = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{11ec5a5f-51dc-4945-ab34-6e8c21300ea5}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;
    pub const GetDesc = ID3D11VideoProcessorInputView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) void {
                return @as(*const ID3D11VideoProcessorInputView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11VideoProcessorInputView, *D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11VideoProcessorOutputView = extern struct { // IUnknown : ID3D11DeviceChild
    vtable: *VTable,
    pub const IID = GUID.parse("{a048285e-25a9-4527-bd93-d68b68c44254}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;
    pub const GetDesc = ID3D11VideoProcessorOutputView.Methods(@This()).GetDesc;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) void {
                return @as(*const ID3D11VideoProcessorOutputView.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (*ID3D11VideoProcessorOutputView, *D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) callconv(WINAPI) void,
    };
};
pub const ID3D11View = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{839d1216-bb2e-412b-b7f4-a9dbebe08ed1}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const GetDevice = ID3D11DeviceChild.Methods(@This()).GetDevice;
    pub const GetPrivateData = ID3D11DeviceChild.Methods(@This()).GetPrivateData;
    pub const SetPrivateData = ID3D11DeviceChild.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = ID3D11DeviceChild.Methods(@This()).SetPrivateDataInterface;
    pub const GetResource = ID3D11View.Methods(@This()).GetResource;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetResource(self: *T, ppResource: ?*?*ID3D11Resource) void {
                return @as(*const ID3D11View.VTable, @ptrCast(self.vtable)).GetResource(@ptrCast(self), ppResource);
            }
        };
    }

    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetResource: *const fn (self: *ID3D11View, ppResource: **ID3D11Resource) callconv(WINAPI) void,
    };
};

pub const IDXGIAdapter = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{2411e7e1-12ac-4ccf-bd14-9798e8534dc0}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;

    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;

    pub const EnumOutputs = IDXGIAdapter.Methods(@This()).EnumOutputs;
    pub const GetDesc = IDXGIAdapter.Methods(@This()).GetDesc;
    pub const CheckInterfaceSupport = IDXGIAdapter.Methods(@This()).CheckInterfaceSupport;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn EnumOutputs(self: *T, Output: u32, ppOutput: ?*?*IDXGIOutput) HRESULT {
                return @as(*const IDXGIAdapter.VTable, @ptrCast(self.vtable)).EnumOutputs(@ptrCast(self), Output, ppOutput);
            }
            pub inline fn GetDesc(self: *T, pDesc: ?*dxgi.DXGI_ADAPTER_DESC) HRESULT {
                return @as(*const IDXGIAdapter.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
            pub inline fn CheckInterfaceSupport(self: *T, InterfaceName: *const GUID, pUMDVersion: ?*LARGE_INTEGER) HRESULT {
                return @as(*const IDXGIAdapter.VTable, @ptrCast(self.vtable)).CheckInterfaceSupport(@ptrCast(self), InterfaceName, pUMDVersion);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIObject.VTable,
        EnumOutputs: *const fn (self: *IDXGIAdapter, output_idx: u32, output: **IDXGIOutput) callconv(WINAPI) HRESULT,
        GetDesc: *const fn (self: *IDXGIAdapter, desc: *dxgi.DXGI_ADAPTER_DESC) callconv(WINAPI) HRESULT,
        CheckInterfaceSupport: *const fn (self: *IDXGIAdapter, guid: *const GUID, umd_version: *LARGE_INTEGER) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIAdapter1 = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{29038f61-3839-4626-91fd-086879011a05}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;

    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;

    pub const EnumOutputs = IDXGIAdapter.Methods(@This()).EnumOutputs;
    pub const GetDesc = IDXGIAdapter.Methods(@This()).GetDesc;
    pub const CheckInterfaceSupport = IDXGIAdapter.Methods(@This()).CheckInterfaceSupport;

    pub const GetDesc1 = IDXGIAdapter1.Methods(@This()).GetDesc1;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc1(self: *T, pDesc: ?*dxgi.DXGI_ADAPTER_DESC1) HRESULT {
                return @as(*const IDXGIAdapter1.VTable, @ptrCast(self.vtable)).GetDesc1(@ptrCast(self), pDesc);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIAdapter.VTable,
        GetDesc1: *const fn (self: *IDXGIAdapter1, desc: *dxgi.DXGI_ADAPTER_DESC1) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIDevice = extern struct { // IUnknown : IDXGIObject
    vtable: *VTable,
    pub const IID = GUID.parse("{54ec77fa-1377-44e6-8c32-88fd5f44c84c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetAdapter = IDXGIDevice.Methods(@This()).GetAdapter;
    pub const CreateSurface = IDXGIDevice.Methods(@This()).CreateSurface;
    pub const QueryResourceResidency = IDXGIDevice.Methods(@This()).QueryResourceResidency;
    pub const SetGPUThreadPriority = IDXGIDevice.Methods(@This()).SetGPUThreadPriority;
    pub const GetGPUThreadPriority = IDXGIDevice.Methods(@This()).GetGPUThreadPriority;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetAdapter(self: *T, pAdapter: ?*?*IDXGIAdapter) HRESULT {
                return @as(*const IDXGIDevice.VTable, @ptrCast(self.vtable)).GetAdapter(@ptrCast(self), pAdapter);
            }
            pub inline fn CreateSurface(self: *T, pDesc: *const dxgi.DXGI_SURFACE_DESC, NumSurfaces: u32, Usage: u32, pSharedResource: ?*const dxgi.DXGI_SHARED_RESOURCE, ppSurface: [*]?*IDXGISurface) HRESULT {
                return @as(*const IDXGIDevice.VTable, @ptrCast(self.vtable)).CreateSurface(@ptrCast(self), pDesc, NumSurfaces, Usage, pSharedResource, ppSurface);
            }
            pub inline fn QueryResourceResidency(self: *T, ppResources: [*]?*IUnknown, pResidencyStatus: [*]dxgi.DXGI_RESIDENCY, NumResources: u32) HRESULT {
                return @as(*const IDXGIDevice.VTable, @ptrCast(self.vtable)).QueryResourceResidency(@ptrCast(self), ppResources, pResidencyStatus, NumResources);
            }
            pub inline fn SetGPUThreadPriority(self: *T, Priority: i32) HRESULT {
                return @as(*const IDXGIDevice.VTable, @ptrCast(self.vtable)).SetGPUThreadPriority(@ptrCast(self), Priority);
            }
            pub inline fn GetGPUThreadPriority(self: *T, pPriority: ?*i32) HRESULT {
                return @as(*const IDXGIDevice.VTable, @ptrCast(self.vtable)).GetGPUThreadPriority(@ptrCast(self), pPriority);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIObject.VTable,
        GetAdapter: *const fn (*IDXGIDevice, **IDXGIAdapter) callconv(WINAPI) HRESULT,
        CreateSurface: *const fn (*IDXGIDevice, *const dxgi.DXGI_SURFACE_DESC, u32, dxgi.DXGI_USAGE, *const dxgi.DXGI_SHARED_RESOURCE, **IDXGISurface) callconv(WINAPI) HRESULT,
        QueryResourceResidency: *const fn (*IDXGIDevice, *const *IUnknown, *dxgi.DXGI_RESIDENCY, u32) callconv(WINAPI) HRESULT,
        SetGPUThreadPriority: *const fn (*IDXGIDevice, INT) callconv(WINAPI) HRESULT,
        GetGPUThreadPriority: *const fn (*IDXGIDevice, *INT) callconv(WINAPI) HRESULT,
    };
};
pub const IDXGIDevice1 = extern struct { // IUnknown : IDXGIObject
    vtable: *VTable,
    pub const IID = GUID.parse("{77db970f-6276-48ba-ba28-070143b4392c}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetAdapter = IDXGIDevice.Methods(@This()).GetAdapter;
    pub const CreateSurface = IDXGIDevice.Methods(@This()).CreateSurface;
    pub const QueryResourceResidency = IDXGIDevice.Methods(@This()).QueryResourceResidency;
    pub const SetGPUThreadPriority = IDXGIDevice.Methods(@This()).SetGPUThreadPriority;
    pub const GetGPUThreadPriority = IDXGIDevice.Methods(@This()).GetGPUThreadPriority;
    pub const SetMaximumFrameLatency = IDXGIDevice1.Methods(@This()).SetMaximumFrameLatency;
    pub const GetMaximumFrameLatency = IDXGIDevice1.Methods(@This()).GetMaximumFrameLatency;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn SetMaximumFrameLatency(self: *T, MaxLatency: u32) HRESULT {
                return @as(*const IDXGIDevice1.VTable, @ptrCast(self.vtable)).SetMaximumFrameLatency(@ptrCast(self), MaxLatency);
            }
            pub inline fn GetMaximumFrameLatency(self: *T, pMaxLatency: ?*u32) HRESULT {
                return @as(*const IDXGIDevice1.VTable, @ptrCast(self.vtable)).GetMaximumFrameLatency(@ptrCast(self), pMaxLatency);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIDevice.VTable,
        SetMaximumFrameLatency: *const fn (*IDXGIDevice1, u32) callconv(WINAPI) HRESULT,
        GetMaximumFrameLatency: *const fn (*IDXGIDevice1, *u32) callconv(WINAPI) HRESULT,
    };
};
pub const IDXGIDeviceSubObject = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{3d3e0379-f9de-4d58-bb6c-18d62992f1a6}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDevice = IDXGIDeviceSubObject.Methods(@This()).GetDevice;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDevice(self: *T, riid: *const GUID, ppDevice: ?*?*anyopaque) HRESULT {
                return @as(*const IDXGIDeviceSubObject.VTable, @ptrCast(self.vtable)).GetDevice(@ptrCast(self), riid, ppDevice);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIObject.VTable,
        GetDevice: *const fn (self: *IDXGIDeviceSubObject, riid: *const GUID, device: ?*?*anyopaque) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIFactory = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{7b7166ec-21c7-44ae-b21a-c9ae321ae369}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const EnumAdapters = IDXGIFactory.Methods(@This()).EnumAdapters;
    pub const MakeWindowAssociation = IDXGIFactory.Methods(@This()).MakeWindowAssociation;
    pub const GetWindowAssociation = IDXGIFactory.Methods(@This()).GetWindowAssociation;
    pub const CreateSwapChain = IDXGIFactory.Methods(@This()).CreateSwapChain;
    pub const CreateSoftwareAdapter = IDXGIFactory.Methods(@This()).CreateSoftwareAdapter;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn EnumAdapters(self: *T, Adapter: u32, ppAdapter: ?*?*IDXGIAdapter) HRESULT {
                return @as(*const IDXGIFactory.VTable, @ptrCast(self.vtable)).EnumAdapters(@ptrCast(self), Adapter, ppAdapter);
            }
            pub inline fn MakeWindowAssociation(self: *T, WindowHandle: ?HWND, Flags: u32) HRESULT {
                return @as(*const IDXGIFactory.VTable, @ptrCast(self.vtable)).MakeWindowAssociation(@ptrCast(self), WindowHandle, Flags);
            }
            pub inline fn GetWindowAssociation(self: *T, pWindowHandle: ?*?HWND) HRESULT {
                return @as(*const IDXGIFactory.VTable, @ptrCast(self.vtable)).GetWindowAssociation(@ptrCast(self), pWindowHandle);
            }
            pub inline fn CreateSwapChain(self: *T, pDevice: *IUnknown, pDesc: *dxgi.DXGI_SWAP_CHAIN_DESC, ppSwapChain: **IDXGISwapChain) HRESULT {
                return @as(*const IDXGIFactory.VTable, @ptrCast(self.vtable)).CreateSwapChain(@ptrCast(self), pDevice, pDesc, ppSwapChain);
            }
            pub inline fn CreateSoftwareAdapter(self: *T, Module: ?HINSTANCE, ppAdapter: ?*?*IDXGIAdapter) HRESULT {
                return @as(*const IDXGIFactory.VTable, @ptrCast(self.vtable)).CreateSoftwareAdapter(@ptrCast(self), Module, ppAdapter);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIObject.VTable,
        EnumAdapters: *const fn (self: *IDXGIFactory, adapter_idx: u32, adapter: **IDXGIAdapter) callconv(WINAPI) HRESULT,
        MakeWindowAssociation: *const fn (self: *IDXGIFactory, window: HWND, flags: u32) callconv(WINAPI) HRESULT,
        GetWindowAssociation: *const fn (self: *IDXGIFactory, window: *HWND) callconv(WINAPI) HRESULT,
        CreateSwapChain: *const fn (self: *IDXGIFactory, device: *IUnknown, desc: *dxgi.DXGI_SWAP_CHAIN_DESC, swapchain: **IDXGISwapChain) callconv(WINAPI) HRESULT,
        CreateSoftwareAdapter: *const fn (self: *IDXGIFactory, swrast: HMODULE, adapter: **IDXGIAdapter) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIFactory1 = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{770aae78-f26f-4dba-a829-253c83d1b387}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const EnumAdapters = IDXGIFactory.Methods(@This()).EnumAdapters;
    pub const MakeWindowAssociation = IDXGIFactory.Methods(@This()).MakeWindowAssociation;
    pub const GetWindowAssociation = IDXGIFactory.Methods(@This()).GetWindowAssociation;
    pub const CreateSwapChain = IDXGIFactory.Methods(@This()).CreateSwapChain;
    pub const CreateSoftwareAdapter = IDXGIFactory.Methods(@This()).CreateSoftwareAdapter;
    pub const EnumAdapters1 = IDXGIFactory1.Methods(@This()).EnumAdapters1;
    pub const IsCurrent = IDXGIFactory1.Methods(@This()).IsCurrent;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn EnumAdapters1(self: *T, Adapter: u32, ppAdapter: ?*?*IDXGIAdapter1) HRESULT {
                return @as(*const IDXGIFactory1.VTable, @ptrCast(self.vtable)).EnumAdapters1(@ptrCast(self), Adapter, ppAdapter);
            }
            pub inline fn IsCurrent(self: *T) BOOL {
                return @as(*const IDXGIFactory1.VTable, @ptrCast(self.vtable)).IsCurrent(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIFactory.VTable,
        EnumAdapters1: *const fn (self: *IDXGIFactory1, Adapter: u32, ppAdapter: **IDXGIAdapter1) callconv(WINAPI) HRESULT,
        IsCurrent: *const fn (self: *IDXGIFactory1) callconv(WINAPI) WINBOOL,
    };
};
pub const IDXGIKeyedMutex = extern struct { // IUnknown : IDXGIObject : IDXGIDeviceSubObject
    vtable: *VTable,
    pub const IID = GUID.parse("{9d8e1289-d7b3-465f-8126-250e349af85d}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDevice = IDXGIDeviceSubObject.Methods(@This()).GetDevice;
    pub const AcquireSync = IDXGIKeyedMutex.Methods(@This()).AcquireSync;
    pub const ReleaseSync = IDXGIKeyedMutex.Methods(@This()).ReleaseSync;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn AcquireSync(self: *T, Key: u64, dwMilliseconds: u32) HRESULT {
                return @as(*const IDXGIKeyedMutex.VTable, @ptrCast(self.vtable)).AcquireSync(@ptrCast(self), Key, dwMilliseconds);
            }
            pub inline fn ReleaseSync(self: *T, Key: u64) HRESULT {
                return @as(*const IDXGIKeyedMutex.VTable, @ptrCast(self.vtable)).ReleaseSync(@ptrCast(self), Key);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIDeviceSubObject.VTable,
        AcquireSync: *const fn (*IDXGIKeyedMutex, u64, u32) callconv(WINAPI) HRESULT,
        ReleaseSync: *const fn (*IDXGIKeyedMutex, u64) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIObject = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{aec22fb8-76f3-4639-9be0-28eb43a67a2e}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn SetPrivateData(self: *T, Name: *const GUID, DataSize: u32, pData: ?*const anyopaque) HRESULT {
                return @as(*const IDXGIObject.VTable, @ptrCast(self.vtable)).SetPrivateData(@ptrCast(self), Name, DataSize, pData);
            }
            pub inline fn SetPrivateDataInterface(self: *T, Name: *const GUID, pUnknown: ?*IUnknown) HRESULT {
                return @as(*const IDXGIObject.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@ptrCast(self), Name, pUnknown);
            }
            pub inline fn GetPrivateData(self: *T, Name: *const GUID, pDataSize: ?*u32, pData: ?*anyopaque) HRESULT {
                return @as(*const IDXGIObject.VTable, @ptrCast(self.vtable)).GetPrivateData(@ptrCast(self), Name, pDataSize, pData);
            }
            pub inline fn GetParent(self: *T, riid: *const GUID, ppParent: ?*?*anyopaque) HRESULT {
                return @as(*const IDXGIObject.VTable, @ptrCast(self.vtable)).GetParent(@ptrCast(self), riid, ppParent);
            }
        };
    }

    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPrivateData: *const fn (self: *IDXGIObject, guid: *const GUID, data_size: u32, data: *const anyopaque) callconv(WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (self: *IDXGIObject, guid: *const GUID, object: *const IUnknown) callconv(WINAPI) HRESULT,
        GetPrivateData: *const fn (self: *IDXGIObject, guid: *const GUID, data_size: u32, data: ?*anyopaque) callconv(WINAPI) HRESULT,
        GetParent: *const fn (self: *IDXGIObject, riid: *const GUID, parent: ?*?*anyopaque) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIOutput = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{ae02eedb-c735-4690-8d52-5a8dc20213aa}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDesc = IDXGIOutput.Methods(@This()).GetDesc;
    pub const GetDisplayModeList = IDXGIOutput.Methods(@This()).GetDisplayModeList;
    pub const FindClosestMatchingMode = IDXGIOutput.Methods(@This()).FindClosestMatchingMode;
    pub const WaitForVBlank = IDXGIOutput.Methods(@This()).WaitForVBlank;
    pub const TakeOwnership = IDXGIOutput.Methods(@This()).TakeOwnership;
    pub const ReleaseOwnership = IDXGIOutput.Methods(@This()).ReleaseOwnership;
    pub const GetGammaControlCapabilities = IDXGIOutput.Methods(@This()).GetGammaControlCapabilities;
    pub const SetGammaControl = IDXGIOutput.Methods(@This()).SetGammaControl;
    pub const GetGammaControl = IDXGIOutput.Methods(@This()).GetGammaControl;
    pub const SetDisplaySurface = IDXGIOutput.Methods(@This()).SetDisplaySurface;
    pub const GetDisplaySurfaceData = IDXGIOutput.Methods(@This()).GetDisplaySurfaceData;
    pub const GetFrameStatistics = IDXGIOutput.Methods(@This()).GetFrameStatistics;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*dxgi.DXGI_OUTPUT_DESC) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
            pub inline fn GetDisplayModeList(self: *T, EnumFormat: dxgi.DXGI_FORMAT, Flags: u32, pNumModes: ?*u32, pDesc: ?[*]dxgi.DXGI_MODE_DESC) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).GetDisplayModeList(@ptrCast(self), EnumFormat, Flags, pNumModes, pDesc);
            }
            pub inline fn FindClosestMatchingMode(self: *T, pModeToMatch: *const dxgi.DXGI_MODE_DESC, pClosestMatch: ?*dxgi.DXGI_MODE_DESC, pConcernedDevice: ?*IUnknown) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).FindClosestMatchingMode(@ptrCast(self), pModeToMatch, pClosestMatch, pConcernedDevice);
            }
            pub inline fn WaitForVBlank(self: *T) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).WaitForVBlank(@ptrCast(self));
            }
            pub inline fn TakeOwnership(self: *T, pDevice: ?*IUnknown, Exclusive: BOOL) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).TakeOwnership(@ptrCast(self), pDevice, Exclusive);
            }
            pub inline fn ReleaseOwnership(self: *T) void {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).ReleaseOwnership(@ptrCast(self));
            }
            pub inline fn GetGammaControlCapabilities(self: *T, pGammaCaps: ?*dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).GetGammaControlCapabilities(@ptrCast(self), pGammaCaps);
            }
            pub inline fn SetGammaControl(self: *T, pArray: *const dxgi.DXGI_GAMMA_CONTROL) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).SetGammaControl(@ptrCast(self), pArray);
            }
            pub inline fn GetGammaControl(self: *T, pArray: ?*dxgi.DXGI_GAMMA_CONTROL) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).GetGammaControl(@ptrCast(self), pArray);
            }
            pub inline fn SetDisplaySurface(self: *T, pScanoutSurface: ?*IDXGISurface) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).SetDisplaySurface(@ptrCast(self), pScanoutSurface);
            }
            pub inline fn GetDisplaySurfaceData(self: *T, pDestination: ?*IDXGISurface) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).GetDisplaySurfaceData(@ptrCast(self), pDestination);
            }
            pub inline fn GetFrameStatistics(self: *T, pStats: ?*dxgi.DXGI_FRAME_STATISTICS) HRESULT {
                return @as(*const IDXGIOutput.VTable, @ptrCast(self.vtable)).GetFrameStatistics(@ptrCast(self), pStats);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIObject.VTable,
        GetDesc: *const fn (self: *IDXGIOutput, desc: *dxgi.DXGI_OUTPUT_DESC) callconv(WINAPI) HRESULT,
        GetDisplayModeList: *const fn (self: *IDXGIOutput, format: dxgi.DXGI_FORMAT, flags: u32, mode_count: u32, desc: *dxgi.DXGI_MODE_DESC) callconv(WINAPI) HRESULT,
        FindClosestMatchingMode: *const fn (self: *IDXGIOutput, mode: *const dxgi.DXGI_MODE_DESC, closest_match: *dxgi.DXGI_MODE_DESC, device: *IUnknown) callconv(WINAPI) HRESULT,
        WaitForVBlank: *const fn (self: *IDXGIOutput) callconv(WINAPI) HRESULT,
        TakeOwnership: *const fn (self: *IDXGIOutput, device: *IUnknown, exclusive: WINBOOL) callconv(WINAPI) HRESULT,
        ReleaseOwnership: *const fn (self: *IDXGIOutput) callconv(WINAPI) void,
        GetGammaControlCapabilities: *const fn (self: *IDXGIOutput, gamma_caps: *dxgi.DXGI_GAMMA_CONTROL_CAPABILITIES) callconv(WINAPI) HRESULT,
        SetGammaControl: *const fn (self: *IDXGIOutput, gamma_control: *const dxgi.DXGI_GAMMA_CONTROL) callconv(WINAPI) HRESULT,
        GetGammaControl: *const fn (self: *IDXGIOutput, gamma_control: *dxgi.DXGI_GAMMA_CONTROL) callconv(WINAPI) HRESULT,
        SetDisplaySurface: *const fn (self: *IDXGIOutput, surface: *IDXGISurface) callconv(WINAPI) HRESULT,
        GetDisplaySurfaceData: *const fn (self: *IDXGIOutput, surface: *IDXGISurface) callconv(WINAPI) HRESULT,
        GetFrameStatistics: *const fn (self: *IDXGIOutput, stats: *dxgi.DXGI_FRAME_STATISTICS) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGIResource = extern struct { // IUnknown : IDXGIObject : IDXGIDeviceSubObject
    vtable: *VTable,
    pub const IID = GUID.parse("{035f3ab4-482e-4e50-b41f-8a7f8bd8960b}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDevice = IDXGIDeviceSubObject.Methods(@This()).GetDevice;
    pub const GetSharedHandle = IDXGIResource.Methods(@This()).GetSharedHandle;
    pub const GetUsage = IDXGIResource.Methods(@This()).GetUsage;
    pub const SetEvictionPriority = IDXGIResource.Methods(@This()).SetEvictionPriority;
    pub const GetEvictionPriority = IDXGIResource.Methods(@This()).GetEvictionPriority;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetSharedHandle(self: *T, pSharedHandle: ?*?HANDLE) HRESULT {
                return @as(*const IDXGIResource.VTable, @ptrCast(self.vtable)).GetSharedHandle(@ptrCast(self), pSharedHandle);
            }
            pub inline fn GetUsage(self: *T, pUsage: ?*u32) HRESULT {
                return @as(*const IDXGIResource.VTable, @ptrCast(self.vtable)).GetUsage(@ptrCast(self), pUsage);
            }
            pub inline fn SetEvictionPriority(self: *T, EvictionPriority: dxgi.DXGI_RESOURCE_PRIORITY) HRESULT {
                return @as(*const IDXGIResource.VTable, @ptrCast(self.vtable)).SetEvictionPriority(@ptrCast(self), EvictionPriority);
            }
            pub inline fn GetEvictionPriority(self: *T, pEvictionPriority: ?*u32) HRESULT {
                return @as(*const IDXGIResource.VTable, @ptrCast(self.vtable)).GetEvictionPriority(@ptrCast(self), pEvictionPriority);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIDeviceSubObject.VTable,
        GetSharedHandle: *const fn (*IDXGIResource, *HANDLE) callconv(WINAPI) HRESULT,
        GetUsage: *const fn (*IDXGIResource, *dxgi.DXGI_USAGE) callconv(WINAPI) HRESULT,
        SetEvictionPriority: *const fn (*IDXGIResource, u32) callconv(WINAPI) HRESULT,
        GetEvictionPriority: *const fn (*IDXGIResource, *u32) callconv(WINAPI) HRESULT,
    };
};
pub const IDXGISurface = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{cafcb56c-6ac3-4889-bf47-9e23bbd260ec}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDevice = IDXGIDeviceSubObject.Methods(@This()).GetDevice;
    pub const GetDesc = IDXGISurface.Methods(@This()).GetDesc;
    pub const Map = IDXGISurface.Methods(@This()).Map;
    pub const Unmap = IDXGISurface.Methods(@This()).Unmap;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDesc(self: *T, pDesc: ?*dxgi.DXGI_SURFACE_DESC) HRESULT {
                return @as(*const IDXGISurface.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
            pub inline fn Map(self: *T, pLockedRect: ?*dxgi.DXGI_MAPPED_RECT, MapFlags: u32) HRESULT {
                return @as(*const IDXGISurface.VTable, @ptrCast(self.vtable)).Map(@ptrCast(self), pLockedRect, MapFlags);
            }
            pub inline fn Unmap(self: *T) HRESULT {
                return @as(*const IDXGISurface.VTable, @ptrCast(self.vtable)).Unmap(@ptrCast(self));
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIDeviceSubObject.VTable,
        GetDesc: *const fn (self: *IDXGISurface, desc: *dxgi.DXGI_SURFACE_DESC) callconv(WINAPI) HRESULT,
        Map: *const fn (self: *IDXGISurface, mapped_rect: *dxgi.DXGI_MAPPED_RECT, flags: u32) callconv(WINAPI) HRESULT,
        Unmap: *const fn (self: *IDXGISurface) callconv(WINAPI) HRESULT,
    };
};
pub const IDXGISurface1 = extern struct { // IUnknown : IDXGIObject : IDXGIDeviceSubObject : IDXGISurface
    vtable: *VTable,
    pub const IID = GUID.parse("{4ae63092-6327-4c1b-80ae-bfe12ea32b86}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDevice = IDXGIDeviceSubObject.Methods(@This()).GetDevice;
    pub const GetDesc = IDXGISurface.Methods(@This()).GetDesc;
    pub const Map = IDXGISurface.Methods(@This()).Map;
    pub const Unmap = IDXGISurface.Methods(@This()).Unmap;
    pub const GetDC = IDXGISurface1.Methods(@This()).GetDC;
    pub const ReleaseDC = IDXGISurface1.Methods(@This()).ReleaseDC;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn GetDC(self: *T, Discard: BOOL, phdc: ?*?HDC) HRESULT {
                return @as(*const IDXGISurface1.VTable, @ptrCast(self.vtable)).GetDC(@ptrCast(self), Discard, phdc);
            }
            pub inline fn ReleaseDC(self: *T, pDirtyRect: ?*RECT) HRESULT {
                return @as(*const IDXGISurface1.VTable, @ptrCast(self.vtable)).ReleaseDC(@ptrCast(self), pDirtyRect);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGISurface.VTable,
        GetDC: *const fn (*IDXGISurface1, WINBOOL, *HDC) callconv(WINAPI) HRESULT,
        ReleaseDC: *const fn (*IDXGISurface1, *RECT) callconv(WINAPI) HRESULT,
    };
};

pub const IDXGISwapChain = extern struct {
    vtable: *VTable,
    pub const IID = GUID.parse("{310d36a0-d2e7-4c0a-aa04-6a9d23b8886a}");

    pub const QueryInterface = IUnknown.Methods(@This()).QueryInterface;
    pub const AddRef = IUnknown.Methods(@This()).AddRef;
    pub const Release = IUnknown.Methods(@This()).Release;
    pub const SetPrivateData = IDXGIObject.Methods(@This()).SetPrivateData;
    pub const SetPrivateDataInterface = IDXGIObject.Methods(@This()).SetPrivateDataInterface;
    pub const GetPrivateData = IDXGIObject.Methods(@This()).GetPrivateData;
    pub const GetParent = IDXGIObject.Methods(@This()).GetParent;
    pub const GetDevice = IDXGIDeviceSubObject.Methods(@This()).GetDevice;
    pub const Present = IDXGISwapChain.Methods(@This()).Present;
    pub const GetBuffer = IDXGISwapChain.Methods(@This()).GetBuffer;
    pub const SetFullscreenState = IDXGISwapChain.Methods(@This()).SetFullscreenState;
    pub const GetFullscreenState = IDXGISwapChain.Methods(@This()).GetFullscreenState;
    pub const GetDesc = IDXGISwapChain.Methods(@This()).GetDesc;
    pub const ResizeBuffers = IDXGISwapChain.Methods(@This()).ResizeBuffers;
    pub const ResizeTarget = IDXGISwapChain.Methods(@This()).ResizeTarget;
    pub const GetContainingOutput = IDXGISwapChain.Methods(@This()).GetContainingOutput;
    pub const GetFrameStatistics = IDXGISwapChain.Methods(@This()).GetFrameStatistics;
    pub const GetLastPresentCount = IDXGISwapChain.Methods(@This()).GetLastPresentCount;

    pub fn Methods(comptime T: type) type {
        return extern struct {
            pub inline fn Present(self: *T, SyncInterval: u32, Flags: u32) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).Present(@ptrCast(self), SyncInterval, Flags);
            }
            pub inline fn GetBuffer(self: *T, Buffer: u32, riid: *const GUID, ppSurface: **anyopaque) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).GetBuffer(@ptrCast(self), Buffer, riid, ppSurface);
            }
            pub inline fn SetFullscreenState(self: *T, Fullscreen: BOOL, pTarget: ?*IDXGIOutput) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).SetFullscreenState(@ptrCast(self), Fullscreen, pTarget);
            }
            pub inline fn GetFullscreenState(self: *T, pFullscreen: ?*BOOL, ppTarget: ?*?*IDXGIOutput) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).GetFullscreenState(@ptrCast(self), pFullscreen, ppTarget);
            }
            pub inline fn GetDesc(self: *T, pDesc: ?*dxgi.DXGI_SWAP_CHAIN_DESC) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).GetDesc(@ptrCast(self), pDesc);
            }
            pub inline fn ResizeBuffers(self: *T, BufferCount: u32, Width: u32, Height: u32, NewFormat: dxgi.DXGI_FORMAT, SwapChainFlags: u32) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).ResizeBuffers(@ptrCast(self), BufferCount, Width, Height, NewFormat, SwapChainFlags);
            }
            pub inline fn ResizeTarget(self: *T, pNewTargetParameters: *const dxgi.DXGI_MODE_DESC) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).ResizeTarget(@ptrCast(self), pNewTargetParameters);
            }
            pub inline fn GetContainingOutput(self: *T, ppOutput: ?*?*IDXGIOutput) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).GetContainingOutput(@ptrCast(self), ppOutput);
            }
            pub inline fn GetFrameStatistics(self: *T, pStats: ?*dxgi.DXGI_FRAME_STATISTICS) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).GetFrameStatistics(@ptrCast(self), pStats);
            }
            pub inline fn GetLastPresentCount(self: *T, pLastPresentCount: ?*u32) HRESULT {
                return @as(*const IDXGISwapChain.VTable, @ptrCast(self.vtable)).GetLastPresentCount(@ptrCast(self), pLastPresentCount);
            }
        };
    }

    pub const VTable = extern struct {
        base: IDXGIDeviceSubObject.VTable,
        Present: *const fn (self: *IDXGISwapChain, sync_interval: u32, flags: u32) callconv(WINAPI) HRESULT,
        GetBuffer: *const fn (self: *IDXGISwapChain, buffer_idx: u32, riid: *const GUID, surface: **anyopaque) callconv(WINAPI) HRESULT,
        SetFullscreenState: *const fn (self: *IDXGISwapChain, fullscreen: WINBOOL, target: *IDXGIOutput) callconv(WINAPI) HRESULT,
        GetFullscreenState: *const fn (self: *IDXGISwapChain, fullscreen: *WINBOOL, target: **IDXGIOutput) callconv(WINAPI) HRESULT,
        GetDesc: *const fn (self: *IDXGISwapChain, desc: *dxgi.DXGI_SWAP_CHAIN_DESC) callconv(WINAPI) HRESULT,
        ResizeBuffers: *const fn (self: *IDXGISwapChain, buffer_count: u32, width: u32, height: u32, format: dxgi.DXGI_FORMAT, flags: u32) callconv(WINAPI) HRESULT,
        ResizeTarget: *const fn (self: *IDXGISwapChain, target_mode_desc: *const dxgi.DXGI_MODE_DESC) callconv(WINAPI) HRESULT,
        GetContainingOutput: *const fn (self: *IDXGISwapChain, output: **IDXGIOutput) callconv(WINAPI) HRESULT,
        GetFrameStatistics: *const fn (self: *IDXGISwapChain, stats: *dxgi.DXGI_FRAME_STATISTICS) callconv(WINAPI) HRESULT,
        GetLastPresentCount: *const fn (self: *IDXGISwapChain, last_present_count: *u32) callconv(WINAPI) HRESULT,
    };
};

pub const D3D11_DRIVER_TYPE = enum(u32) {
    UNKNOWN = 0,
    HARDWARE = 1,
    REFERENCE = 2,
    NULL = 3,
    SOFTWARE = 4,
    WARP = 5,
};

pub const D3D11_FEATURE_LEVEL = enum(u32) {
    @"9_1" = 0x9100,
    @"9_2" = 0x9200,
    @"9_3" = 0x9300,
    @"10_0" = 0xa000,
    @"10_1" = 0xa100,
    @"11_0" = 0xb000,
    @"11_1" = 0xb100,
    @"12_0" = 0xc000,
    @"12_1" = 0xc100,
};

pub const CreateDevice = D3D11CreateDevice;
extern "d3d11" fn D3D11CreateDevice(
    pAdapter: ?*anyopaque, // TODO: IDXGIAdapter
    DriverType: D3D11_DRIVER_TYPE,
    Software: ?HMODULE,
    Flags: D3D11_CREATE_DEVICE_FLAG,
    pFeatureLevels: [*]const D3D11_FEATURE_LEVEL,
    FeatureLevels: u32,
    SDKVersion: u32,
    ppDevice: **ID3D11Device,
    pFeatureLevel: ?*D3D11_FEATURE_LEVEL,
    ppImmediateContext: **ID3D11DeviceContext,
) callconv(WINAPI) HRESULT;

pub extern "dxgi" fn CreateDXGIFactory(riid: *const GUID, ppFactory: **IDXGIFactory) callconv(WINAPI) HRESULT;
pub extern "dxgi" fn CreateDXGIFactory1(riid: *const GUID, ppFactory: **IDXGIFactory1) callconv(WINAPI) HRESULT;
